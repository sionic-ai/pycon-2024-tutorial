{"id":0,"type":"vertex","label":"metaData","version":"0.5.0","projectRoot":"file:///private/tmp/rust-racingcar","positionEncoding":"utf-16","toolInfo":{"name":"rust-analyzer","version":"1.82.0 (f6e511ee 2024-10-15)"}}
{"id":1,"type":"vertex","label":"document","uri":"file:///private/tmp/rust-racingcar/rust-racingcar/src/main.rs","languageId":"rust"}
{"id":2,"type":"vertex","label":"foldingRangeResult","result":[{"startLine":0,"startCharacter":0,"endLine":3,"endCharacter":44},{"startLine":6,"startCharacter":10,"endLine":24,"endCharacter":1}]}
{"id":3,"type":"edge","label":"textDocument/foldingRange","inV":2,"outV":1}
{"id":4,"type":"vertex","label":"range","start":{"line":0,"character":2},"end":{"line":0,"character":6}}
{"id":5,"type":"vertex","label":"resultSet"}
{"id":6,"type":"edge","label":"next","inV":5,"outV":4}
{"id":7,"type":"vertex","label":"range","start":{"line":0,"character":30},"end":{"line":0,"character":35}}
{"id":8,"type":"vertex","label":"resultSet"}
{"id":9,"type":"edge","label":"next","inV":8,"outV":7}
{"id":10,"type":"vertex","label":"range","start":{"line":1,"character":2},"end":{"line":1,"character":6}}
{"id":11,"type":"edge","label":"next","inV":5,"outV":10}
{"id":12,"type":"vertex","label":"range","start":{"line":1,"character":30},"end":{"line":1,"character":34}}
{"id":13,"type":"vertex","label":"resultSet"}
{"id":14,"type":"edge","label":"next","inV":13,"outV":12}
{"id":15,"type":"vertex","label":"range","start":{"line":2,"character":2},"end":{"line":2,"character":6}}
{"id":16,"type":"edge","label":"next","inV":5,"outV":15}
{"id":17,"type":"vertex","label":"range","start":{"line":2,"character":29},"end":{"line":2,"character":33}}
{"id":18,"type":"vertex","label":"resultSet"}
{"id":19,"type":"edge","label":"next","inV":18,"outV":17}
{"id":20,"type":"vertex","label":"range","start":{"line":3,"character":2},"end":{"line":3,"character":6}}
{"id":21,"type":"edge","label":"next","inV":5,"outV":20}
{"id":22,"type":"vertex","label":"range","start":{"line":3,"character":34},"end":{"line":3,"character":43}}
{"id":23,"type":"vertex","label":"resultSet"}
{"id":24,"type":"edge","label":"next","inV":23,"outV":22}
{"id":25,"type":"vertex","label":"range","start":{"line":4,"character":4},"end":{"line":4,"character":9}}
{"id":26,"type":"vertex","label":"resultSet"}
{"id":27,"type":"edge","label":"next","inV":26,"outV":25}
{"id":28,"type":"vertex","label":"range","start":{"line":4,"character":11},"end":{"line":4,"character":15}}
{"id":29,"type":"edge","label":"next","inV":13,"outV":28}
{"id":30,"type":"vertex","label":"range","start":{"line":4,"character":17},"end":{"line":4,"character":23}}
{"id":31,"type":"vertex","label":"resultSet"}
{"id":32,"type":"edge","label":"next","inV":31,"outV":30}
{"id":33,"type":"vertex","label":"range","start":{"line":6,"character":3},"end":{"line":6,"character":7}}
{"id":34,"type":"vertex","label":"resultSet"}
{"id":35,"type":"edge","label":"next","inV":34,"outV":33}
{"id":36,"type":"vertex","label":"range","start":{"line":7,"character":4},"end":{"line":7,"character":11}}
{"id":37,"type":"vertex","label":"resultSet"}
{"id":38,"type":"edge","label":"next","inV":37,"outV":36}
{"id":39,"type":"vertex","label":"range","start":{"line":10,"character":4},"end":{"line":10,"character":11}}
{"id":40,"type":"edge","label":"next","inV":37,"outV":39}
{"id":41,"type":"vertex","label":"range","start":{"line":11,"character":8},"end":{"line":11,"character":26}}
{"id":42,"type":"vertex","label":"resultSet"}
{"id":43,"type":"edge","label":"next","inV":42,"outV":41}
{"id":44,"type":"vertex","label":"range","start":{"line":11,"character":28},"end":{"line":11,"character":31}}
{"id":45,"type":"vertex","label":"resultSet"}
{"id":46,"type":"edge","label":"next","inV":45,"outV":44}
{"id":47,"type":"vertex","label":"range","start":{"line":11,"character":34},"end":{"line":11,"character":39}}
{"id":48,"type":"edge","label":"next","inV":8,"outV":47}
{"id":49,"type":"vertex","label":"range","start":{"line":11,"character":41},"end":{"line":11,"character":54}}
{"id":50,"type":"vertex","label":"resultSet"}
{"id":51,"type":"edge","label":"next","inV":50,"outV":49}
{"id":52,"type":"vertex","label":"range","start":{"line":12,"character":4},"end":{"line":12,"character":11}}
{"id":53,"type":"edge","label":"next","inV":37,"outV":52}
{"id":54,"type":"vertex","label":"range","start":{"line":12,"character":34},"end":{"line":12,"character":52}}
{"id":55,"type":"edge","label":"next","inV":42,"outV":54}
{"id":56,"type":"vertex","label":"range","start":{"line":15,"character":4},"end":{"line":15,"character":11}}
{"id":57,"type":"edge","label":"next","inV":37,"outV":56}
{"id":58,"type":"vertex","label":"range","start":{"line":16,"character":8},"end":{"line":16,"character":30}}
{"id":59,"type":"vertex","label":"resultSet"}
{"id":60,"type":"edge","label":"next","inV":59,"outV":58}
{"id":61,"type":"vertex","label":"range","start":{"line":16,"character":32},"end":{"line":16,"character":35}}
{"id":62,"type":"edge","label":"next","inV":45,"outV":61}
{"id":63,"type":"vertex","label":"range","start":{"line":16,"character":38},"end":{"line":16,"character":43}}
{"id":64,"type":"edge","label":"next","inV":8,"outV":63}
{"id":65,"type":"vertex","label":"range","start":{"line":16,"character":45},"end":{"line":16,"character":58}}
{"id":66,"type":"edge","label":"next","inV":50,"outV":65}
{"id":67,"type":"vertex","label":"range","start":{"line":17,"character":4},"end":{"line":17,"character":11}}
{"id":68,"type":"edge","label":"next","inV":37,"outV":67}
{"id":69,"type":"vertex","label":"range","start":{"line":17,"character":29},"end":{"line":17,"character":51}}
{"id":70,"type":"edge","label":"next","inV":59,"outV":69}
{"id":71,"type":"vertex","label":"range","start":{"line":19,"character":4},"end":{"line":19,"character":11}}
{"id":72,"type":"edge","label":"next","inV":37,"outV":71}
{"id":73,"type":"vertex","label":"range","start":{"line":20,"character":8},"end":{"line":20,"character":20}}
{"id":74,"type":"vertex","label":"resultSet"}
{"id":75,"type":"edge","label":"next","inV":74,"outV":73}
{"id":76,"type":"vertex","label":"range","start":{"line":20,"character":22},"end":{"line":20,"character":25}}
{"id":77,"type":"vertex","label":"resultSet"}
{"id":78,"type":"edge","label":"next","inV":77,"outV":76}
{"id":79,"type":"vertex","label":"range","start":{"line":20,"character":26},"end":{"line":20,"character":32}}
{"id":80,"type":"vertex","label":"resultSet"}
{"id":81,"type":"edge","label":"next","inV":80,"outV":79}
{"id":82,"type":"vertex","label":"range","start":{"line":20,"character":36},"end":{"line":20,"character":41}}
{"id":83,"type":"edge","label":"next","inV":8,"outV":82}
{"id":84,"type":"vertex","label":"range","start":{"line":20,"character":43},"end":{"line":20,"character":54}}
{"id":85,"type":"vertex","label":"resultSet"}
{"id":86,"type":"edge","label":"next","inV":85,"outV":84}
{"id":87,"type":"vertex","label":"range","start":{"line":21,"character":4},"end":{"line":21,"character":11}}
{"id":88,"type":"edge","label":"next","inV":37,"outV":87}
{"id":89,"type":"vertex","label":"range","start":{"line":21,"character":35},"end":{"line":21,"character":47}}
{"id":90,"type":"edge","label":"next","inV":74,"outV":89}
{"id":91,"type":"vertex","label":"range","start":{"line":23,"character":5},"end":{"line":23,"character":9}}
{"id":92,"type":"edge","label":"next","inV":13,"outV":91}
{"id":93,"type":"vertex","label":"range","start":{"line":23,"character":11},"end":{"line":23,"character":15}}
{"id":94,"type":"vertex","label":"resultSet"}
{"id":95,"type":"edge","label":"next","inV":94,"outV":93}
{"id":96,"type":"vertex","label":"range","start":{"line":23,"character":19},"end":{"line":23,"character":25}}
{"id":97,"type":"edge","label":"next","inV":31,"outV":96}
{"id":98,"type":"vertex","label":"range","start":{"line":23,"character":28},"end":{"line":23,"character":31}}
{"id":99,"type":"vertex","label":"resultSet"}
{"id":100,"type":"edge","label":"next","inV":99,"outV":98}
{"id":101,"type":"vertex","label":"range","start":{"line":23,"character":32},"end":{"line":23,"character":44}}
{"id":102,"type":"edge","label":"next","inV":74,"outV":101}
{"id":103,"type":"vertex","label":"range","start":{"line":23,"character":46},"end":{"line":23,"character":64}}
{"id":104,"type":"edge","label":"next","inV":42,"outV":103}
{"id":105,"type":"vertex","label":"range","start":{"line":23,"character":66},"end":{"line":23,"character":88}}
{"id":106,"type":"edge","label":"next","inV":59,"outV":105}
{"id":107,"type":"edge","label":"contains","inVs":[4,7,10,12,15,17,20,22,25,28,30,33,36,39,41,44,47,49,52,54,56,58,61,63,65,67,69,71,73,76,79,82,84,87,89,91,93,96,98,101,103,105],"outV":1}
{"id":108,"type":"vertex","label":"document","uri":"file:///private/tmp/rust-racingcar/rust-racingcar/src/test/game-test.rs","languageId":"rust"}
{"id":109,"type":"vertex","label":"foldingRangeResult","result":[{"startLine":2,"startCharacter":0,"endLine":7,"endCharacter":30,"kind":"imports"},{"startLine":11,"startCharacter":0,"endLine":31,"endCharacter":1},{"startLine":17,"startCharacter":53,"endLine":19,"endCharacter":6},{"startLine":17,"startCharacter":57,"endLine":19,"endCharacter":5},{"startLine":19,"startCharacter":10,"endLine":21,"endCharacter":6},{"startLine":19,"startCharacter":23,"endLine":21,"endCharacter":5},{"startLine":23,"startCharacter":34,"endLine":30,"endCharacter":5},{"startLine":24,"startCharacter":17,"endLine":26,"endCharacter":9},{"startLine":27,"startCharacter":18,"endLine":29,"endCharacter":9},{"startLine":34,"startCharacter":39,"endLine":39,"endCharacter":1},{"startLine":35,"startCharacter":12,"endLine":38,"endCharacter":6},{"startLine":35,"startCharacter":24,"endLine":38,"endCharacter":5},{"startLine":42,"startCharacter":49,"endLine":60,"endCharacter":1},{"startLine":43,"startCharacter":12,"endLine":59,"endCharacter":6},{"startLine":43,"startCharacter":24,"endLine":59,"endCharacter":5},{"startLine":63,"startCharacter":35,"endLine":118,"endCharacter":1},{"startLine":64,"startCharacter":33,"endLine":67,"endCharacter":5},{"startLine":70,"startCharacter":37,"endLine":73,"endCharacter":5},{"startLine":77,"startCharacter":37,"endLine":80,"endCharacter":5},{"startLine":84,"startCharacter":37,"endLine":87,"endCharacter":5},{"startLine":91,"startCharacter":37,"endLine":94,"endCharacter":5},{"startLine":111,"startCharacter":4,"endLine":117,"endCharacter":41,"kind":"comment"}]}
{"id":110,"type":"edge","label":"textDocument/foldingRange","inV":109,"outV":108}
{"id":111,"type":"vertex","label":"range","start":{"line":0,"character":2},"end":{"line":0,"character":6}}
{"id":112,"type":"edge","label":"next","inV":5,"outV":111}
{"id":113,"type":"vertex","label":"range","start":{"line":0,"character":33},"end":{"line":0,"character":37}}
{"id":114,"type":"vertex","label":"resultSet"}
{"id":115,"type":"edge","label":"next","inV":114,"outV":113}
{"id":116,"type":"vertex","label":"range","start":{"line":2,"character":4},"end":{"line":2,"character":7}}
{"id":117,"type":"vertex","label":"resultSet"}
{"id":118,"type":"edge","label":"next","inV":117,"outV":116}
{"id":119,"type":"vertex","label":"range","start":{"line":2,"character":9},"end":{"line":2,"character":14}}
{"id":120,"type":"vertex","label":"resultSet"}
{"id":121,"type":"edge","label":"next","inV":120,"outV":119}
{"id":122,"type":"vertex","label":"range","start":{"line":3,"character":4},"end":{"line":3,"character":8}}
{"id":123,"type":"edge","label":"next","inV":114,"outV":122}
{"id":124,"type":"vertex","label":"range","start":{"line":3,"character":10},"end":{"line":3,"character":16}}
{"id":125,"type":"vertex","label":"resultSet"}
{"id":126,"type":"edge","label":"next","inV":125,"outV":124}
{"id":127,"type":"vertex","label":"range","start":{"line":4,"character":4},"end":{"line":4,"character":9}}
{"id":128,"type":"edge","label":"next","inV":26,"outV":127}
{"id":129,"type":"vertex","label":"range","start":{"line":4,"character":11},"end":{"line":4,"character":15}}
{"id":130,"type":"edge","label":"next","inV":13,"outV":129}
{"id":131,"type":"vertex","label":"range","start":{"line":4,"character":18},"end":{"line":4,"character":22}}
{"id":132,"type":"edge","label":"next","inV":94,"outV":131}
{"id":133,"type":"vertex","label":"range","start":{"line":4,"character":26},"end":{"line":4,"character":34}}
{"id":134,"type":"edge","label":"next","inV":94,"outV":133}
{"id":135,"type":"vertex","label":"range","start":{"line":4,"character":36},"end":{"line":4,"character":40}}
{"id":136,"type":"edge","label":"next","inV":94,"outV":135}
{"id":137,"type":"vertex","label":"range","start":{"line":5,"character":4},"end":{"line":5,"character":9}}
{"id":138,"type":"edge","label":"next","inV":26,"outV":137}
{"id":139,"type":"vertex","label":"range","start":{"line":5,"character":11},"end":{"line":5,"character":20}}
{"id":140,"type":"edge","label":"next","inV":23,"outV":139}
{"id":141,"type":"vertex","label":"range","start":{"line":6,"character":4},"end":{"line":6,"character":9}}
{"id":142,"type":"edge","label":"next","inV":26,"outV":141}
{"id":143,"type":"vertex","label":"range","start":{"line":6,"character":11},"end":{"line":6,"character":15}}
{"id":144,"type":"edge","label":"next","inV":13,"outV":143}
{"id":145,"type":"vertex","label":"range","start":{"line":6,"character":18},"end":{"line":6,"character":24}}
{"id":146,"type":"edge","label":"next","inV":31,"outV":145}
{"id":147,"type":"vertex","label":"range","start":{"line":6,"character":26},"end":{"line":6,"character":36}}
{"id":148,"type":"vertex","label":"resultSet"}
{"id":149,"type":"edge","label":"next","inV":148,"outV":147}
{"id":150,"type":"vertex","label":"range","start":{"line":7,"character":4},"end":{"line":7,"character":9}}
{"id":151,"type":"edge","label":"next","inV":26,"outV":150}
{"id":152,"type":"vertex","label":"range","start":{"line":7,"character":11},"end":{"line":7,"character":15}}
{"id":153,"type":"edge","label":"next","inV":13,"outV":152}
{"id":154,"type":"vertex","label":"range","start":{"line":7,"character":17},"end":{"line":7,"character":23}}
{"id":155,"type":"vertex","label":"resultSet"}
{"id":156,"type":"edge","label":"next","inV":155,"outV":154}
{"id":157,"type":"vertex","label":"range","start":{"line":7,"character":25},"end":{"line":7,"character":29}}
{"id":158,"type":"vertex","label":"resultSet"}
{"id":159,"type":"edge","label":"next","inV":158,"outV":157}
{"id":160,"type":"vertex","label":"range","start":{"line":9,"character":3},"end":{"line":9,"character":11}}
{"id":161,"type":"vertex","label":"resultSet"}
{"id":162,"type":"edge","label":"next","inV":161,"outV":160}
{"id":163,"type":"vertex","label":"range","start":{"line":9,"character":12},"end":{"line":9,"character":13}}
{"id":164,"type":"vertex","label":"resultSet"}
{"id":165,"type":"edge","label":"next","inV":164,"outV":163}
{"id":166,"type":"vertex","label":"range","start":{"line":9,"character":15},"end":{"line":9,"character":19}}
{"id":167,"type":"vertex","label":"resultSet"}
{"id":168,"type":"edge","label":"next","inV":167,"outV":166}
{"id":169,"type":"vertex","label":"range","start":{"line":9,"character":21},"end":{"line":9,"character":22}}
{"id":170,"type":"edge","label":"next","inV":164,"outV":169}
{"id":171,"type":"vertex","label":"range","start":{"line":10,"character":10},"end":{"line":10,"character":11}}
{"id":172,"type":"edge","label":"next","inV":164,"outV":171}
{"id":173,"type":"vertex","label":"range","start":{"line":10,"character":13},"end":{"line":10,"character":19}}
{"id":174,"type":"vertex","label":"resultSet"}
{"id":175,"type":"edge","label":"next","inV":174,"outV":173}
{"id":176,"type":"vertex","label":"range","start":{"line":10,"character":21},"end":{"line":10,"character":29}}
{"id":177,"type":"edge","label":"next","inV":94,"outV":176}
{"id":178,"type":"vertex","label":"range","start":{"line":10,"character":39},"end":{"line":10,"character":44}}
{"id":179,"type":"edge","label":"next","inV":120,"outV":178}
{"id":180,"type":"vertex","label":"range","start":{"line":10,"character":46},"end":{"line":10,"character":56}}
{"id":181,"type":"vertex","label":"resultSet"}
{"id":182,"type":"edge","label":"next","inV":181,"outV":180}
{"id":183,"type":"vertex","label":"range","start":{"line":12,"character":8},"end":{"line":12,"character":23}}
{"id":184,"type":"vertex","label":"resultSet"}
{"id":185,"type":"edge","label":"next","inV":184,"outV":183}
{"id":186,"type":"vertex","label":"range","start":{"line":12,"character":26},"end":{"line":12,"character":29}}
{"id":187,"type":"vertex","label":"resultSet"}
{"id":188,"type":"edge","label":"next","inV":187,"outV":186}
{"id":189,"type":"vertex","label":"range","start":{"line":12,"character":38},"end":{"line":12,"character":47}}
{"id":190,"type":"vertex","label":"resultSet"}
{"id":191,"type":"edge","label":"next","inV":190,"outV":189}
{"id":192,"type":"vertex","label":"range","start":{"line":12,"character":59},"end":{"line":12,"character":68}}
{"id":193,"type":"edge","label":"next","inV":190,"outV":192}
{"id":194,"type":"vertex","label":"range","start":{"line":12,"character":80},"end":{"line":12,"character":89}}
{"id":195,"type":"edge","label":"next","inV":190,"outV":194}
{"id":196,"type":"vertex","label":"range","start":{"line":13,"character":8},"end":{"line":13,"character":25}}
{"id":197,"type":"vertex","label":"resultSet"}
{"id":198,"type":"edge","label":"next","inV":197,"outV":196}
{"id":199,"type":"vertex","label":"range","start":{"line":14,"character":8},"end":{"line":14,"character":26}}
{"id":200,"type":"vertex","label":"resultSet"}
{"id":201,"type":"edge","label":"next","inV":200,"outV":199}
{"id":202,"type":"vertex","label":"range","start":{"line":17,"character":8},"end":{"line":17,"character":31}}
{"id":203,"type":"vertex","label":"resultSet"}
{"id":204,"type":"edge","label":"next","inV":203,"outV":202}
{"id":205,"type":"vertex","label":"range","start":{"line":17,"character":34},"end":{"line":17,"character":39}}
{"id":206,"type":"edge","label":"next","inV":120,"outV":205}
{"id":207,"type":"vertex","label":"range","start":{"line":17,"character":41},"end":{"line":17,"character":53}}
{"id":208,"type":"vertex","label":"resultSet"}
{"id":209,"type":"edge","label":"next","inV":208,"outV":207}
{"id":210,"type":"vertex","label":"range","start":{"line":18,"character":8},"end":{"line":18,"character":16}}
{"id":211,"type":"edge","label":"next","inV":94,"outV":210}
{"id":212,"type":"vertex","label":"range","start":{"line":18,"character":18},"end":{"line":18,"character":21}}
{"id":213,"type":"edge","label":"next","inV":99,"outV":212}
{"id":214,"type":"vertex","label":"range","start":{"line":18,"character":22},"end":{"line":18,"character":37}}
{"id":215,"type":"edge","label":"next","inV":184,"outV":214}
{"id":216,"type":"vertex","label":"range","start":{"line":18,"character":39},"end":{"line":18,"character":56}}
{"id":217,"type":"edge","label":"next","inV":197,"outV":216}
{"id":218,"type":"vertex","label":"range","start":{"line":18,"character":58},"end":{"line":18,"character":76}}
{"id":219,"type":"edge","label":"next","inV":200,"outV":218}
{"id":220,"type":"vertex","label":"range","start":{"line":19,"character":7},"end":{"line":19,"character":10}}
{"id":221,"type":"vertex","label":"resultSet"}
{"id":222,"type":"edge","label":"next","inV":221,"outV":220}
{"id":223,"type":"vertex","label":"range","start":{"line":19,"character":12},"end":{"line":19,"character":21}}
{"id":224,"type":"vertex","label":"resultSet"}
{"id":225,"type":"edge","label":"next","inV":224,"outV":223}
{"id":226,"type":"vertex","label":"range","start":{"line":20,"character":8},"end":{"line":20,"character":12}}
{"id":227,"type":"edge","label":"next","inV":167,"outV":226}
{"id":228,"type":"vertex","label":"range","start":{"line":20,"character":14},"end":{"line":20,"character":23}}
{"id":229,"type":"edge","label":"next","inV":224,"outV":228}
{"id":230,"type":"vertex","label":"range","start":{"line":23,"character":10},"end":{"line":23,"character":33}}
{"id":231,"type":"edge","label":"next","inV":203,"outV":230}
{"id":232,"type":"vertex","label":"range","start":{"line":24,"character":8},"end":{"line":24,"character":10}}
{"id":233,"type":"vertex","label":"resultSet"}
{"id":234,"type":"edge","label":"next","inV":233,"outV":232}
{"id":235,"type":"vertex","label":"range","start":{"line":25,"character":12},"end":{"line":25,"character":19}}
{"id":236,"type":"edge","label":"next","inV":37,"outV":235}
{"id":237,"type":"vertex","label":"range","start":{"line":27,"character":8},"end":{"line":27,"character":11}}
{"id":238,"type":"vertex","label":"resultSet"}
{"id":239,"type":"edge","label":"next","inV":238,"outV":237}
{"id":240,"type":"vertex","label":"range","start":{"line":28,"character":12},"end":{"line":28,"character":17}}
{"id":241,"type":"vertex","label":"resultSet"}
{"id":242,"type":"edge","label":"next","inV":241,"outV":240}
{"id":243,"type":"vertex","label":"range","start":{"line":33,"character":2},"end":{"line":33,"character":6}}
{"id":244,"type":"vertex","label":"resultSet"}
{"id":245,"type":"edge","label":"next","inV":244,"outV":243}
{"id":246,"type":"vertex","label":"range","start":{"line":34,"character":3},"end":{"line":34,"character":36}}
{"id":247,"type":"vertex","label":"resultSet"}
{"id":248,"type":"edge","label":"next","inV":247,"outV":246}
{"id":249,"type":"vertex","label":"range","start":{"line":35,"character":4},"end":{"line":35,"character":12}}
{"id":250,"type":"edge","label":"next","inV":161,"outV":249}
{"id":251,"type":"vertex","label":"range","start":{"line":35,"character":14},"end":{"line":35,"character":22}}
{"id":252,"type":"vertex","label":"resultSet"}
{"id":253,"type":"edge","label":"next","inV":252,"outV":251}
{"id":254,"type":"vertex","label":"range","start":{"line":36,"character":8},"end":{"line":36,"character":17}}
{"id":255,"type":"vertex","label":"resultSet"}
{"id":256,"type":"edge","label":"next","inV":255,"outV":254}
{"id":257,"type":"vertex","label":"range","start":{"line":36,"character":19},"end":{"line":36,"character":27}}
{"id":258,"type":"edge","label":"next","inV":252,"outV":257}
{"id":259,"type":"vertex","label":"range","start":{"line":36,"character":28},"end":{"line":36,"character":49}}
{"id":260,"type":"vertex","label":"resultSet"}
{"id":261,"type":"edge","label":"next","inV":260,"outV":259}
{"id":262,"type":"vertex","label":"range","start":{"line":37,"character":8},"end":{"line":37,"character":17}}
{"id":263,"type":"edge","label":"next","inV":255,"outV":262}
{"id":264,"type":"vertex","label":"range","start":{"line":37,"character":19},"end":{"line":37,"character":27}}
{"id":265,"type":"edge","label":"next","inV":252,"outV":264}
{"id":266,"type":"vertex","label":"range","start":{"line":37,"character":28},"end":{"line":37,"character":50}}
{"id":267,"type":"vertex","label":"resultSet"}
{"id":268,"type":"edge","label":"next","inV":267,"outV":266}
{"id":269,"type":"vertex","label":"range","start":{"line":41,"character":2},"end":{"line":41,"character":6}}
{"id":270,"type":"edge","label":"next","inV":244,"outV":269}
{"id":271,"type":"vertex","label":"range","start":{"line":42,"character":3},"end":{"line":42,"character":46}}
{"id":272,"type":"vertex","label":"resultSet"}
{"id":273,"type":"edge","label":"next","inV":272,"outV":271}
{"id":274,"type":"vertex","label":"range","start":{"line":43,"character":4},"end":{"line":43,"character":12}}
{"id":275,"type":"edge","label":"next","inV":161,"outV":274}
{"id":276,"type":"vertex","label":"range","start":{"line":43,"character":14},"end":{"line":43,"character":22}}
{"id":277,"type":"vertex","label":"resultSet"}
{"id":278,"type":"edge","label":"next","inV":277,"outV":276}
{"id":279,"type":"vertex","label":"range","start":{"line":45,"character":12},"end":{"line":45,"character":28}}
{"id":280,"type":"vertex","label":"resultSet"}
{"id":281,"type":"edge","label":"next","inV":280,"outV":279}
{"id":282,"type":"vertex","label":"range","start":{"line":45,"character":31},"end":{"line":45,"character":39}}
{"id":283,"type":"edge","label":"next","inV":277,"outV":282}
{"id":284,"type":"vertex","label":"range","start":{"line":45,"character":40},"end":{"line":45,"character":51}}
{"id":285,"type":"vertex","label":"resultSet"}
{"id":286,"type":"edge","label":"next","inV":285,"outV":284}
{"id":287,"type":"vertex","label":"range","start":{"line":47,"character":16},"end":{"line":47,"character":23}}
{"id":288,"type":"vertex","label":"resultSet"}
{"id":289,"type":"edge","label":"next","inV":288,"outV":287}
{"id":290,"type":"vertex","label":"range","start":{"line":47,"character":26},"end":{"line":47,"character":29}}
{"id":291,"type":"edge","label":"next","inV":77,"outV":290}
{"id":292,"type":"vertex","label":"range","start":{"line":47,"character":31},"end":{"line":47,"character":44}}
{"id":293,"type":"vertex","label":"resultSet"}
{"id":294,"type":"edge","label":"next","inV":293,"outV":292}
{"id":295,"type":"vertex","label":"range","start":{"line":47,"character":45},"end":{"line":47,"character":61}}
{"id":296,"type":"edge","label":"next","inV":280,"outV":295}
{"id":297,"type":"vertex","label":"range","start":{"line":47,"character":62},"end":{"line":47,"character":65}}
{"id":298,"type":"vertex","label":"resultSet"}
{"id":299,"type":"edge","label":"next","inV":298,"outV":297}
{"id":300,"type":"vertex","label":"range","start":{"line":48,"character":8},"end":{"line":48,"character":15}}
{"id":301,"type":"edge","label":"next","inV":288,"outV":300}
{"id":302,"type":"vertex","label":"range","start":{"line":48,"character":16},"end":{"line":48,"character":26}}
{"id":303,"type":"vertex","label":"resultSet"}
{"id":304,"type":"edge","label":"next","inV":303,"outV":302}
{"id":305,"type":"vertex","label":"range","start":{"line":48,"character":27},"end":{"line":48,"character":43}}
{"id":306,"type":"edge","label":"next","inV":280,"outV":305}
{"id":307,"type":"vertex","label":"range","start":{"line":49,"character":12},"end":{"line":49,"character":18}}
{"id":308,"type":"vertex","label":"resultSet"}
{"id":309,"type":"edge","label":"next","inV":308,"outV":307}
{"id":310,"type":"vertex","label":"range","start":{"line":49,"character":21},"end":{"line":49,"character":28}}
{"id":311,"type":"edge","label":"next","inV":288,"outV":310}
{"id":312,"type":"vertex","label":"range","start":{"line":49,"character":29},"end":{"line":49,"character":36}}
{"id":313,"type":"vertex","label":"resultSet"}
{"id":314,"type":"edge","label":"next","inV":313,"outV":312}
{"id":315,"type":"vertex","label":"range","start":{"line":49,"character":40},"end":{"line":49,"character":46}}
{"id":316,"type":"vertex","label":"resultSet"}
{"id":317,"type":"edge","label":"next","inV":316,"outV":315}
{"id":318,"type":"vertex","label":"range","start":{"line":52,"character":12},"end":{"line":52,"character":17}}
{"id":319,"type":"vertex","label":"resultSet"}
{"id":320,"type":"edge","label":"next","inV":319,"outV":318}
{"id":321,"type":"vertex","label":"range","start":{"line":52,"character":20},"end":{"line":52,"character":26}}
{"id":322,"type":"edge","label":"next","inV":308,"outV":321}
{"id":323,"type":"vertex","label":"range","start":{"line":52,"character":27},"end":{"line":52,"character":36}}
{"id":324,"type":"vertex","label":"resultSet"}
{"id":325,"type":"edge","label":"next","inV":324,"outV":323}
{"id":326,"type":"vertex","label":"range","start":{"line":55,"character":8},"end":{"line":55,"character":17}}
{"id":327,"type":"edge","label":"next","inV":255,"outV":326}
{"id":328,"type":"vertex","label":"range","start":{"line":55,"character":19},"end":{"line":55,"character":24}}
{"id":329,"type":"edge","label":"next","inV":319,"outV":328}
{"id":330,"type":"vertex","label":"range","start":{"line":55,"character":25},"end":{"line":55,"character":28}}
{"id":331,"type":"edge","label":"next","inV":298,"outV":330}
{"id":332,"type":"vertex","label":"range","start":{"line":55,"character":32},"end":{"line":55,"character":40}}
{"id":333,"type":"edge","label":"next","inV":277,"outV":332}
{"id":334,"type":"vertex","label":"range","start":{"line":55,"character":41},"end":{"line":55,"character":63}}
{"id":335,"type":"edge","label":"next","inV":267,"outV":334}
{"id":336,"type":"vertex","label":"range","start":{"line":55,"character":69},"end":{"line":55,"character":74}}
{"id":337,"type":"vertex","label":"resultSet"}
{"id":338,"type":"edge","label":"next","inV":337,"outV":336}
{"id":339,"type":"vertex","label":"range","start":{"line":57,"character":12},"end":{"line":57,"character":16}}
{"id":340,"type":"vertex","label":"resultSet"}
{"id":341,"type":"edge","label":"next","inV":340,"outV":339}
{"id":342,"type":"vertex","label":"range","start":{"line":57,"character":19},"end":{"line":57,"character":24}}
{"id":343,"type":"edge","label":"next","inV":319,"outV":342}
{"id":344,"type":"vertex","label":"range","start":{"line":57,"character":25},"end":{"line":57,"character":28}}
{"id":345,"type":"vertex","label":"resultSet"}
{"id":346,"type":"edge","label":"next","inV":345,"outV":344}
{"id":347,"type":"vertex","label":"range","start":{"line":57,"character":32},"end":{"line":57,"character":38}}
{"id":348,"type":"edge","label":"next","inV":316,"outV":347}
{"id":349,"type":"vertex","label":"range","start":{"line":58,"character":8},"end":{"line":58,"character":17}}
{"id":350,"type":"edge","label":"next","inV":255,"outV":349}
{"id":351,"type":"vertex","label":"range","start":{"line":58,"character":19},"end":{"line":58,"character":23}}
{"id":352,"type":"edge","label":"next","inV":340,"outV":351}
{"id":353,"type":"vertex","label":"range","start":{"line":58,"character":24},"end":{"line":58,"character":39}}
{"id":354,"type":"vertex","label":"resultSet"}
{"id":355,"type":"edge","label":"next","inV":354,"outV":353}
{"id":356,"type":"vertex","label":"range","start":{"line":62,"character":2},"end":{"line":62,"character":6}}
{"id":357,"type":"edge","label":"next","inV":244,"outV":356}
{"id":358,"type":"vertex","label":"range","start":{"line":63,"character":3},"end":{"line":63,"character":32}}
{"id":359,"type":"vertex","label":"resultSet"}
{"id":360,"type":"edge","label":"next","inV":359,"outV":358}
{"id":361,"type":"vertex","label":"range","start":{"line":64,"character":8},"end":{"line":64,"character":19}}
{"id":362,"type":"vertex","label":"resultSet"}
{"id":363,"type":"edge","label":"next","inV":362,"outV":361}
{"id":364,"type":"vertex","label":"range","start":{"line":64,"character":22},"end":{"line":64,"character":26}}
{"id":365,"type":"edge","label":"next","inV":158,"outV":364}
{"id":366,"type":"vertex","label":"range","start":{"line":64,"character":28},"end":{"line":64,"character":32}}
{"id":367,"type":"vertex","label":"resultSet"}
{"id":368,"type":"edge","label":"next","inV":367,"outV":366}
{"id":369,"type":"vertex","label":"range","start":{"line":65,"character":8},"end":{"line":65,"character":19}}
{"id":370,"type":"vertex","label":"resultSet"}
{"id":371,"type":"edge","label":"next","inV":370,"outV":369}
{"id":372,"type":"vertex","label":"range","start":{"line":66,"character":8},"end":{"line":66,"character":16}}
{"id":373,"type":"vertex","label":"resultSet"}
{"id":374,"type":"edge","label":"next","inV":373,"outV":372}
{"id":375,"type":"vertex","label":"range","start":{"line":68,"character":8},"end":{"line":68,"character":28}}
{"id":376,"type":"vertex","label":"resultSet"}
{"id":377,"type":"edge","label":"next","inV":376,"outV":375}
{"id":378,"type":"vertex","label":"range","start":{"line":68,"character":31},"end":{"line":68,"character":35}}
{"id":379,"type":"vertex","label":"resultSet"}
{"id":380,"type":"edge","label":"next","inV":379,"outV":378}
{"id":381,"type":"vertex","label":"range","start":{"line":68,"character":37},"end":{"line":68,"character":48}}
{"id":382,"type":"edge","label":"next","inV":362,"outV":381}
{"id":383,"type":"vertex","label":"range","start":{"line":70,"character":12},"end":{"line":70,"character":23}}
{"id":384,"type":"vertex","label":"resultSet"}
{"id":385,"type":"edge","label":"next","inV":384,"outV":383}
{"id":386,"type":"vertex","label":"range","start":{"line":70,"character":26},"end":{"line":70,"character":30}}
{"id":387,"type":"edge","label":"next","inV":158,"outV":386}
{"id":388,"type":"vertex","label":"range","start":{"line":70,"character":32},"end":{"line":70,"character":36}}
{"id":389,"type":"edge","label":"next","inV":367,"outV":388}
{"id":390,"type":"vertex","label":"range","start":{"line":71,"character":8},"end":{"line":71,"character":19}}
{"id":391,"type":"edge","label":"next","inV":370,"outV":390}
{"id":392,"type":"vertex","label":"range","start":{"line":72,"character":8},"end":{"line":72,"character":16}}
{"id":393,"type":"edge","label":"next","inV":373,"outV":392}
{"id":394,"type":"vertex","label":"range","start":{"line":74,"character":4},"end":{"line":74,"character":15}}
{"id":395,"type":"edge","label":"next","inV":384,"outV":394}
{"id":396,"type":"vertex","label":"range","start":{"line":74,"character":16},"end":{"line":74,"character":44}}
{"id":397,"type":"vertex","label":"resultSet"}
{"id":398,"type":"edge","label":"next","inV":397,"outV":396}
{"id":399,"type":"vertex","label":"range","start":{"line":74,"character":45},"end":{"line":74,"character":56}}
{"id":400,"type":"edge","label":"next","inV":384,"outV":399}
{"id":401,"type":"vertex","label":"range","start":{"line":74,"character":57},"end":{"line":74,"character":65}}
{"id":402,"type":"edge","label":"next","inV":373,"outV":401}
{"id":403,"type":"vertex","label":"range","start":{"line":74,"character":67},"end":{"line":74,"character":87}}
{"id":404,"type":"edge","label":"next","inV":376,"outV":403}
{"id":405,"type":"vertex","label":"range","start":{"line":75,"character":8},"end":{"line":75,"character":28}}
{"id":406,"type":"vertex","label":"resultSet"}
{"id":407,"type":"edge","label":"next","inV":406,"outV":405}
{"id":408,"type":"vertex","label":"range","start":{"line":75,"character":31},"end":{"line":75,"character":35}}
{"id":409,"type":"edge","label":"next","inV":379,"outV":408}
{"id":410,"type":"vertex","label":"range","start":{"line":75,"character":37},"end":{"line":75,"character":48}}
{"id":411,"type":"edge","label":"next","inV":384,"outV":410}
{"id":412,"type":"vertex","label":"range","start":{"line":77,"character":12},"end":{"line":77,"character":23}}
{"id":413,"type":"vertex","label":"resultSet"}
{"id":414,"type":"edge","label":"next","inV":413,"outV":412}
{"id":415,"type":"vertex","label":"range","start":{"line":77,"character":26},"end":{"line":77,"character":30}}
{"id":416,"type":"edge","label":"next","inV":158,"outV":415}
{"id":417,"type":"vertex","label":"range","start":{"line":77,"character":32},"end":{"line":77,"character":36}}
{"id":418,"type":"edge","label":"next","inV":367,"outV":417}
{"id":419,"type":"vertex","label":"range","start":{"line":78,"character":8},"end":{"line":78,"character":19}}
{"id":420,"type":"edge","label":"next","inV":370,"outV":419}
{"id":421,"type":"vertex","label":"range","start":{"line":79,"character":8},"end":{"line":79,"character":16}}
{"id":422,"type":"edge","label":"next","inV":373,"outV":421}
{"id":423,"type":"vertex","label":"range","start":{"line":81,"character":4},"end":{"line":81,"character":15}}
{"id":424,"type":"edge","label":"next","inV":413,"outV":423}
{"id":425,"type":"vertex","label":"range","start":{"line":81,"character":16},"end":{"line":81,"character":44}}
{"id":426,"type":"edge","label":"next","inV":397,"outV":425}
{"id":427,"type":"vertex","label":"range","start":{"line":81,"character":45},"end":{"line":81,"character":56}}
{"id":428,"type":"edge","label":"next","inV":413,"outV":427}
{"id":429,"type":"vertex","label":"range","start":{"line":81,"character":57},"end":{"line":81,"character":65}}
{"id":430,"type":"edge","label":"next","inV":373,"outV":429}
{"id":431,"type":"vertex","label":"range","start":{"line":81,"character":67},"end":{"line":81,"character":87}}
{"id":432,"type":"edge","label":"next","inV":406,"outV":431}
{"id":433,"type":"vertex","label":"range","start":{"line":82,"character":8},"end":{"line":82,"character":28}}
{"id":434,"type":"vertex","label":"resultSet"}
{"id":435,"type":"edge","label":"next","inV":434,"outV":433}
{"id":436,"type":"vertex","label":"range","start":{"line":82,"character":31},"end":{"line":82,"character":35}}
{"id":437,"type":"edge","label":"next","inV":379,"outV":436}
{"id":438,"type":"vertex","label":"range","start":{"line":82,"character":37},"end":{"line":82,"character":48}}
{"id":439,"type":"edge","label":"next","inV":413,"outV":438}
{"id":440,"type":"vertex","label":"range","start":{"line":84,"character":12},"end":{"line":84,"character":23}}
{"id":441,"type":"vertex","label":"resultSet"}
{"id":442,"type":"edge","label":"next","inV":441,"outV":440}
{"id":443,"type":"vertex","label":"range","start":{"line":84,"character":26},"end":{"line":84,"character":30}}
{"id":444,"type":"edge","label":"next","inV":158,"outV":443}
{"id":445,"type":"vertex","label":"range","start":{"line":84,"character":32},"end":{"line":84,"character":36}}
{"id":446,"type":"edge","label":"next","inV":367,"outV":445}
{"id":447,"type":"vertex","label":"range","start":{"line":85,"character":8},"end":{"line":85,"character":19}}
{"id":448,"type":"edge","label":"next","inV":370,"outV":447}
{"id":449,"type":"vertex","label":"range","start":{"line":86,"character":8},"end":{"line":86,"character":16}}
{"id":450,"type":"edge","label":"next","inV":373,"outV":449}
{"id":451,"type":"vertex","label":"range","start":{"line":88,"character":4},"end":{"line":88,"character":15}}
{"id":452,"type":"edge","label":"next","inV":441,"outV":451}
{"id":453,"type":"vertex","label":"range","start":{"line":88,"character":16},"end":{"line":88,"character":44}}
{"id":454,"type":"edge","label":"next","inV":397,"outV":453}
{"id":455,"type":"vertex","label":"range","start":{"line":88,"character":45},"end":{"line":88,"character":56}}
{"id":456,"type":"edge","label":"next","inV":441,"outV":455}
{"id":457,"type":"vertex","label":"range","start":{"line":88,"character":57},"end":{"line":88,"character":65}}
{"id":458,"type":"edge","label":"next","inV":373,"outV":457}
{"id":459,"type":"vertex","label":"range","start":{"line":88,"character":67},"end":{"line":88,"character":87}}
{"id":460,"type":"edge","label":"next","inV":434,"outV":459}
{"id":461,"type":"vertex","label":"range","start":{"line":89,"character":8},"end":{"line":89,"character":28}}
{"id":462,"type":"vertex","label":"resultSet"}
{"id":463,"type":"edge","label":"next","inV":462,"outV":461}
{"id":464,"type":"vertex","label":"range","start":{"line":89,"character":31},"end":{"line":89,"character":35}}
{"id":465,"type":"edge","label":"next","inV":379,"outV":464}
{"id":466,"type":"vertex","label":"range","start":{"line":89,"character":37},"end":{"line":89,"character":48}}
{"id":467,"type":"edge","label":"next","inV":441,"outV":466}
{"id":468,"type":"vertex","label":"range","start":{"line":91,"character":12},"end":{"line":91,"character":23}}
{"id":469,"type":"vertex","label":"resultSet"}
{"id":470,"type":"edge","label":"next","inV":469,"outV":468}
{"id":471,"type":"vertex","label":"range","start":{"line":91,"character":26},"end":{"line":91,"character":30}}
{"id":472,"type":"edge","label":"next","inV":158,"outV":471}
{"id":473,"type":"vertex","label":"range","start":{"line":91,"character":32},"end":{"line":91,"character":36}}
{"id":474,"type":"edge","label":"next","inV":367,"outV":473}
{"id":475,"type":"vertex","label":"range","start":{"line":92,"character":8},"end":{"line":92,"character":19}}
{"id":476,"type":"edge","label":"next","inV":370,"outV":475}
{"id":477,"type":"vertex","label":"range","start":{"line":93,"character":8},"end":{"line":93,"character":16}}
{"id":478,"type":"edge","label":"next","inV":373,"outV":477}
{"id":479,"type":"vertex","label":"range","start":{"line":95,"character":4},"end":{"line":95,"character":15}}
{"id":480,"type":"edge","label":"next","inV":469,"outV":479}
{"id":481,"type":"vertex","label":"range","start":{"line":95,"character":16},"end":{"line":95,"character":44}}
{"id":482,"type":"edge","label":"next","inV":397,"outV":481}
{"id":483,"type":"vertex","label":"range","start":{"line":95,"character":45},"end":{"line":95,"character":56}}
{"id":484,"type":"edge","label":"next","inV":469,"outV":483}
{"id":485,"type":"vertex","label":"range","start":{"line":95,"character":57},"end":{"line":95,"character":65}}
{"id":486,"type":"edge","label":"next","inV":373,"outV":485}
{"id":487,"type":"vertex","label":"range","start":{"line":95,"character":67},"end":{"line":95,"character":87}}
{"id":488,"type":"edge","label":"next","inV":462,"outV":487}
{"id":489,"type":"vertex","label":"range","start":{"line":97,"character":8},"end":{"line":97,"character":20}}
{"id":490,"type":"vertex","label":"resultSet"}
{"id":491,"type":"edge","label":"next","inV":490,"outV":489}
{"id":492,"type":"vertex","label":"range","start":{"line":97,"character":23},"end":{"line":97,"character":26}}
{"id":493,"type":"edge","label":"next","inV":187,"outV":492}
{"id":494,"type":"vertex","label":"range","start":{"line":97,"character":35},"end":{"line":97,"character":44}}
{"id":495,"type":"edge","label":"next","inV":190,"outV":494}
{"id":496,"type":"vertex","label":"range","start":{"line":97,"character":56},"end":{"line":97,"character":65}}
{"id":497,"type":"edge","label":"next","inV":190,"outV":496}
{"id":498,"type":"vertex","label":"range","start":{"line":97,"character":77},"end":{"line":97,"character":86}}
{"id":499,"type":"edge","label":"next","inV":190,"outV":498}
{"id":500,"type":"vertex","label":"range","start":{"line":100,"character":8},"end":{"line":100,"character":11}}
{"id":501,"type":"vertex","label":"resultSet"}
{"id":502,"type":"edge","label":"next","inV":501,"outV":500}
{"id":503,"type":"vertex","label":"range","start":{"line":100,"character":14},"end":{"line":100,"character":24}}
{"id":504,"type":"edge","label":"next","inV":148,"outV":503}
{"id":505,"type":"vertex","label":"range","start":{"line":100,"character":26},"end":{"line":100,"character":37}}
{"id":506,"type":"vertex","label":"resultSet"}
{"id":507,"type":"edge","label":"next","inV":506,"outV":505}
{"id":508,"type":"vertex","label":"range","start":{"line":101,"character":4},"end":{"line":101,"character":7}}
{"id":509,"type":"edge","label":"next","inV":501,"outV":508}
{"id":510,"type":"vertex","label":"range","start":{"line":101,"character":8},"end":{"line":101,"character":14}}
{"id":511,"type":"vertex","label":"resultSet"}
{"id":512,"type":"edge","label":"next","inV":511,"outV":510}
{"id":513,"type":"vertex","label":"range","start":{"line":101,"character":17},"end":{"line":101,"character":26}}
{"id":514,"type":"vertex","label":"resultSet"}
{"id":515,"type":"edge","label":"next","inV":514,"outV":513}
{"id":516,"type":"vertex","label":"range","start":{"line":101,"character":37},"end":{"line":101,"character":47}}
{"id":517,"type":"edge","label":"next","inV":148,"outV":516}
{"id":518,"type":"vertex","label":"range","start":{"line":101,"character":49},"end":{"line":101,"character":56}}
{"id":519,"type":"vertex","label":"resultSet"}
{"id":520,"type":"edge","label":"next","inV":519,"outV":518}
{"id":521,"type":"vertex","label":"range","start":{"line":103,"character":12},"end":{"line":103,"character":20}}
{"id":522,"type":"vertex","label":"resultSet"}
{"id":523,"type":"edge","label":"next","inV":522,"outV":521}
{"id":524,"type":"vertex","label":"range","start":{"line":103,"character":23},"end":{"line":103,"character":33}}
{"id":525,"type":"edge","label":"next","inV":148,"outV":524}
{"id":526,"type":"vertex","label":"range","start":{"line":103,"character":35},"end":{"line":103,"character":38}}
{"id":527,"type":"vertex","label":"resultSet"}
{"id":528,"type":"edge","label":"next","inV":527,"outV":526}
{"id":529,"type":"vertex","label":"range","start":{"line":103,"character":39},"end":{"line":103,"character":51}}
{"id":530,"type":"edge","label":"next","inV":490,"outV":529}
{"id":531,"type":"vertex","label":"range","start":{"line":104,"character":4},"end":{"line":104,"character":12}}
{"id":532,"type":"edge","label":"next","inV":522,"outV":531}
{"id":533,"type":"vertex","label":"range","start":{"line":104,"character":13},"end":{"line":104,"character":38}}
{"id":534,"type":"vertex","label":"resultSet"}
{"id":535,"type":"edge","label":"next","inV":534,"outV":533}
{"id":536,"type":"vertex","label":"range","start":{"line":105,"character":9},"end":{"line":105,"character":18}}
{"id":537,"type":"vertex","label":"resultSet"}
{"id":538,"type":"edge","label":"next","inV":537,"outV":536}
{"id":539,"type":"vertex","label":"range","start":{"line":105,"character":23},"end":{"line":105,"character":33}}
{"id":540,"type":"edge","label":"next","inV":148,"outV":539}
{"id":541,"type":"vertex","label":"range","start":{"line":105,"character":35},"end":{"line":105,"character":42}}
{"id":542,"type":"edge","label":"next","inV":519,"outV":541}
{"id":543,"type":"vertex","label":"range","start":{"line":106,"character":4},"end":{"line":106,"character":12}}
{"id":544,"type":"edge","label":"next","inV":522,"outV":543}
{"id":545,"type":"vertex","label":"range","start":{"line":106,"character":13},"end":{"line":106,"character":42}}
{"id":546,"type":"vertex","label":"resultSet"}
{"id":547,"type":"edge","label":"next","inV":546,"outV":545}
{"id":548,"type":"vertex","label":"range","start":{"line":107,"character":9},"end":{"line":107,"character":18}}
{"id":549,"type":"vertex","label":"resultSet"}
{"id":550,"type":"edge","label":"next","inV":549,"outV":548}
{"id":551,"type":"vertex","label":"range","start":{"line":108,"character":4},"end":{"line":108,"character":12}}
{"id":552,"type":"edge","label":"next","inV":522,"outV":551}
{"id":553,"type":"vertex","label":"range","start":{"line":108,"character":13},"end":{"line":108,"character":41}}
{"id":554,"type":"vertex","label":"resultSet"}
{"id":555,"type":"edge","label":"next","inV":554,"outV":553}
{"id":556,"type":"vertex","label":"range","start":{"line":109,"character":9},"end":{"line":109,"character":18}}
{"id":557,"type":"vertex","label":"resultSet"}
{"id":558,"type":"edge","label":"next","inV":557,"outV":556}
{"id":559,"type":"edge","label":"contains","inVs":[111,113,116,119,122,124,127,129,131,133,135,137,139,141,143,145,147,150,152,154,157,160,163,166,169,171,173,176,178,180,183,186,189,192,194,196,199,202,205,207,210,212,214,216,218,220,223,226,228,230,232,235,237,240,243,246,249,251,254,257,259,262,264,266,269,271,274,276,279,282,284,287,290,292,295,297,300,302,305,307,310,312,315,318,321,323,326,328,330,332,334,336,339,342,344,347,349,351,353,356,358,361,364,366,369,372,375,378,381,383,386,388,390,392,394,396,399,401,403,405,408,410,412,415,417,419,421,423,425,427,429,431,433,436,438,440,443,445,447,449,451,453,455,457,459,461,464,466,468,471,473,475,477,479,481,483,485,487,489,492,494,496,498,500,503,505,508,510,513,516,518,521,524,526,529,531,533,536,539,541,543,545,548,551,553,556],"outV":108}
{"id":560,"type":"vertex","label":"document","uri":"file:///private/tmp/rust-racingcar/rust-racingcar/src/model/game.rs","languageId":"rust"}
{"id":561,"type":"vertex","label":"foldingRangeResult","result":[{"startLine":5,"startCharacter":16,"endLine":9,"endCharacter":1},{"startLine":12,"startCharacter":17,"endLine":21,"endCharacter":1},{"startLine":23,"startCharacter":21,"endLine":80,"endCharacter":1},{"startLine":24,"startCharacter":98,"endLine":36,"endCharacter":5},{"startLine":25,"startCharacter":28,"endLine":29,"endCharacter":9},{"startLine":32,"startCharacter":59,"endLine":34,"endCharacter":9},{"startLine":39,"startCharacter":64,"endLine":43,"endCharacter":5},{"startLine":40,"startCharacter":42,"endLine":42,"endCharacter":9},{"startLine":46,"startCharacter":83,"endLine":51,"endCharacter":5},{"startLine":47,"startCharacter":42,"endLine":49,"endCharacter":9},{"startLine":53,"startCharacter":50,"endLine":55,"endCharacter":5},{"startLine":57,"startCharacter":43,"endLine":59,"endCharacter":5},{"startLine":61,"startCharacter":44,"endLine":63,"endCharacter":5},{"startLine":65,"startCharacter":75,"endLine":71,"endCharacter":5},{"startLine":66,"startCharacter":36,"endLine":69,"endCharacter":9},{"startLine":73,"startCharacter":32,"endLine":79,"endCharacter":5},{"startLine":75,"startCharacter":46,"endLine":77,"endCharacter":9}]}
{"id":562,"type":"edge","label":"textDocument/foldingRange","inV":561,"outV":560}
{"id":563,"type":"vertex","label":"range","start":{"line":0,"character":2},"end":{"line":0,"character":6}}
{"id":564,"type":"edge","label":"next","inV":5,"outV":563}
{"id":565,"type":"vertex","label":"range","start":{"line":1,"character":4},"end":{"line":1,"character":9}}
{"id":566,"type":"edge","label":"next","inV":26,"outV":565}
{"id":567,"type":"vertex","label":"range","start":{"line":1,"character":15},"end":{"line":1,"character":21}}
{"id":568,"type":"edge","label":"next","inV":155,"outV":567}
{"id":569,"type":"vertex","label":"range","start":{"line":2,"character":4},"end":{"line":2,"character":11}}
{"id":570,"type":"vertex","label":"resultSet"}
{"id":571,"type":"edge","label":"next","inV":570,"outV":569}
{"id":572,"type":"vertex","label":"range","start":{"line":2,"character":13},"end":{"line":2,"character":21}}
{"id":573,"type":"vertex","label":"resultSet"}
{"id":574,"type":"edge","label":"next","inV":573,"outV":572}
{"id":575,"type":"vertex","label":"range","start":{"line":4,"character":2},"end":{"line":4,"character":8}}
{"id":576,"type":"vertex","label":"resultSet"}
{"id":577,"type":"edge","label":"next","inV":576,"outV":575}
{"id":578,"type":"vertex","label":"range","start":{"line":4,"character":9},"end":{"line":4,"character":14}}
{"id":579,"type":"vertex","label":"resultSet"}
{"id":580,"type":"edge","label":"next","inV":579,"outV":578}
{"id":581,"type":"vertex","label":"range","start":{"line":5,"character":11},"end":{"line":5,"character":15}}
{"id":582,"type":"edge","label":"next","inV":94,"outV":581}
{"id":583,"type":"vertex","label":"range","start":{"line":6,"character":8},"end":{"line":6,"character":25}}
{"id":584,"type":"vertex","label":"resultSet"}
{"id":585,"type":"edge","label":"next","inV":584,"outV":583}
{"id":586,"type":"vertex","label":"range","start":{"line":6,"character":27},"end":{"line":6,"character":30}}
{"id":587,"type":"edge","label":"next","inV":45,"outV":586}
{"id":588,"type":"vertex","label":"range","start":{"line":7,"character":8},"end":{"line":7,"character":26}}
{"id":589,"type":"vertex","label":"resultSet"}
{"id":590,"type":"edge","label":"next","inV":589,"outV":588}
{"id":591,"type":"vertex","label":"range","start":{"line":7,"character":28},"end":{"line":7,"character":31}}
{"id":592,"type":"edge","label":"next","inV":45,"outV":591}
{"id":593,"type":"vertex","label":"range","start":{"line":8,"character":8},"end":{"line":8,"character":13}}
{"id":594,"type":"edge","label":"next","inV":26,"outV":593}
{"id":595,"type":"vertex","label":"range","start":{"line":8,"character":15},"end":{"line":8,"character":22}}
{"id":596,"type":"vertex","label":"resultSet"}
{"id":597,"type":"edge","label":"next","inV":596,"outV":595}
{"id":598,"type":"vertex","label":"range","start":{"line":8,"character":24},"end":{"line":8,"character":27}}
{"id":599,"type":"edge","label":"next","inV":77,"outV":598}
{"id":600,"type":"vertex","label":"range","start":{"line":8,"character":28},"end":{"line":8,"character":34}}
{"id":601,"type":"edge","label":"next","inV":155,"outV":600}
{"id":602,"type":"vertex","label":"range","start":{"line":8,"character":36},"end":{"line":8,"character":42}}
{"id":603,"type":"vertex","label":"resultSet"}
{"id":604,"type":"edge","label":"next","inV":603,"outV":602}
{"id":605,"type":"vertex","label":"range","start":{"line":11,"character":2},"end":{"line":11,"character":10}}
{"id":606,"type":"edge","label":"next","inV":573,"outV":605}
{"id":607,"type":"vertex","label":"range","start":{"line":12,"character":10},"end":{"line":12,"character":16}}
{"id":608,"type":"edge","label":"next","inV":31,"outV":607}
{"id":609,"type":"vertex","label":"range","start":{"line":13,"character":7},"end":{"line":13,"character":10}}
{"id":610,"type":"edge","label":"next","inV":527,"outV":609}
{"id":611,"type":"vertex","label":"range","start":{"line":13,"character":11},"end":{"line":13,"character":23}}
{"id":612,"type":"vertex","label":"resultSet"}
{"id":613,"type":"edge","label":"next","inV":612,"outV":611}
{"id":614,"type":"vertex","label":"range","start":{"line":13,"character":25},"end":{"line":13,"character":28}}
{"id":615,"type":"edge","label":"next","inV":77,"outV":614}
{"id":616,"type":"vertex","label":"range","start":{"line":13,"character":29},"end":{"line":13,"character":35}}
{"id":617,"type":"edge","label":"next","inV":80,"outV":616}
{"id":618,"type":"vertex","label":"range","start":{"line":13,"character":38},"end":{"line":13,"character":56}}
{"id":619,"type":"vertex","label":"resultSet"}
{"id":620,"type":"edge","label":"next","inV":619,"outV":618}
{"id":621,"type":"vertex","label":"range","start":{"line":13,"character":58},"end":{"line":13,"character":61}}
{"id":622,"type":"edge","label":"next","inV":45,"outV":621}
{"id":623,"type":"vertex","label":"range","start":{"line":13,"character":63},"end":{"line":13,"character":85}}
{"id":624,"type":"vertex","label":"resultSet"}
{"id":625,"type":"edge","label":"next","inV":624,"outV":623}
{"id":626,"type":"vertex","label":"range","start":{"line":13,"character":87},"end":{"line":13,"character":90}}
{"id":627,"type":"edge","label":"next","inV":45,"outV":626}
{"id":628,"type":"vertex","label":"range","start":{"line":13,"character":95},"end":{"line":13,"character":99}}
{"id":629,"type":"vertex","label":"resultSet"}
{"id":630,"type":"edge","label":"next","inV":629,"outV":628}
{"id":631,"type":"vertex","label":"range","start":{"line":14,"character":7},"end":{"line":14,"character":56}}
{"id":632,"type":"vertex","label":"resultSet"}
{"id":633,"type":"edge","label":"next","inV":632,"outV":631}
{"id":634,"type":"vertex","label":"range","start":{"line":14,"character":58},"end":{"line":14,"character":62}}
{"id":635,"type":"vertex","label":"resultSet"}
{"id":636,"type":"edge","label":"next","inV":635,"outV":634}
{"id":637,"type":"vertex","label":"range","start":{"line":15,"character":7},"end":{"line":15,"character":57}}
{"id":638,"type":"vertex","label":"resultSet"}
{"id":639,"type":"edge","label":"next","inV":638,"outV":637}
{"id":640,"type":"vertex","label":"range","start":{"line":15,"character":59},"end":{"line":15,"character":63}}
{"id":641,"type":"vertex","label":"resultSet"}
{"id":642,"type":"edge","label":"next","inV":641,"outV":640}
{"id":643,"type":"vertex","label":"range","start":{"line":15,"character":65},"end":{"line":15,"character":76}}
{"id":644,"type":"vertex","label":"resultSet"}
{"id":645,"type":"edge","label":"next","inV":644,"outV":643}
{"id":646,"type":"vertex","label":"range","start":{"line":15,"character":78},"end":{"line":15,"character":81}}
{"id":647,"type":"edge","label":"next","inV":45,"outV":646}
{"id":648,"type":"vertex","label":"range","start":{"line":16,"character":7},"end":{"line":16,"character":18}}
{"id":649,"type":"vertex","label":"resultSet"}
{"id":650,"type":"edge","label":"next","inV":649,"outV":648}
{"id":651,"type":"vertex","label":"range","start":{"line":16,"character":20},"end":{"line":16,"character":24}}
{"id":652,"type":"vertex","label":"resultSet"}
{"id":653,"type":"edge","label":"next","inV":652,"outV":651}
{"id":654,"type":"vertex","label":"range","start":{"line":16,"character":30},"end":{"line":16,"character":33}}
{"id":655,"type":"edge","label":"next","inV":77,"outV":654}
{"id":656,"type":"vertex","label":"range","start":{"line":16,"character":34},"end":{"line":16,"character":40}}
{"id":657,"type":"edge","label":"next","inV":155,"outV":656}
{"id":658,"type":"vertex","label":"range","start":{"line":16,"character":42},"end":{"line":16,"character":48}}
{"id":659,"type":"edge","label":"next","inV":603,"outV":658}
{"id":660,"type":"vertex","label":"range","start":{"line":17,"character":7},"end":{"line":17,"character":28}}
{"id":661,"type":"vertex","label":"resultSet"}
{"id":662,"type":"edge","label":"next","inV":661,"outV":660}
{"id":663,"type":"vertex","label":"range","start":{"line":17,"character":30},"end":{"line":17,"character":34}}
{"id":664,"type":"vertex","label":"resultSet"}
{"id":665,"type":"edge","label":"next","inV":664,"outV":663}
{"id":666,"type":"vertex","label":"range","start":{"line":17,"character":39},"end":{"line":17,"character":42}}
{"id":667,"type":"edge","label":"next","inV":45,"outV":666}
{"id":668,"type":"vertex","label":"range","start":{"line":18,"character":7},"end":{"line":18,"character":29}}
{"id":669,"type":"vertex","label":"resultSet"}
{"id":670,"type":"edge","label":"next","inV":669,"outV":668}
{"id":671,"type":"vertex","label":"range","start":{"line":18,"character":31},"end":{"line":18,"character":35}}
{"id":672,"type":"vertex","label":"resultSet"}
{"id":673,"type":"edge","label":"next","inV":672,"outV":671}
{"id":674,"type":"vertex","label":"range","start":{"line":18,"character":40},"end":{"line":18,"character":43}}
{"id":675,"type":"edge","label":"next","inV":45,"outV":674}
{"id":676,"type":"vertex","label":"range","start":{"line":19,"character":7},"end":{"line":19,"character":25}}
{"id":677,"type":"vertex","label":"resultSet"}
{"id":678,"type":"edge","label":"next","inV":677,"outV":676}
{"id":679,"type":"vertex","label":"range","start":{"line":19,"character":26},"end":{"line":19,"character":30}}
{"id":680,"type":"vertex","label":"resultSet"}
{"id":681,"type":"edge","label":"next","inV":680,"outV":679}
{"id":682,"type":"vertex","label":"range","start":{"line":19,"character":32},"end":{"line":19,"character":44}}
{"id":683,"type":"vertex","label":"resultSet"}
{"id":684,"type":"edge","label":"next","inV":683,"outV":682}
{"id":685,"type":"vertex","label":"range","start":{"line":19,"character":47},"end":{"line":19,"character":50}}
{"id":686,"type":"edge","label":"next","inV":77,"outV":685}
{"id":687,"type":"vertex","label":"range","start":{"line":19,"character":51},"end":{"line":19,"character":57}}
{"id":688,"type":"edge","label":"next","inV":80,"outV":687}
{"id":689,"type":"vertex","label":"range","start":{"line":19,"character":63},"end":{"line":19,"character":67}}
{"id":690,"type":"edge","label":"next","inV":629,"outV":689}
{"id":691,"type":"vertex","label":"range","start":{"line":20,"character":7},"end":{"line":20,"character":17}}
{"id":692,"type":"vertex","label":"resultSet"}
{"id":693,"type":"edge","label":"next","inV":692,"outV":691}
{"id":694,"type":"vertex","label":"range","start":{"line":20,"character":18},"end":{"line":20,"character":22}}
{"id":695,"type":"vertex","label":"resultSet"}
{"id":696,"type":"edge","label":"next","inV":695,"outV":694}
{"id":697,"type":"vertex","label":"range","start":{"line":20,"character":27},"end":{"line":20,"character":31}}
{"id":698,"type":"edge","label":"next","inV":629,"outV":697}
{"id":699,"type":"vertex","label":"range","start":{"line":23,"character":5},"end":{"line":23,"character":11}}
{"id":700,"type":"edge","label":"next","inV":31,"outV":699}
{"id":701,"type":"vertex","label":"range","start":{"line":23,"character":16},"end":{"line":23,"character":20}}
{"id":702,"type":"edge","label":"next","inV":94,"outV":701}
{"id":703,"type":"vertex","label":"range","start":{"line":24,"character":7},"end":{"line":24,"character":10}}
{"id":704,"type":"edge","label":"next","inV":99,"outV":703}
{"id":705,"type":"vertex","label":"range","start":{"line":24,"character":11},"end":{"line":24,"character":26}}
{"id":706,"type":"vertex","label":"resultSet"}
{"id":707,"type":"edge","label":"next","inV":706,"outV":705}
{"id":708,"type":"vertex","label":"range","start":{"line":24,"character":28},"end":{"line":24,"character":31}}
{"id":709,"type":"edge","label":"next","inV":77,"outV":708}
{"id":710,"type":"vertex","label":"range","start":{"line":24,"character":32},"end":{"line":24,"character":38}}
{"id":711,"type":"edge","label":"next","inV":80,"outV":710}
{"id":712,"type":"vertex","label":"range","start":{"line":24,"character":41},"end":{"line":24,"character":58}}
{"id":713,"type":"vertex","label":"resultSet"}
{"id":714,"type":"edge","label":"next","inV":713,"outV":712}
{"id":715,"type":"vertex","label":"range","start":{"line":24,"character":60},"end":{"line":24,"character":63}}
{"id":716,"type":"edge","label":"next","inV":45,"outV":715}
{"id":717,"type":"vertex","label":"range","start":{"line":24,"character":65},"end":{"line":24,"character":83}}
{"id":718,"type":"vertex","label":"resultSet"}
{"id":719,"type":"edge","label":"next","inV":718,"outV":717}
{"id":720,"type":"vertex","label":"range","start":{"line":24,"character":85},"end":{"line":24,"character":88}}
{"id":721,"type":"edge","label":"next","inV":45,"outV":720}
{"id":722,"type":"vertex","label":"range","start":{"line":24,"character":93},"end":{"line":24,"character":97}}
{"id":723,"type":"vertex","label":"resultSet"}
{"id":724,"type":"edge","label":"next","inV":723,"outV":722}
{"id":725,"type":"vertex","label":"range","start":{"line":25,"character":12},"end":{"line":25,"character":20}}
{"id":726,"type":"vertex","label":"resultSet"}
{"id":727,"type":"edge","label":"next","inV":726,"outV":725}
{"id":728,"type":"vertex","label":"range","start":{"line":25,"character":23},"end":{"line":25,"character":27}}
{"id":729,"type":"edge","label":"next","inV":723,"outV":728}
{"id":730,"type":"vertex","label":"range","start":{"line":28,"character":12},"end":{"line":28,"character":19}}
{"id":731,"type":"edge","label":"next","inV":596,"outV":730}
{"id":732,"type":"vertex","label":"range","start":{"line":28,"character":21},"end":{"line":28,"character":24}}
{"id":733,"type":"edge","label":"next","inV":77,"outV":732}
{"id":734,"type":"vertex","label":"range","start":{"line":28,"character":26},"end":{"line":28,"character":39}}
{"id":735,"type":"edge","label":"next","inV":293,"outV":734}
{"id":736,"type":"vertex","label":"range","start":{"line":28,"character":40},"end":{"line":28,"character":57}}
{"id":737,"type":"edge","label":"next","inV":713,"outV":736}
{"id":738,"type":"vertex","label":"range","start":{"line":28,"character":61},"end":{"line":28,"character":66}}
{"id":739,"type":"edge","label":"next","inV":337,"outV":738}
{"id":740,"type":"vertex","label":"range","start":{"line":30,"character":12},"end":{"line":30,"character":20}}
{"id":741,"type":"vertex","label":"resultSet"}
{"id":742,"type":"edge","label":"next","inV":741,"outV":740}
{"id":743,"type":"vertex","label":"range","start":{"line":30,"character":23},"end":{"line":30,"character":27}}
{"id":744,"type":"edge","label":"next","inV":723,"outV":743}
{"id":745,"type":"vertex","label":"range","start":{"line":30,"character":29},"end":{"line":30,"character":47}}
{"id":746,"type":"vertex","label":"resultSet"}
{"id":747,"type":"edge","label":"next","inV":746,"outV":745}
{"id":748,"type":"vertex","label":"range","start":{"line":30,"character":48},"end":{"line":30,"character":56}}
{"id":749,"type":"edge","label":"next","inV":726,"outV":748}
{"id":750,"type":"vertex","label":"range","start":{"line":30,"character":59},"end":{"line":30,"character":74}}
{"id":751,"type":"edge","label":"next","inV":706,"outV":750}
{"id":752,"type":"vertex","label":"range","start":{"line":31,"character":12},"end":{"line":31,"character":20}}
{"id":753,"type":"vertex","label":"resultSet"}
{"id":754,"type":"edge","label":"next","inV":753,"outV":752}
{"id":755,"type":"vertex","label":"range","start":{"line":31,"character":23},"end":{"line":31,"character":27}}
{"id":756,"type":"edge","label":"next","inV":723,"outV":755}
{"id":757,"type":"vertex","label":"range","start":{"line":31,"character":29},"end":{"line":31,"character":39}}
{"id":758,"type":"vertex","label":"resultSet"}
{"id":759,"type":"edge","label":"next","inV":758,"outV":757}
{"id":760,"type":"vertex","label":"range","start":{"line":31,"character":40},"end":{"line":31,"character":48}}
{"id":761,"type":"edge","label":"next","inV":741,"outV":760}
{"id":762,"type":"vertex","label":"range","start":{"line":32,"character":12},"end":{"line":32,"character":23}}
{"id":763,"type":"vertex","label":"resultSet"}
{"id":764,"type":"edge","label":"next","inV":763,"outV":762}
{"id":765,"type":"vertex","label":"range","start":{"line":32,"character":31},"end":{"line":32,"character":39}}
{"id":766,"type":"edge","label":"next","inV":753,"outV":765}
{"id":767,"type":"vertex","label":"range","start":{"line":32,"character":40},"end":{"line":32,"character":58}}
{"id":768,"type":"edge","label":"next","inV":589,"outV":767}
{"id":769,"type":"vertex","label":"range","start":{"line":33,"character":12},"end":{"line":33,"character":16}}
{"id":770,"type":"edge","label":"next","inV":723,"outV":769}
{"id":771,"type":"vertex","label":"range","start":{"line":33,"character":18},"end":{"line":33,"character":68}}
{"id":772,"type":"vertex","label":"resultSet"}
{"id":773,"type":"edge","label":"next","inV":772,"outV":771}
{"id":774,"type":"vertex","label":"range","start":{"line":33,"character":70},"end":{"line":33,"character":78}}
{"id":775,"type":"edge","label":"next","inV":753,"outV":774}
{"id":776,"type":"vertex","label":"range","start":{"line":33,"character":80},"end":{"line":33,"character":91}}
{"id":777,"type":"edge","label":"next","inV":763,"outV":776}
{"id":778,"type":"vertex","label":"range","start":{"line":35,"character":8},"end":{"line":35,"character":16}}
{"id":779,"type":"edge","label":"next","inV":753,"outV":778}
{"id":780,"type":"vertex","label":"range","start":{"line":39,"character":7},"end":{"line":39,"character":56}}
{"id":781,"type":"vertex","label":"resultSet"}
{"id":782,"type":"edge","label":"next","inV":781,"outV":780}
{"id":783,"type":"vertex","label":"range","start":{"line":39,"character":58},"end":{"line":39,"character":62}}
{"id":784,"type":"vertex","label":"resultSet"}
{"id":785,"type":"edge","label":"next","inV":784,"outV":783}
{"id":786,"type":"vertex","label":"range","start":{"line":40,"character":12},"end":{"line":40,"character":18}}
{"id":787,"type":"vertex","label":"resultSet"}
{"id":788,"type":"edge","label":"next","inV":787,"outV":786}
{"id":789,"type":"vertex","label":"range","start":{"line":40,"character":22},"end":{"line":40,"character":26}}
{"id":790,"type":"edge","label":"next","inV":784,"outV":789}
{"id":791,"type":"vertex","label":"range","start":{"line":40,"character":27},"end":{"line":40,"character":34}}
{"id":792,"type":"edge","label":"next","inV":596,"outV":791}
{"id":793,"type":"vertex","label":"range","start":{"line":40,"character":35},"end":{"line":40,"character":39}}
{"id":794,"type":"vertex","label":"resultSet"}
{"id":795,"type":"edge","label":"next","inV":794,"outV":793}
{"id":796,"type":"vertex","label":"range","start":{"line":41,"character":12},"end":{"line":41,"character":18}}
{"id":797,"type":"edge","label":"next","inV":787,"outV":796}
{"id":798,"type":"vertex","label":"range","start":{"line":41,"character":19},"end":{"line":41,"character":68}}
{"id":799,"type":"vertex","label":"resultSet"}
{"id":800,"type":"edge","label":"next","inV":799,"outV":798}
{"id":801,"type":"vertex","label":"range","start":{"line":46,"character":7},"end":{"line":46,"character":57}}
{"id":802,"type":"edge","label":"next","inV":772,"outV":801}
{"id":803,"type":"vertex","label":"range","start":{"line":46,"character":59},"end":{"line":46,"character":63}}
{"id":804,"type":"vertex","label":"resultSet"}
{"id":805,"type":"edge","label":"next","inV":804,"outV":803}
{"id":806,"type":"vertex","label":"range","start":{"line":46,"character":65},"end":{"line":46,"character":76}}
{"id":807,"type":"vertex","label":"resultSet"}
{"id":808,"type":"edge","label":"next","inV":807,"outV":806}
{"id":809,"type":"vertex","label":"range","start":{"line":46,"character":78},"end":{"line":46,"character":81}}
{"id":810,"type":"edge","label":"next","inV":45,"outV":809}
{"id":811,"type":"vertex","label":"range","start":{"line":47,"character":12},"end":{"line":47,"character":18}}
{"id":812,"type":"vertex","label":"resultSet"}
{"id":813,"type":"edge","label":"next","inV":812,"outV":811}
{"id":814,"type":"vertex","label":"range","start":{"line":47,"character":22},"end":{"line":47,"character":26}}
{"id":815,"type":"edge","label":"next","inV":804,"outV":814}
{"id":816,"type":"vertex","label":"range","start":{"line":47,"character":27},"end":{"line":47,"character":34}}
{"id":817,"type":"edge","label":"next","inV":596,"outV":816}
{"id":818,"type":"vertex","label":"range","start":{"line":47,"character":35},"end":{"line":47,"character":39}}
{"id":819,"type":"edge","label":"next","inV":794,"outV":818}
{"id":820,"type":"vertex","label":"range","start":{"line":48,"character":12},"end":{"line":48,"character":18}}
{"id":821,"type":"edge","label":"next","inV":812,"outV":820}
{"id":822,"type":"vertex","label":"range","start":{"line":48,"character":19},"end":{"line":48,"character":69}}
{"id":823,"type":"vertex","label":"resultSet"}
{"id":824,"type":"edge","label":"next","inV":823,"outV":822}
{"id":825,"type":"vertex","label":"range","start":{"line":48,"character":70},"end":{"line":48,"character":81}}
{"id":826,"type":"edge","label":"next","inV":807,"outV":825}
{"id":827,"type":"vertex","label":"range","start":{"line":50,"character":8},"end":{"line":50,"character":15}}
{"id":828,"type":"edge","label":"next","inV":37,"outV":827}
{"id":829,"type":"vertex","label":"range","start":{"line":53,"character":7},"end":{"line":53,"character":18}}
{"id":830,"type":"edge","label":"next","inV":285,"outV":829}
{"id":831,"type":"vertex","label":"range","start":{"line":53,"character":20},"end":{"line":53,"character":24}}
{"id":832,"type":"vertex","label":"resultSet"}
{"id":833,"type":"edge","label":"next","inV":832,"outV":831}
{"id":834,"type":"vertex","label":"range","start":{"line":53,"character":30},"end":{"line":53,"character":33}}
{"id":835,"type":"edge","label":"next","inV":77,"outV":834}
{"id":836,"type":"vertex","label":"range","start":{"line":53,"character":34},"end":{"line":53,"character":40}}
{"id":837,"type":"edge","label":"next","inV":155,"outV":836}
{"id":838,"type":"vertex","label":"range","start":{"line":53,"character":42},"end":{"line":53,"character":48}}
{"id":839,"type":"edge","label":"next","inV":603,"outV":838}
{"id":840,"type":"vertex","label":"range","start":{"line":54,"character":9},"end":{"line":54,"character":13}}
{"id":841,"type":"edge","label":"next","inV":832,"outV":840}
{"id":842,"type":"vertex","label":"range","start":{"line":54,"character":14},"end":{"line":54,"character":21}}
{"id":843,"type":"edge","label":"next","inV":596,"outV":842}
{"id":844,"type":"vertex","label":"range","start":{"line":57,"character":7},"end":{"line":57,"character":28}}
{"id":845,"type":"edge","label":"next","inV":260,"outV":844}
{"id":846,"type":"vertex","label":"range","start":{"line":57,"character":30},"end":{"line":57,"character":34}}
{"id":847,"type":"vertex","label":"resultSet"}
{"id":848,"type":"edge","label":"next","inV":847,"outV":846}
{"id":849,"type":"vertex","label":"range","start":{"line":57,"character":39},"end":{"line":57,"character":42}}
{"id":850,"type":"edge","label":"next","inV":45,"outV":849}
{"id":851,"type":"vertex","label":"range","start":{"line":58,"character":8},"end":{"line":58,"character":12}}
{"id":852,"type":"edge","label":"next","inV":847,"outV":851}
{"id":853,"type":"vertex","label":"range","start":{"line":58,"character":13},"end":{"line":58,"character":30}}
{"id":854,"type":"edge","label":"next","inV":584,"outV":853}
{"id":855,"type":"vertex","label":"range","start":{"line":61,"character":7},"end":{"line":61,"character":29}}
{"id":856,"type":"edge","label":"next","inV":267,"outV":855}
{"id":857,"type":"vertex","label":"range","start":{"line":61,"character":31},"end":{"line":61,"character":35}}
{"id":858,"type":"vertex","label":"resultSet"}
{"id":859,"type":"edge","label":"next","inV":858,"outV":857}
{"id":860,"type":"vertex","label":"range","start":{"line":61,"character":40},"end":{"line":61,"character":43}}
{"id":861,"type":"edge","label":"next","inV":45,"outV":860}
{"id":862,"type":"vertex","label":"range","start":{"line":62,"character":8},"end":{"line":62,"character":12}}
{"id":863,"type":"edge","label":"next","inV":858,"outV":862}
{"id":864,"type":"vertex","label":"range","start":{"line":62,"character":13},"end":{"line":62,"character":31}}
{"id":865,"type":"edge","label":"next","inV":589,"outV":864}
{"id":866,"type":"vertex","label":"range","start":{"line":65,"character":7},"end":{"line":65,"character":25}}
{"id":867,"type":"edge","label":"next","inV":746,"outV":866}
{"id":868,"type":"vertex","label":"range","start":{"line":65,"character":30},"end":{"line":65,"character":34}}
{"id":869,"type":"vertex","label":"resultSet"}
{"id":870,"type":"edge","label":"next","inV":869,"outV":868}
{"id":871,"type":"vertex","label":"range","start":{"line":65,"character":36},"end":{"line":65,"character":51}}
{"id":872,"type":"vertex","label":"resultSet"}
{"id":873,"type":"edge","label":"next","inV":872,"outV":871}
{"id":874,"type":"vertex","label":"range","start":{"line":65,"character":54},"end":{"line":65,"character":57}}
{"id":875,"type":"edge","label":"next","inV":77,"outV":874}
{"id":876,"type":"vertex","label":"range","start":{"line":65,"character":58},"end":{"line":65,"character":64}}
{"id":877,"type":"edge","label":"next","inV":80,"outV":876}
{"id":878,"type":"vertex","label":"range","start":{"line":65,"character":70},"end":{"line":65,"character":74}}
{"id":879,"type":"edge","label":"next","inV":723,"outV":878}
{"id":880,"type":"vertex","label":"range","start":{"line":66,"character":12},"end":{"line":66,"character":16}}
{"id":881,"type":"vertex","label":"resultSet"}
{"id":882,"type":"edge","label":"next","inV":881,"outV":880}
{"id":883,"type":"vertex","label":"range","start":{"line":66,"character":20},"end":{"line":66,"character":35}}
{"id":884,"type":"edge","label":"next","inV":872,"outV":883}
{"id":885,"type":"vertex","label":"range","start":{"line":67,"character":16},"end":{"line":67,"character":26}}
{"id":886,"type":"vertex","label":"resultSet"}
{"id":887,"type":"edge","label":"next","inV":886,"outV":885}
{"id":888,"type":"vertex","label":"range","start":{"line":67,"character":29},"end":{"line":67,"character":35}}
{"id":889,"type":"edge","label":"next","inV":155,"outV":888}
{"id":890,"type":"vertex","label":"range","start":{"line":67,"character":37},"end":{"line":67,"character":43}}
{"id":891,"type":"edge","label":"next","inV":603,"outV":890}
{"id":892,"type":"vertex","label":"range","start":{"line":67,"character":45},"end":{"line":67,"character":48}}
{"id":893,"type":"vertex","label":"resultSet"}
{"id":894,"type":"edge","label":"next","inV":893,"outV":892}
{"id":895,"type":"vertex","label":"range","start":{"line":67,"character":49},"end":{"line":67,"character":53}}
{"id":896,"type":"edge","label":"next","inV":881,"outV":895}
{"id":897,"type":"vertex","label":"range","start":{"line":67,"character":54},"end":{"line":67,"character":63}}
{"id":898,"type":"vertex","label":"resultSet"}
{"id":899,"type":"edge","label":"next","inV":898,"outV":897}
{"id":900,"type":"vertex","label":"range","start":{"line":67,"character":67},"end":{"line":67,"character":71}}
{"id":901,"type":"edge","label":"next","inV":869,"outV":900}
{"id":902,"type":"vertex","label":"range","start":{"line":67,"character":72},"end":{"line":67,"character":90}}
{"id":903,"type":"edge","label":"next","inV":589,"outV":902}
{"id":904,"type":"vertex","label":"range","start":{"line":68,"character":12},"end":{"line":68,"character":16}}
{"id":905,"type":"edge","label":"next","inV":869,"outV":904}
{"id":906,"type":"vertex","label":"range","start":{"line":68,"character":17},"end":{"line":68,"character":24}}
{"id":907,"type":"edge","label":"next","inV":596,"outV":906}
{"id":908,"type":"vertex","label":"range","start":{"line":68,"character":25},"end":{"line":68,"character":29}}
{"id":909,"type":"vertex","label":"resultSet"}
{"id":910,"type":"edge","label":"next","inV":909,"outV":908}
{"id":911,"type":"vertex","label":"range","start":{"line":68,"character":30},"end":{"line":68,"character":40}}
{"id":912,"type":"edge","label":"next","inV":886,"outV":911}
{"id":913,"type":"vertex","label":"range","start":{"line":70,"character":8},"end":{"line":70,"character":12}}
{"id":914,"type":"edge","label":"next","inV":869,"outV":913}
{"id":915,"type":"vertex","label":"range","start":{"line":73,"character":7},"end":{"line":73,"character":17}}
{"id":916,"type":"edge","label":"next","inV":758,"outV":915}
{"id":917,"type":"vertex","label":"range","start":{"line":73,"character":18},"end":{"line":73,"character":22}}
{"id":918,"type":"vertex","label":"resultSet"}
{"id":919,"type":"edge","label":"next","inV":918,"outV":917}
{"id":920,"type":"vertex","label":"range","start":{"line":73,"character":27},"end":{"line":73,"character":31}}
{"id":921,"type":"edge","label":"next","inV":723,"outV":920}
{"id":922,"type":"vertex","label":"range","start":{"line":74,"character":16},"end":{"line":74,"character":20}}
{"id":923,"type":"vertex","label":"resultSet"}
{"id":924,"type":"edge","label":"next","inV":923,"outV":922}
{"id":925,"type":"vertex","label":"range","start":{"line":74,"character":23},"end":{"line":74,"character":27}}
{"id":926,"type":"edge","label":"next","inV":918,"outV":925}
{"id":927,"type":"vertex","label":"range","start":{"line":75,"character":12},"end":{"line":75,"character":18}}
{"id":928,"type":"vertex","label":"resultSet"}
{"id":929,"type":"edge","label":"next","inV":928,"outV":927}
{"id":930,"type":"vertex","label":"range","start":{"line":75,"character":22},"end":{"line":75,"character":26}}
{"id":931,"type":"edge","label":"next","inV":923,"outV":930}
{"id":932,"type":"vertex","label":"range","start":{"line":75,"character":27},"end":{"line":75,"character":34}}
{"id":933,"type":"edge","label":"next","inV":596,"outV":932}
{"id":934,"type":"vertex","label":"range","start":{"line":75,"character":35},"end":{"line":75,"character":43}}
{"id":935,"type":"vertex","label":"resultSet"}
{"id":936,"type":"edge","label":"next","inV":935,"outV":934}
{"id":937,"type":"vertex","label":"range","start":{"line":76,"character":12},"end":{"line":76,"character":18}}
{"id":938,"type":"edge","label":"next","inV":928,"outV":937}
{"id":939,"type":"vertex","label":"range","start":{"line":76,"character":19},"end":{"line":76,"character":29}}
{"id":940,"type":"vertex","label":"resultSet"}
{"id":941,"type":"edge","label":"next","inV":940,"outV":939}
{"id":942,"type":"vertex","label":"range","start":{"line":78,"character":8},"end":{"line":78,"character":12}}
{"id":943,"type":"edge","label":"next","inV":923,"outV":942}
{"id":944,"type":"edge","label":"contains","inVs":[563,565,567,569,572,575,578,581,583,586,588,591,593,595,598,600,602,605,607,609,611,614,616,618,621,623,626,628,631,634,637,640,643,646,648,651,654,656,658,660,663,666,668,671,674,676,679,682,685,687,689,691,694,697,699,701,703,705,708,710,712,715,717,720,722,725,728,730,732,734,736,738,740,743,745,748,750,752,755,757,760,762,765,767,769,771,774,776,778,780,783,786,789,791,793,796,798,801,803,806,809,811,814,816,818,820,822,825,827,829,831,834,836,838,840,842,844,846,849,851,853,855,857,860,862,864,866,868,871,874,876,878,880,883,885,888,890,892,895,897,900,902,904,906,908,911,913,915,917,920,922,925,927,930,932,934,937,939,942],"outV":560}
{"id":945,"type":"vertex","label":"document","uri":"file:///private/tmp/rust-racingcar/rust-racingcar/src/model/player.rs","languageId":"rust"}
{"id":946,"type":"vertex","label":"foldingRangeResult","result":[{"startLine":5,"startCharacter":18,"endLine":8,"endCharacter":1},{"startLine":10,"startCharacter":12,"endLine":51,"endCharacter":1},{"startLine":11,"startCharacter":62,"endLine":16,"endCharacter":5},{"startLine":12,"startCharacter":13,"endLine":15,"endCharacter":9},{"startLine":18,"startCharacter":33,"endLine":26,"endCharacter":5},{"startLine":19,"startCharacter":52,"endLine":25,"endCharacter":9},{"startLine":28,"startCharacter":48,"endLine":30,"endCharacter":5},{"startLine":32,"startCharacter":68,"endLine":37,"endCharacter":5},{"startLine":34,"startCharacter":38,"endLine":36,"endCharacter":9},{"startLine":39,"startCharacter":87,"endLine":46,"endCharacter":5},{"startLine":40,"startCharacter":38,"endLine":45,"endCharacter":9},{"startLine":41,"startCharacter":53,"endLine":44,"endCharacter":13},{"startLine":48,"startCharacter":44,"endLine":50,"endCharacter":5}]}
{"id":947,"type":"edge","label":"textDocument/foldingRange","inV":946,"outV":945}
{"id":948,"type":"vertex","label":"range","start":{"line":0,"character":2},"end":{"line":0,"character":6}}
{"id":949,"type":"edge","label":"next","inV":5,"outV":948}
{"id":950,"type":"vertex","label":"range","start":{"line":1,"character":5},"end":{"line":1,"character":10}}
{"id":951,"type":"edge","label":"next","inV":26,"outV":950}
{"id":952,"type":"vertex","label":"range","start":{"line":1,"character":16},"end":{"line":1,"character":20}}
{"id":953,"type":"edge","label":"next","inV":158,"outV":952}
{"id":954,"type":"vertex","label":"range","start":{"line":3,"character":2},"end":{"line":3,"character":8}}
{"id":955,"type":"edge","label":"next","inV":576,"outV":954}
{"id":956,"type":"vertex","label":"range","start":{"line":3,"character":9},"end":{"line":3,"character":14}}
{"id":957,"type":"edge","label":"next","inV":579,"outV":956}
{"id":958,"type":"vertex","label":"range","start":{"line":4,"character":2},"end":{"line":4,"character":8}}
{"id":959,"type":"edge","label":"next","inV":576,"outV":958}
{"id":960,"type":"vertex","label":"range","start":{"line":4,"character":9},"end":{"line":4,"character":14}}
{"id":961,"type":"vertex","label":"resultSet"}
{"id":962,"type":"edge","label":"next","inV":961,"outV":960}
{"id":963,"type":"vertex","label":"range","start":{"line":5,"character":11},"end":{"line":5,"character":17}}
{"id":964,"type":"edge","label":"next","inV":603,"outV":963}
{"id":965,"type":"vertex","label":"range","start":{"line":6,"character":8},"end":{"line":6,"character":13}}
{"id":966,"type":"edge","label":"next","inV":26,"outV":965}
{"id":967,"type":"vertex","label":"range","start":{"line":6,"character":15},"end":{"line":6,"character":19}}
{"id":968,"type":"vertex","label":"resultSet"}
{"id":969,"type":"edge","label":"next","inV":968,"outV":967}
{"id":970,"type":"vertex","label":"range","start":{"line":6,"character":21},"end":{"line":6,"character":27}}
{"id":971,"type":"edge","label":"next","inV":80,"outV":970}
{"id":972,"type":"vertex","label":"range","start":{"line":7,"character":8},"end":{"line":7,"character":13}}
{"id":973,"type":"edge","label":"next","inV":26,"outV":972}
{"id":974,"type":"vertex","label":"range","start":{"line":7,"character":15},"end":{"line":7,"character":20}}
{"id":975,"type":"vertex","label":"resultSet"}
{"id":976,"type":"edge","label":"next","inV":975,"outV":974}
{"id":977,"type":"vertex","label":"range","start":{"line":7,"character":22},"end":{"line":7,"character":25}}
{"id":978,"type":"edge","label":"next","inV":77,"outV":977}
{"id":979,"type":"vertex","label":"range","start":{"line":7,"character":26},"end":{"line":7,"character":30}}
{"id":980,"type":"edge","label":"next","inV":158,"outV":979}
{"id":981,"type":"vertex","label":"range","start":{"line":7,"character":32},"end":{"line":7,"character":36}}
{"id":982,"type":"edge","label":"next","inV":367,"outV":981}
{"id":983,"type":"vertex","label":"range","start":{"line":10,"character":5},"end":{"line":10,"character":11}}
{"id":984,"type":"edge","label":"next","inV":603,"outV":983}
{"id":985,"type":"vertex","label":"range","start":{"line":11,"character":11},"end":{"line":11,"character":14}}
{"id":986,"type":"edge","label":"next","inV":893,"outV":985}
{"id":987,"type":"vertex","label":"range","start":{"line":11,"character":15},"end":{"line":11,"character":19}}
{"id":988,"type":"vertex","label":"resultSet"}
{"id":989,"type":"edge","label":"next","inV":988,"outV":987}
{"id":990,"type":"vertex","label":"range","start":{"line":11,"character":21},"end":{"line":11,"character":27}}
{"id":991,"type":"edge","label":"next","inV":80,"outV":990}
{"id":992,"type":"vertex","label":"range","start":{"line":11,"character":29},"end":{"line":11,"character":47}}
{"id":993,"type":"vertex","label":"resultSet"}
{"id":994,"type":"edge","label":"next","inV":993,"outV":992}
{"id":995,"type":"vertex","label":"range","start":{"line":11,"character":49},"end":{"line":11,"character":52}}
{"id":996,"type":"edge","label":"next","inV":45,"outV":995}
{"id":997,"type":"vertex","label":"range","start":{"line":11,"character":57},"end":{"line":11,"character":61}}
{"id":998,"type":"vertex","label":"resultSet"}
{"id":999,"type":"edge","label":"next","inV":998,"outV":997}
{"id":1000,"type":"vertex","label":"range","start":{"line":12,"character":8},"end":{"line":12,"character":12}}
{"id":1001,"type":"edge","label":"next","inV":998,"outV":1000}
{"id":1002,"type":"vertex","label":"range","start":{"line":14,"character":12},"end":{"line":14,"character":17}}
{"id":1003,"type":"edge","label":"next","inV":975,"outV":1002}
{"id":1004,"type":"vertex","label":"range","start":{"line":14,"character":19},"end":{"line":14,"character":22}}
{"id":1005,"type":"edge","label":"next","inV":77,"outV":1004}
{"id":1006,"type":"vertex","label":"range","start":{"line":14,"character":24},"end":{"line":14,"character":37}}
{"id":1007,"type":"edge","label":"next","inV":293,"outV":1006}
{"id":1008,"type":"vertex","label":"range","start":{"line":14,"character":38},"end":{"line":14,"character":56}}
{"id":1009,"type":"edge","label":"next","inV":993,"outV":1008}
{"id":1010,"type":"vertex","label":"range","start":{"line":14,"character":60},"end":{"line":14,"character":65}}
{"id":1011,"type":"edge","label":"next","inV":337,"outV":1010}
{"id":1012,"type":"vertex","label":"range","start":{"line":18,"character":11},"end":{"line":18,"character":21}}
{"id":1013,"type":"edge","label":"next","inV":940,"outV":1012}
{"id":1014,"type":"vertex","label":"range","start":{"line":18,"character":27},"end":{"line":18,"character":31}}
{"id":1015,"type":"vertex","label":"resultSet"}
{"id":1016,"type":"edge","label":"next","inV":1015,"outV":1014}
{"id":1017,"type":"vertex","label":"range","start":{"line":19,"character":12},"end":{"line":19,"character":23}}
{"id":1018,"type":"vertex","label":"resultSet"}
{"id":1019,"type":"edge","label":"next","inV":1018,"outV":1017}
{"id":1020,"type":"vertex","label":"range","start":{"line":19,"character":30},"end":{"line":19,"character":34}}
{"id":1021,"type":"edge","label":"next","inV":1015,"outV":1020}
{"id":1022,"type":"vertex","label":"range","start":{"line":19,"character":35},"end":{"line":19,"character":40}}
{"id":1023,"type":"edge","label":"next","inV":975,"outV":1022}
{"id":1024,"type":"vertex","label":"range","start":{"line":19,"character":41},"end":{"line":19,"character":49}}
{"id":1025,"type":"vertex","label":"resultSet"}
{"id":1026,"type":"edge","label":"next","inV":1025,"outV":1024}
{"id":1027,"type":"vertex","label":"range","start":{"line":21,"character":16},"end":{"line":21,"character":25}}
{"id":1028,"type":"vertex","label":"resultSet"}
{"id":1029,"type":"edge","label":"next","inV":1028,"outV":1027}
{"id":1030,"type":"vertex","label":"range","start":{"line":21,"character":28},"end":{"line":21,"character":32}}
{"id":1031,"type":"edge","label":"next","inV":1015,"outV":1030}
{"id":1032,"type":"vertex","label":"range","start":{"line":21,"character":33},"end":{"line":21,"character":38}}
{"id":1033,"type":"edge","label":"next","inV":975,"outV":1032}
{"id":1034,"type":"vertex","label":"range","start":{"line":21,"character":39},"end":{"line":21,"character":43}}
{"id":1035,"type":"vertex","label":"resultSet"}
{"id":1036,"type":"edge","label":"next","inV":1035,"outV":1034}
{"id":1037,"type":"vertex","label":"range","start":{"line":22,"character":16},"end":{"line":22,"character":31}}
{"id":1038,"type":"vertex","label":"resultSet"}
{"id":1039,"type":"edge","label":"next","inV":1038,"outV":1037}
{"id":1040,"type":"vertex","label":"range","start":{"line":22,"character":34},"end":{"line":22,"character":45}}
{"id":1041,"type":"edge","label":"next","inV":1018,"outV":1040}
{"id":1042,"type":"vertex","label":"range","start":{"line":23,"character":16},"end":{"line":23,"character":20}}
{"id":1043,"type":"vertex","label":"resultSet"}
{"id":1044,"type":"edge","label":"next","inV":1043,"outV":1042}
{"id":1045,"type":"vertex","label":"range","start":{"line":23,"character":23},"end":{"line":23,"character":27}}
{"id":1046,"type":"edge","label":"next","inV":158,"outV":1045}
{"id":1047,"type":"vertex","label":"range","start":{"line":23,"character":29},"end":{"line":23,"character":33}}
{"id":1048,"type":"edge","label":"next","inV":367,"outV":1047}
{"id":1049,"type":"vertex","label":"range","start":{"line":23,"character":35},"end":{"line":23,"character":38}}
{"id":1050,"type":"vertex","label":"resultSet"}
{"id":1051,"type":"edge","label":"next","inV":1050,"outV":1049}
{"id":1052,"type":"vertex","label":"range","start":{"line":23,"character":39},"end":{"line":23,"character":54}}
{"id":1053,"type":"edge","label":"next","inV":1038,"outV":1052}
{"id":1054,"type":"vertex","label":"range","start":{"line":23,"character":58},"end":{"line":23,"character":61}}
{"id":1055,"type":"edge","label":"next","inV":45,"outV":1054}
{"id":1056,"type":"vertex","label":"range","start":{"line":23,"character":63},"end":{"line":23,"character":72}}
{"id":1057,"type":"edge","label":"next","inV":1028,"outV":1056}
{"id":1058,"type":"vertex","label":"range","start":{"line":24,"character":12},"end":{"line":24,"character":16}}
{"id":1059,"type":"edge","label":"next","inV":1015,"outV":1058}
{"id":1060,"type":"vertex","label":"range","start":{"line":24,"character":17},"end":{"line":24,"character":22}}
{"id":1061,"type":"edge","label":"next","inV":975,"outV":1060}
{"id":1062,"type":"vertex","label":"range","start":{"line":24,"character":23},"end":{"line":24,"character":27}}
{"id":1063,"type":"edge","label":"next","inV":909,"outV":1062}
{"id":1064,"type":"vertex","label":"range","start":{"line":24,"character":28},"end":{"line":24,"character":32}}
{"id":1065,"type":"edge","label":"next","inV":1043,"outV":1064}
{"id":1066,"type":"vertex","label":"range","start":{"line":28,"character":11},"end":{"line":28,"character":20}}
{"id":1067,"type":"edge","label":"next","inV":324,"outV":1066}
{"id":1068,"type":"vertex","label":"range","start":{"line":28,"character":22},"end":{"line":28,"character":26}}
{"id":1069,"type":"vertex","label":"resultSet"}
{"id":1070,"type":"edge","label":"next","inV":1069,"outV":1068}
{"id":1071,"type":"vertex","label":"range","start":{"line":28,"character":32},"end":{"line":28,"character":35}}
{"id":1072,"type":"edge","label":"next","inV":77,"outV":1071}
{"id":1073,"type":"vertex","label":"range","start":{"line":28,"character":36},"end":{"line":28,"character":40}}
{"id":1074,"type":"edge","label":"next","inV":158,"outV":1073}
{"id":1075,"type":"vertex","label":"range","start":{"line":28,"character":42},"end":{"line":28,"character":46}}
{"id":1076,"type":"edge","label":"next","inV":367,"outV":1075}
{"id":1077,"type":"vertex","label":"range","start":{"line":29,"character":9},"end":{"line":29,"character":13}}
{"id":1078,"type":"edge","label":"next","inV":1069,"outV":1077}
{"id":1079,"type":"vertex","label":"range","start":{"line":29,"character":14},"end":{"line":29,"character":19}}
{"id":1080,"type":"edge","label":"next","inV":975,"outV":1079}
{"id":1081,"type":"vertex","label":"range","start":{"line":32,"character":11},"end":{"line":32,"character":60}}
{"id":1082,"type":"edge","label":"next","inV":799,"outV":1081}
{"id":1083,"type":"vertex","label":"range","start":{"line":32,"character":62},"end":{"line":32,"character":66}}
{"id":1084,"type":"vertex","label":"resultSet"}
{"id":1085,"type":"edge","label":"next","inV":1084,"outV":1083}
{"id":1086,"type":"vertex","label":"range","start":{"line":33,"character":8},"end":{"line":33,"character":15}}
{"id":1087,"type":"edge","label":"next","inV":37,"outV":1086}
{"id":1088,"type":"vertex","label":"range","start":{"line":33,"character":23},"end":{"line":33,"character":27}}
{"id":1089,"type":"edge","label":"next","inV":1084,"outV":1088}
{"id":1090,"type":"vertex","label":"range","start":{"line":33,"character":28},"end":{"line":33,"character":32}}
{"id":1091,"type":"edge","label":"next","inV":968,"outV":1090}
{"id":1092,"type":"vertex","label":"range","start":{"line":34,"character":12},"end":{"line":34,"character":16}}
{"id":1093,"type":"vertex","label":"resultSet"}
{"id":1094,"type":"edge","label":"next","inV":1093,"outV":1092}
{"id":1095,"type":"vertex","label":"range","start":{"line":34,"character":20},"end":{"line":34,"character":24}}
{"id":1096,"type":"edge","label":"next","inV":1084,"outV":1095}
{"id":1097,"type":"vertex","label":"range","start":{"line":34,"character":25},"end":{"line":34,"character":30}}
{"id":1098,"type":"edge","label":"next","inV":975,"outV":1097}
{"id":1099,"type":"vertex","label":"range","start":{"line":34,"character":31},"end":{"line":34,"character":35}}
{"id":1100,"type":"edge","label":"next","inV":794,"outV":1099}
{"id":1101,"type":"vertex","label":"range","start":{"line":35,"character":12},"end":{"line":35,"character":19}}
{"id":1102,"type":"edge","label":"next","inV":37,"outV":1101}
{"id":1103,"type":"vertex","label":"range","start":{"line":35,"character":27},"end":{"line":35,"character":31}}
{"id":1104,"type":"edge","label":"next","inV":1093,"outV":1103}
{"id":1105,"type":"vertex","label":"range","start":{"line":39,"character":11},"end":{"line":39,"character":61}}
{"id":1106,"type":"edge","label":"next","inV":823,"outV":1105}
{"id":1107,"type":"vertex","label":"range","start":{"line":39,"character":63},"end":{"line":39,"character":67}}
{"id":1108,"type":"vertex","label":"resultSet"}
{"id":1109,"type":"edge","label":"next","inV":1108,"outV":1107}
{"id":1110,"type":"vertex","label":"range","start":{"line":39,"character":69},"end":{"line":39,"character":80}}
{"id":1111,"type":"vertex","label":"resultSet"}
{"id":1112,"type":"edge","label":"next","inV":1111,"outV":1110}
{"id":1113,"type":"vertex","label":"range","start":{"line":39,"character":82},"end":{"line":39,"character":85}}
{"id":1114,"type":"edge","label":"next","inV":45,"outV":1113}
{"id":1115,"type":"vertex","label":"range","start":{"line":40,"character":12},"end":{"line":40,"character":16}}
{"id":1116,"type":"vertex","label":"resultSet"}
{"id":1117,"type":"edge","label":"next","inV":1116,"outV":1115}
{"id":1118,"type":"vertex","label":"range","start":{"line":40,"character":20},"end":{"line":40,"character":24}}
{"id":1119,"type":"edge","label":"next","inV":1108,"outV":1118}
{"id":1120,"type":"vertex","label":"range","start":{"line":40,"character":25},"end":{"line":40,"character":30}}
{"id":1121,"type":"edge","label":"next","inV":975,"outV":1120}
{"id":1122,"type":"vertex","label":"range","start":{"line":40,"character":31},"end":{"line":40,"character":35}}
{"id":1123,"type":"edge","label":"next","inV":794,"outV":1122}
{"id":1124,"type":"vertex","label":"range","start":{"line":41,"character":15},"end":{"line":41,"character":19}}
{"id":1125,"type":"edge","label":"next","inV":1116,"outV":1124}
{"id":1126,"type":"vertex","label":"range","start":{"line":41,"character":20},"end":{"line":41,"character":35}}
{"id":1127,"type":"edge","label":"next","inV":354,"outV":1126}
{"id":1128,"type":"vertex","label":"range","start":{"line":41,"character":41},"end":{"line":41,"character":52}}
{"id":1129,"type":"edge","label":"next","inV":1111,"outV":1128}
{"id":1130,"type":"vertex","label":"range","start":{"line":42,"character":16},"end":{"line":42,"character":23}}
{"id":1131,"type":"edge","label":"next","inV":37,"outV":1130}
{"id":1132,"type":"vertex","label":"range","start":{"line":42,"character":35},"end":{"line":42,"character":39}}
{"id":1133,"type":"edge","label":"next","inV":1108,"outV":1132}
{"id":1134,"type":"vertex","label":"range","start":{"line":42,"character":40},"end":{"line":42,"character":44}}
{"id":1135,"type":"edge","label":"next","inV":968,"outV":1134}
{"id":1136,"type":"vertex","label":"range","start":{"line":42,"character":46},"end":{"line":42,"character":50}}
{"id":1137,"type":"edge","label":"next","inV":1116,"outV":1136}
{"id":1138,"type":"vertex","label":"range","start":{"line":48,"character":11},"end":{"line":48,"character":26}}
{"id":1139,"type":"vertex","label":"resultSet"}
{"id":1140,"type":"edge","label":"next","inV":1139,"outV":1138}
{"id":1141,"type":"vertex","label":"range","start":{"line":48,"character":28},"end":{"line":48,"character":32}}
{"id":1142,"type":"vertex","label":"resultSet"}
{"id":1143,"type":"edge","label":"next","inV":1142,"outV":1141}
{"id":1144,"type":"vertex","label":"range","start":{"line":48,"character":37},"end":{"line":48,"character":43}}
{"id":1145,"type":"edge","label":"next","inV":80,"outV":1144}
{"id":1146,"type":"vertex","label":"range","start":{"line":49,"character":8},"end":{"line":49,"character":12}}
{"id":1147,"type":"edge","label":"next","inV":1142,"outV":1146}
{"id":1148,"type":"vertex","label":"range","start":{"line":49,"character":13},"end":{"line":49,"character":17}}
{"id":1149,"type":"edge","label":"next","inV":968,"outV":1148}
{"id":1150,"type":"vertex","label":"range","start":{"line":49,"character":18},"end":{"line":49,"character":27}}
{"id":1151,"type":"edge","label":"next","inV":898,"outV":1150}
{"id":1152,"type":"edge","label":"contains","inVs":[948,950,952,954,956,958,960,963,965,967,970,972,974,977,979,981,983,985,987,990,992,995,997,1000,1002,1004,1006,1008,1010,1012,1014,1017,1020,1022,1024,1027,1030,1032,1034,1037,1040,1042,1045,1047,1049,1052,1054,1056,1058,1060,1062,1064,1066,1068,1071,1073,1075,1077,1079,1081,1083,1086,1088,1090,1092,1095,1097,1099,1101,1103,1105,1107,1110,1113,1115,1118,1120,1122,1124,1126,1128,1130,1132,1134,1136,1138,1141,1144,1146,1148,1150],"outV":945}
{"id":1153,"type":"vertex","label":"document","uri":"file:///private/tmp/rust-racingcar/rust-racingcar/src/model/step.rs","languageId":"rust"}
{"id":1154,"type":"vertex","label":"foldingRangeResult","result":[{"startLine":0,"startCharacter":0,"endLine":1,"endCharacter":13,"kind":"imports"},{"startLine":5,"startCharacter":16,"endLine":8,"endCharacter":1},{"startLine":10,"startCharacter":10,"endLine":49,"endCharacter":1},{"startLine":11,"startCharacter":67,"endLine":19,"endCharacter":5},{"startLine":12,"startCharacter":28,"endLine":15,"endCharacter":9},{"startLine":21,"startCharacter":113,"endLine":32,"endCharacter":5},{"startLine":22,"startCharacter":43,"endLine":27,"endCharacter":9},{"startLine":23,"startCharacter":24,"endLine":26,"endCharacter":13},{"startLine":28,"startCharacter":20,"endLine":31,"endCharacter":9},{"startLine":34,"startCharacter":56,"endLine":40,"endCharacter":5},{"startLine":36,"startCharacter":29,"endLine":38,"endCharacter":9},{"startLine":42,"startCharacter":41,"endLine":44,"endCharacter":5},{"startLine":46,"startCharacter":38,"endLine":48,"endCharacter":5},{"startLine":51,"startCharacter":27,"endLine":58,"endCharacter":1},{"startLine":52,"startCharacter":57,"endLine":57,"endCharacter":5},{"startLine":53,"startCharacter":34,"endLine":55,"endCharacter":9}]}
{"id":1155,"type":"edge","label":"textDocument/foldingRange","inV":1154,"outV":1153}
{"id":1156,"type":"vertex","label":"range","start":{"line":0,"character":4},"end":{"line":0,"character":8}}
{"id":1157,"type":"vertex","label":"resultSet"}
{"id":1158,"type":"edge","label":"next","inV":1157,"outV":1156}
{"id":1159,"type":"vertex","label":"range","start":{"line":0,"character":10},"end":{"line":0,"character":13}}
{"id":1160,"type":"vertex","label":"resultSet"}
{"id":1161,"type":"edge","label":"next","inV":1160,"outV":1159}
{"id":1162,"type":"vertex","label":"range","start":{"line":1,"character":4},"end":{"line":1,"character":7}}
{"id":1163,"type":"edge","label":"next","inV":117,"outV":1162}
{"id":1164,"type":"vertex","label":"range","start":{"line":1,"character":9},"end":{"line":1,"character":12}}
{"id":1165,"type":"vertex","label":"resultSet"}
{"id":1166,"type":"edge","label":"next","inV":1165,"outV":1164}
{"id":1167,"type":"vertex","label":"range","start":{"line":3,"character":2},"end":{"line":3,"character":8}}
{"id":1168,"type":"edge","label":"next","inV":576,"outV":1167}
{"id":1169,"type":"vertex","label":"range","start":{"line":3,"character":9},"end":{"line":3,"character":14}}
{"id":1170,"type":"edge","label":"next","inV":579,"outV":1169}
{"id":1171,"type":"vertex","label":"range","start":{"line":4,"character":2},"end":{"line":4,"character":8}}
{"id":1172,"type":"edge","label":"next","inV":576,"outV":1171}
{"id":1173,"type":"vertex","label":"range","start":{"line":4,"character":9},"end":{"line":4,"character":14}}
{"id":1174,"type":"edge","label":"next","inV":961,"outV":1173}
{"id":1175,"type":"vertex","label":"range","start":{"line":5,"character":11},"end":{"line":5,"character":15}}
{"id":1176,"type":"edge","label":"next","inV":367,"outV":1175}
{"id":1177,"type":"vertex","label":"range","start":{"line":6,"character":8},"end":{"line":6,"character":16}}
{"id":1178,"type":"edge","label":"next","inV":373,"outV":1177}
{"id":1179,"type":"vertex","label":"range","start":{"line":6,"character":18},"end":{"line":6,"character":21}}
{"id":1180,"type":"edge","label":"next","inV":45,"outV":1179}
{"id":1181,"type":"vertex","label":"range","start":{"line":7,"character":8},"end":{"line":7,"character":19}}
{"id":1182,"type":"edge","label":"next","inV":370,"outV":1181}
{"id":1183,"type":"vertex","label":"range","start":{"line":7,"character":21},"end":{"line":7,"character":24}}
{"id":1184,"type":"edge","label":"next","inV":45,"outV":1183}
{"id":1185,"type":"vertex","label":"range","start":{"line":10,"character":5},"end":{"line":10,"character":9}}
{"id":1186,"type":"edge","label":"next","inV":367,"outV":1185}
{"id":1187,"type":"vertex","label":"range","start":{"line":11,"character":11},"end":{"line":11,"character":14}}
{"id":1188,"type":"edge","label":"next","inV":1050,"outV":1187}
{"id":1189,"type":"vertex","label":"range","start":{"line":11,"character":15},"end":{"line":11,"character":26}}
{"id":1190,"type":"vertex","label":"resultSet"}
{"id":1191,"type":"edge","label":"next","inV":1190,"outV":1189}
{"id":1192,"type":"vertex","label":"range","start":{"line":11,"character":28},"end":{"line":11,"character":31}}
{"id":1193,"type":"edge","label":"next","inV":45,"outV":1192}
{"id":1194,"type":"vertex","label":"range","start":{"line":11,"character":33},"end":{"line":11,"character":42}}
{"id":1195,"type":"vertex","label":"resultSet"}
{"id":1196,"type":"edge","label":"next","inV":1195,"outV":1194}
{"id":1197,"type":"vertex","label":"range","start":{"line":11,"character":44},"end":{"line":11,"character":50}}
{"id":1198,"type":"vertex","label":"resultSet"}
{"id":1199,"type":"edge","label":"next","inV":1198,"outV":1197}
{"id":1200,"type":"vertex","label":"range","start":{"line":11,"character":52},"end":{"line":11,"character":56}}
{"id":1201,"type":"edge","label":"next","inV":367,"outV":1200}
{"id":1202,"type":"vertex","label":"range","start":{"line":11,"character":62},"end":{"line":11,"character":66}}
{"id":1203,"type":"vertex","label":"resultSet"}
{"id":1204,"type":"edge","label":"next","inV":1203,"outV":1202}
{"id":1205,"type":"vertex","label":"range","start":{"line":12,"character":16},"end":{"line":12,"character":20}}
{"id":1206,"type":"vertex","label":"resultSet"}
{"id":1207,"type":"edge","label":"next","inV":1206,"outV":1205}
{"id":1208,"type":"vertex","label":"range","start":{"line":12,"character":23},"end":{"line":12,"character":27}}
{"id":1209,"type":"edge","label":"next","inV":1203,"outV":1208}
{"id":1210,"type":"vertex","label":"range","start":{"line":13,"character":12},"end":{"line":13,"character":20}}
{"id":1211,"type":"edge","label":"next","inV":373,"outV":1210}
{"id":1212,"type":"vertex","label":"range","start":{"line":16,"character":12},"end":{"line":16,"character":33}}
{"id":1213,"type":"vertex","label":"resultSet"}
{"id":1214,"type":"edge","label":"next","inV":1213,"outV":1212}
{"id":1215,"type":"vertex","label":"range","start":{"line":16,"character":35},"end":{"line":16,"character":38}}
{"id":1216,"type":"edge","label":"next","inV":45,"outV":1215}
{"id":1217,"type":"vertex","label":"range","start":{"line":16,"character":41},"end":{"line":16,"character":45}}
{"id":1218,"type":"edge","label":"next","inV":1203,"outV":1217}
{"id":1219,"type":"vertex","label":"range","start":{"line":16,"character":47},"end":{"line":16,"character":82}}
{"id":1220,"type":"vertex","label":"resultSet"}
{"id":1221,"type":"edge","label":"next","inV":1220,"outV":1219}
{"id":1222,"type":"vertex","label":"range","start":{"line":17,"character":8},"end":{"line":17,"character":12}}
{"id":1223,"type":"edge","label":"next","inV":1206,"outV":1222}
{"id":1224,"type":"vertex","label":"range","start":{"line":17,"character":15},"end":{"line":17,"character":19}}
{"id":1225,"type":"edge","label":"next","inV":1203,"outV":1224}
{"id":1226,"type":"vertex","label":"range","start":{"line":17,"character":21},"end":{"line":17,"character":49}}
{"id":1227,"type":"edge","label":"next","inV":397,"outV":1226}
{"id":1228,"type":"vertex","label":"range","start":{"line":17,"character":55},"end":{"line":17,"character":59}}
{"id":1229,"type":"edge","label":"next","inV":1206,"outV":1228}
{"id":1230,"type":"vertex","label":"range","start":{"line":17,"character":61},"end":{"line":17,"character":82}}
{"id":1231,"type":"edge","label":"next","inV":1213,"outV":1230}
{"id":1232,"type":"vertex","label":"range","start":{"line":17,"character":84},"end":{"line":17,"character":93}}
{"id":1233,"type":"edge","label":"next","inV":1195,"outV":1232}
{"id":1234,"type":"vertex","label":"range","start":{"line":18,"character":8},"end":{"line":18,"character":12}}
{"id":1235,"type":"edge","label":"next","inV":1206,"outV":1234}
{"id":1236,"type":"vertex","label":"range","start":{"line":21,"character":11},"end":{"line":21,"character":39}}
{"id":1237,"type":"edge","label":"next","inV":397,"outV":1236}
{"id":1238,"type":"vertex","label":"range","start":{"line":21,"character":45},"end":{"line":21,"character":49}}
{"id":1239,"type":"vertex","label":"resultSet"}
{"id":1240,"type":"edge","label":"next","inV":1239,"outV":1238}
{"id":1241,"type":"vertex","label":"range","start":{"line":21,"character":51},"end":{"line":21,"character":72}}
{"id":1242,"type":"vertex","label":"resultSet"}
{"id":1243,"type":"edge","label":"next","inV":1242,"outV":1241}
{"id":1244,"type":"vertex","label":"range","start":{"line":21,"character":74},"end":{"line":21,"character":77}}
{"id":1245,"type":"edge","label":"next","inV":45,"outV":1244}
{"id":1246,"type":"vertex","label":"range","start":{"line":21,"character":79},"end":{"line":21,"character":88}}
{"id":1247,"type":"vertex","label":"resultSet"}
{"id":1248,"type":"edge","label":"next","inV":1247,"outV":1246}
{"id":1249,"type":"vertex","label":"range","start":{"line":21,"character":90},"end":{"line":21,"character":96}}
{"id":1250,"type":"edge","label":"next","inV":1198,"outV":1249}
{"id":1251,"type":"vertex","label":"range","start":{"line":21,"character":98},"end":{"line":21,"character":102}}
{"id":1252,"type":"edge","label":"next","inV":367,"outV":1251}
{"id":1253,"type":"vertex","label":"range","start":{"line":21,"character":108},"end":{"line":21,"character":112}}
{"id":1254,"type":"edge","label":"next","inV":367,"outV":1253}
{"id":1255,"type":"vertex","label":"range","start":{"line":22,"character":15},"end":{"line":22,"character":19}}
{"id":1256,"type":"edge","label":"next","inV":379,"outV":1255}
{"id":1257,"type":"vertex","label":"range","start":{"line":22,"character":20},"end":{"line":22,"character":29}}
{"id":1258,"type":"vertex","label":"resultSet"}
{"id":1259,"type":"edge","label":"next","inV":1258,"outV":1257}
{"id":1260,"type":"vertex","label":"range","start":{"line":22,"character":33},"end":{"line":22,"character":42}}
{"id":1261,"type":"edge","label":"next","inV":1247,"outV":1260}
{"id":1262,"type":"vertex","label":"range","start":{"line":23,"character":19},"end":{"line":23,"character":23}}
{"id":1263,"type":"edge","label":"next","inV":1203,"outV":1262}
{"id":1264,"type":"vertex","label":"range","start":{"line":24,"character":16},"end":{"line":24,"character":24}}
{"id":1265,"type":"edge","label":"next","inV":373,"outV":1264}
{"id":1266,"type":"vertex","label":"range","start":{"line":24,"character":26},"end":{"line":24,"character":35}}
{"id":1267,"type":"edge","label":"next","inV":1258,"outV":1266}
{"id":1268,"type":"vertex","label":"range","start":{"line":24,"character":36},"end":{"line":24,"character":44}}
{"id":1269,"type":"edge","label":"next","inV":373,"outV":1268}
{"id":1270,"type":"vertex","label":"range","start":{"line":24,"character":47},"end":{"line":24,"character":68}}
{"id":1271,"type":"edge","label":"next","inV":1242,"outV":1270}
{"id":1272,"type":"vertex","label":"range","start":{"line":24,"character":72},"end":{"line":24,"character":75}}
{"id":1273,"type":"edge","label":"next","inV":45,"outV":1272}
{"id":1274,"type":"vertex","label":"range","start":{"line":25,"character":16},"end":{"line":25,"character":27}}
{"id":1275,"type":"edge","label":"next","inV":370,"outV":1274}
{"id":1276,"type":"vertex","label":"range","start":{"line":25,"character":29},"end":{"line":25,"character":33}}
{"id":1277,"type":"edge","label":"next","inV":1239,"outV":1276}
{"id":1278,"type":"vertex","label":"range","start":{"line":25,"character":34},"end":{"line":25,"character":45}}
{"id":1279,"type":"edge","label":"next","inV":370,"outV":1278}
{"id":1280,"type":"vertex","label":"range","start":{"line":28,"character":15},"end":{"line":28,"character":19}}
{"id":1281,"type":"edge","label":"next","inV":1203,"outV":1280}
{"id":1282,"type":"vertex","label":"range","start":{"line":29,"character":12},"end":{"line":29,"character":20}}
{"id":1283,"type":"edge","label":"next","inV":373,"outV":1282}
{"id":1284,"type":"vertex","label":"range","start":{"line":29,"character":22},"end":{"line":29,"character":43}}
{"id":1285,"type":"edge","label":"next","inV":1242,"outV":1284}
{"id":1286,"type":"vertex","label":"range","start":{"line":29,"character":47},"end":{"line":29,"character":50}}
{"id":1287,"type":"edge","label":"next","inV":45,"outV":1286}
{"id":1288,"type":"vertex","label":"range","start":{"line":30,"character":12},"end":{"line":30,"character":23}}
{"id":1289,"type":"edge","label":"next","inV":370,"outV":1288}
{"id":1290,"type":"vertex","label":"range","start":{"line":30,"character":25},"end":{"line":30,"character":29}}
{"id":1291,"type":"edge","label":"next","inV":1239,"outV":1290}
{"id":1292,"type":"vertex","label":"range","start":{"line":30,"character":30},"end":{"line":30,"character":41}}
{"id":1293,"type":"edge","label":"next","inV":370,"outV":1292}
{"id":1294,"type":"vertex","label":"range","start":{"line":34,"character":11},"end":{"line":34,"character":46}}
{"id":1295,"type":"edge","label":"next","inV":1220,"outV":1294}
{"id":1296,"type":"vertex","label":"range","start":{"line":34,"character":52},"end":{"line":34,"character":55}}
{"id":1297,"type":"edge","label":"next","inV":45,"outV":1296}
{"id":1298,"type":"vertex","label":"range","start":{"line":35,"character":12},"end":{"line":35,"character":25}}
{"id":1299,"type":"vertex","label":"resultSet"}
{"id":1300,"type":"edge","label":"next","inV":1299,"outV":1298}
{"id":1301,"type":"vertex","label":"range","start":{"line":35,"character":28},"end":{"line":35,"character":32}}
{"id":1302,"type":"edge","label":"next","inV":1157,"outV":1301}
{"id":1303,"type":"vertex","label":"range","start":{"line":35,"character":34},"end":{"line":35,"character":44}}
{"id":1304,"type":"vertex","label":"resultSet"}
{"id":1305,"type":"edge","label":"next","inV":1304,"outV":1303}
{"id":1306,"type":"vertex","label":"range","start":{"line":35,"character":47},"end":{"line":35,"character":56}}
{"id":1307,"type":"vertex","label":"resultSet"}
{"id":1308,"type":"edge","label":"next","inV":1307,"outV":1306}
{"id":1309,"type":"vertex","label":"range","start":{"line":36,"character":11},"end":{"line":36,"character":24}}
{"id":1310,"type":"edge","label":"next","inV":1299,"outV":1309}
{"id":1311,"type":"vertex","label":"range","start":{"line":37,"character":19},"end":{"line":37,"character":32}}
{"id":1312,"type":"edge","label":"next","inV":1299,"outV":1311}
{"id":1313,"type":"vertex","label":"range","start":{"line":42,"character":11},"end":{"line":42,"character":26}}
{"id":1314,"type":"edge","label":"next","inV":354,"outV":1313}
{"id":1315,"type":"vertex","label":"range","start":{"line":42,"character":28},"end":{"line":42,"character":32}}
{"id":1316,"type":"vertex","label":"resultSet"}
{"id":1317,"type":"edge","label":"next","inV":1316,"outV":1315}
{"id":1318,"type":"vertex","label":"range","start":{"line":42,"character":37},"end":{"line":42,"character":40}}
{"id":1319,"type":"edge","label":"next","inV":45,"outV":1318}
{"id":1320,"type":"vertex","label":"range","start":{"line":43,"character":8},"end":{"line":43,"character":12}}
{"id":1321,"type":"edge","label":"next","inV":1316,"outV":1320}
{"id":1322,"type":"vertex","label":"range","start":{"line":43,"character":13},"end":{"line":43,"character":24}}
{"id":1323,"type":"edge","label":"next","inV":370,"outV":1322}
{"id":1324,"type":"vertex","label":"range","start":{"line":46,"character":11},"end":{"line":46,"character":23}}
{"id":1325,"type":"vertex","label":"resultSet"}
{"id":1326,"type":"edge","label":"next","inV":1325,"outV":1324}
{"id":1327,"type":"vertex","label":"range","start":{"line":46,"character":25},"end":{"line":46,"character":29}}
{"id":1328,"type":"vertex","label":"resultSet"}
{"id":1329,"type":"edge","label":"next","inV":1328,"outV":1327}
{"id":1330,"type":"vertex","label":"range","start":{"line":46,"character":34},"end":{"line":46,"character":37}}
{"id":1331,"type":"edge","label":"next","inV":45,"outV":1330}
{"id":1332,"type":"vertex","label":"range","start":{"line":47,"character":8},"end":{"line":47,"character":12}}
{"id":1333,"type":"edge","label":"next","inV":1328,"outV":1332}
{"id":1334,"type":"vertex","label":"range","start":{"line":47,"character":13},"end":{"line":47,"character":21}}
{"id":1335,"type":"edge","label":"next","inV":373,"outV":1334}
{"id":1336,"type":"vertex","label":"range","start":{"line":51,"character":5},"end":{"line":51,"character":8}}
{"id":1337,"type":"edge","label":"next","inV":1165,"outV":1336}
{"id":1338,"type":"vertex","label":"range","start":{"line":51,"character":10},"end":{"line":51,"character":17}}
{"id":1339,"type":"vertex","label":"resultSet"}
{"id":1340,"type":"edge","label":"next","inV":1339,"outV":1338}
{"id":1341,"type":"vertex","label":"range","start":{"line":51,"character":22},"end":{"line":51,"character":26}}
{"id":1342,"type":"edge","label":"next","inV":367,"outV":1341}
{"id":1343,"type":"vertex","label":"range","start":{"line":52,"character":7},"end":{"line":52,"character":10}}
{"id":1344,"type":"vertex","label":"resultSet"}
{"id":1345,"type":"edge","label":"next","inV":1344,"outV":1343}
{"id":1346,"type":"vertex","label":"range","start":{"line":52,"character":12},"end":{"line":52,"character":16}}
{"id":1347,"type":"vertex","label":"resultSet"}
{"id":1348,"type":"edge","label":"next","inV":1347,"outV":1346}
{"id":1349,"type":"vertex","label":"range","start":{"line":52,"character":26},"end":{"line":52,"character":29}}
{"id":1350,"type":"edge","label":"next","inV":1165,"outV":1349}
{"id":1351,"type":"vertex","label":"range","start":{"line":52,"character":31},"end":{"line":52,"character":40}}
{"id":1352,"type":"vertex","label":"resultSet"}
{"id":1353,"type":"edge","label":"next","inV":1352,"outV":1351}
{"id":1354,"type":"vertex","label":"range","start":{"line":52,"character":45},"end":{"line":52,"character":48}}
{"id":1355,"type":"edge","label":"next","inV":1165,"outV":1354}
{"id":1356,"type":"vertex","label":"range","start":{"line":52,"character":50},"end":{"line":52,"character":56}}
{"id":1357,"type":"vertex","label":"resultSet"}
{"id":1358,"type":"edge","label":"next","inV":1357,"outV":1356}
{"id":1359,"type":"vertex","label":"range","start":{"line":53,"character":20},"end":{"line":53,"character":24}}
{"id":1360,"type":"edge","label":"next","inV":1347,"outV":1359}
{"id":1361,"type":"vertex","label":"range","start":{"line":53,"character":25},"end":{"line":53,"character":33}}
{"id":1362,"type":"edge","label":"next","inV":373,"outV":1361}
{"id":1363,"type":"vertex","label":"range","start":{"line":54,"character":12},"end":{"line":54,"character":17}}
{"id":1364,"type":"vertex","label":"resultSet"}
{"id":1365,"type":"edge","label":"next","inV":1364,"outV":1363}
{"id":1366,"type":"vertex","label":"range","start":{"line":56,"character":8},"end":{"line":56,"character":10}}
{"id":1367,"type":"edge","label":"next","inV":233,"outV":1366}
{"id":1368,"type":"edge","label":"contains","inVs":[1156,1159,1162,1164,1167,1169,1171,1173,1175,1177,1179,1181,1183,1185,1187,1189,1192,1194,1197,1200,1202,1205,1208,1210,1212,1215,1217,1219,1222,1224,1226,1228,1230,1232,1234,1236,1238,1241,1244,1246,1249,1251,1253,1255,1257,1260,1262,1264,1266,1268,1270,1272,1274,1276,1278,1280,1282,1284,1286,1288,1290,1292,1294,1296,1298,1301,1303,1306,1309,1311,1313,1315,1318,1320,1322,1324,1327,1330,1332,1334,1336,1338,1341,1343,1346,1349,1351,1354,1356,1359,1361,1363,1366],"outV":1153}
{"id":1369,"type":"vertex","label":"document","uri":"file:///private/tmp/rust-racingcar/rust-racingcar/src/test/test.rs","languageId":"rust"}
{"id":1370,"type":"vertex","label":"foldingRangeResult","result":[{"startLine":1,"startCharacter":0,"endLine":3,"endCharacter":28,"kind":"imports"},{"startLine":6,"startCharacter":12,"endLine":9,"endCharacter":1},{"startLine":11,"startCharacter":61,"endLine":14,"endCharacter":1},{"startLine":16,"startCharacter":59,"endLine":19,"endCharacter":1},{"startLine":22,"startCharacter":29,"endLine":30,"endCharacter":1},{"startLine":33,"startCharacter":27,"endLine":41,"endCharacter":1},{"startLine":44,"startCharacter":22,"endLine":48,"endCharacter":1}]}
{"id":1371,"type":"edge","label":"textDocument/foldingRange","inV":1370,"outV":1369}
{"id":1372,"type":"vertex","label":"range","start":{"line":0,"character":2},"end":{"line":0,"character":6}}
{"id":1373,"type":"edge","label":"next","inV":5,"outV":1372}
{"id":1374,"type":"vertex","label":"range","start":{"line":0,"character":33},"end":{"line":0,"character":37}}
{"id":1375,"type":"vertex","label":"resultSet"}
{"id":1376,"type":"edge","label":"next","inV":1375,"outV":1374}
{"id":1377,"type":"vertex","label":"range","start":{"line":1,"character":4},"end":{"line":1,"character":7}}
{"id":1378,"type":"edge","label":"next","inV":117,"outV":1377}
{"id":1379,"type":"vertex","label":"range","start":{"line":1,"character":9},"end":{"line":1,"character":11}}
{"id":1380,"type":"vertex","label":"resultSet"}
{"id":1381,"type":"edge","label":"next","inV":1380,"outV":1379}
{"id":1382,"type":"vertex","label":"range","start":{"line":2,"character":4},"end":{"line":2,"character":11}}
{"id":1383,"type":"edge","label":"next","inV":570,"outV":1382}
{"id":1384,"type":"vertex","label":"range","start":{"line":2,"character":13},"end":{"line":2,"character":21}}
{"id":1385,"type":"edge","label":"next","inV":573,"outV":1384}
{"id":1386,"type":"vertex","label":"range","start":{"line":3,"character":4},"end":{"line":3,"character":9}}
{"id":1387,"type":"edge","label":"next","inV":26,"outV":1386}
{"id":1388,"type":"vertex","label":"range","start":{"line":3,"character":11},"end":{"line":3,"character":15}}
{"id":1389,"type":"edge","label":"next","inV":18,"outV":1388}
{"id":1390,"type":"vertex","label":"range","start":{"line":3,"character":17},"end":{"line":3,"character":21}}
{"id":1391,"type":"edge","label":"next","inV":1375,"outV":1390}
{"id":1392,"type":"vertex","label":"range","start":{"line":5,"character":2},"end":{"line":5,"character":10}}
{"id":1393,"type":"edge","label":"next","inV":573,"outV":1392}
{"id":1394,"type":"vertex","label":"range","start":{"line":6,"character":6},"end":{"line":6,"character":11}}
{"id":1395,"type":"vertex","label":"resultSet"}
{"id":1396,"type":"edge","label":"next","inV":1395,"outV":1394}
{"id":1397,"type":"vertex","label":"range","start":{"line":7,"character":7},"end":{"line":7,"character":25}}
{"id":1398,"type":"vertex","label":"resultSet"}
{"id":1399,"type":"edge","label":"next","inV":1398,"outV":1397}
{"id":1400,"type":"vertex","label":"range","start":{"line":7,"character":31},"end":{"line":7,"character":35}}
{"id":1401,"type":"vertex","label":"resultSet"}
{"id":1402,"type":"edge","label":"next","inV":1401,"outV":1400}
{"id":1403,"type":"vertex","label":"range","start":{"line":7,"character":37},"end":{"line":7,"character":40}}
{"id":1404,"type":"vertex","label":"resultSet"}
{"id":1405,"type":"edge","label":"next","inV":1404,"outV":1403}
{"id":1406,"type":"vertex","label":"range","start":{"line":7,"character":47},"end":{"line":7,"character":53}}
{"id":1407,"type":"edge","label":"next","inV":80,"outV":1406}
{"id":1408,"type":"vertex","label":"range","start":{"line":7,"character":58},"end":{"line":7,"character":60}}
{"id":1409,"type":"edge","label":"next","inV":1380,"outV":1408}
{"id":1410,"type":"vertex","label":"range","start":{"line":7,"character":62},"end":{"line":7,"character":68}}
{"id":1411,"type":"vertex","label":"resultSet"}
{"id":1412,"type":"edge","label":"next","inV":1411,"outV":1410}
{"id":1413,"type":"vertex","label":"range","start":{"line":7,"character":69},"end":{"line":7,"character":74}}
{"id":1414,"type":"edge","label":"next","inV":337,"outV":1413}
{"id":1415,"type":"vertex","label":"range","start":{"line":8,"character":7},"end":{"line":8,"character":23}}
{"id":1416,"type":"vertex","label":"resultSet"}
{"id":1417,"type":"edge","label":"next","inV":1416,"outV":1415}
{"id":1418,"type":"vertex","label":"range","start":{"line":8,"character":29},"end":{"line":8,"character":33}}
{"id":1419,"type":"vertex","label":"resultSet"}
{"id":1420,"type":"edge","label":"next","inV":1419,"outV":1418}
{"id":1421,"type":"vertex","label":"range","start":{"line":8,"character":35},"end":{"line":8,"character":38}}
{"id":1422,"type":"vertex","label":"resultSet"}
{"id":1423,"type":"edge","label":"next","inV":1422,"outV":1421}
{"id":1424,"type":"vertex","label":"range","start":{"line":8,"character":45},"end":{"line":8,"character":51}}
{"id":1425,"type":"edge","label":"next","inV":80,"outV":1424}
{"id":1426,"type":"vertex","label":"range","start":{"line":8,"character":56},"end":{"line":8,"character":58}}
{"id":1427,"type":"edge","label":"next","inV":1380,"outV":1426}
{"id":1428,"type":"vertex","label":"range","start":{"line":8,"character":60},"end":{"line":8,"character":66}}
{"id":1429,"type":"edge","label":"next","inV":1411,"outV":1428}
{"id":1430,"type":"vertex","label":"range","start":{"line":8,"character":67},"end":{"line":8,"character":72}}
{"id":1431,"type":"edge","label":"next","inV":337,"outV":1430}
{"id":1432,"type":"vertex","label":"range","start":{"line":11,"character":3},"end":{"line":11,"character":21}}
{"id":1433,"type":"vertex","label":"resultSet"}
{"id":1434,"type":"edge","label":"next","inV":1433,"outV":1432}
{"id":1435,"type":"vertex","label":"range","start":{"line":11,"character":22},"end":{"line":11,"character":25}}
{"id":1436,"type":"vertex","label":"resultSet"}
{"id":1437,"type":"edge","label":"next","inV":1436,"outV":1435}
{"id":1438,"type":"vertex","label":"range","start":{"line":11,"character":32},"end":{"line":11,"character":38}}
{"id":1439,"type":"edge","label":"next","inV":80,"outV":1438}
{"id":1440,"type":"vertex","label":"range","start":{"line":11,"character":43},"end":{"line":11,"character":45}}
{"id":1441,"type":"edge","label":"next","inV":1380,"outV":1440}
{"id":1442,"type":"vertex","label":"range","start":{"line":11,"character":47},"end":{"line":11,"character":53}}
{"id":1443,"type":"edge","label":"next","inV":1411,"outV":1442}
{"id":1444,"type":"vertex","label":"range","start":{"line":11,"character":54},"end":{"line":11,"character":59}}
{"id":1445,"type":"edge","label":"next","inV":337,"outV":1444}
{"id":1446,"type":"vertex","label":"range","start":{"line":12,"character":4},"end":{"line":12,"character":7}}
{"id":1447,"type":"edge","label":"next","inV":1436,"outV":1446}
{"id":1448,"type":"vertex","label":"range","start":{"line":12,"character":8},"end":{"line":12,"character":16}}
{"id":1449,"type":"vertex","label":"resultSet"}
{"id":1450,"type":"edge","label":"next","inV":1449,"outV":1448}
{"id":1451,"type":"vertex","label":"range","start":{"line":13,"character":4},"end":{"line":13,"character":6}}
{"id":1452,"type":"edge","label":"next","inV":233,"outV":1451}
{"id":1453,"type":"vertex","label":"range","start":{"line":16,"character":3},"end":{"line":16,"character":19}}
{"id":1454,"type":"vertex","label":"resultSet"}
{"id":1455,"type":"edge","label":"next","inV":1454,"outV":1453}
{"id":1456,"type":"vertex","label":"range","start":{"line":16,"character":20},"end":{"line":16,"character":23}}
{"id":1457,"type":"vertex","label":"resultSet"}
{"id":1458,"type":"edge","label":"next","inV":1457,"outV":1456}
{"id":1459,"type":"vertex","label":"range","start":{"line":16,"character":30},"end":{"line":16,"character":36}}
{"id":1460,"type":"edge","label":"next","inV":80,"outV":1459}
{"id":1461,"type":"vertex","label":"range","start":{"line":16,"character":41},"end":{"line":16,"character":43}}
{"id":1462,"type":"edge","label":"next","inV":1380,"outV":1461}
{"id":1463,"type":"vertex","label":"range","start":{"line":16,"character":45},"end":{"line":16,"character":51}}
{"id":1464,"type":"edge","label":"next","inV":1411,"outV":1463}
{"id":1465,"type":"vertex","label":"range","start":{"line":16,"character":52},"end":{"line":16,"character":57}}
{"id":1466,"type":"edge","label":"next","inV":337,"outV":1465}
{"id":1467,"type":"vertex","label":"range","start":{"line":17,"character":4},"end":{"line":17,"character":7}}
{"id":1468,"type":"edge","label":"next","inV":1457,"outV":1467}
{"id":1469,"type":"vertex","label":"range","start":{"line":17,"character":8},"end":{"line":17,"character":16}}
{"id":1470,"type":"edge","label":"next","inV":1449,"outV":1469}
{"id":1471,"type":"vertex","label":"range","start":{"line":18,"character":4},"end":{"line":18,"character":6}}
{"id":1472,"type":"edge","label":"next","inV":233,"outV":1471}
{"id":1473,"type":"vertex","label":"range","start":{"line":21,"character":2},"end":{"line":21,"character":6}}
{"id":1474,"type":"edge","label":"next","inV":244,"outV":1473}
{"id":1475,"type":"vertex","label":"range","start":{"line":22,"character":3},"end":{"line":22,"character":26}}
{"id":1476,"type":"vertex","label":"resultSet"}
{"id":1477,"type":"edge","label":"next","inV":1476,"outV":1475}
{"id":1478,"type":"vertex","label":"range","start":{"line":23,"character":12},"end":{"line":23,"character":16}}
{"id":1479,"type":"vertex","label":"resultSet"}
{"id":1480,"type":"edge","label":"next","inV":1479,"outV":1478}
{"id":1481,"type":"vertex","label":"range","start":{"line":23,"character":19},"end":{"line":23,"character":28}}
{"id":1482,"type":"vertex","label":"resultSet"}
{"id":1483,"type":"edge","label":"next","inV":1482,"outV":1481}
{"id":1484,"type":"vertex","label":"range","start":{"line":23,"character":30},"end":{"line":23,"character":33}}
{"id":1485,"type":"vertex","label":"resultSet"}
{"id":1486,"type":"edge","label":"next","inV":1485,"outV":1484}
{"id":1487,"type":"vertex","label":"range","start":{"line":24,"character":4},"end":{"line":24,"character":8}}
{"id":1488,"type":"edge","label":"next","inV":1479,"outV":1487}
{"id":1489,"type":"vertex","label":"range","start":{"line":24,"character":9},"end":{"line":24,"character":34}}
{"id":1490,"type":"vertex","label":"resultSet"}
{"id":1491,"type":"edge","label":"next","inV":1490,"outV":1489}
{"id":1492,"type":"vertex","label":"range","start":{"line":25,"character":9},"end":{"line":25,"character":14}}
{"id":1493,"type":"vertex","label":"resultSet"}
{"id":1494,"type":"edge","label":"next","inV":1493,"outV":1492}
{"id":1495,"type":"vertex","label":"range","start":{"line":26,"character":9},"end":{"line":26,"character":18}}
{"id":1496,"type":"vertex","label":"resultSet"}
{"id":1497,"type":"edge","label":"next","inV":1496,"outV":1495}
{"id":1498,"type":"vertex","label":"range","start":{"line":26,"character":19},"end":{"line":26,"character":37}}
{"id":1499,"type":"edge","label":"next","inV":1433,"outV":1498}
{"id":1500,"type":"vertex","label":"range","start":{"line":27,"character":12},"end":{"line":27,"character":15}}
{"id":1501,"type":"vertex","label":"resultSet"}
{"id":1502,"type":"edge","label":"next","inV":1501,"outV":1500}
{"id":1503,"type":"vertex","label":"range","start":{"line":27,"character":18},"end":{"line":27,"character":24}}
{"id":1504,"type":"edge","label":"next","inV":80,"outV":1503}
{"id":1505,"type":"vertex","label":"range","start":{"line":27,"character":26},"end":{"line":27,"character":29}}
{"id":1506,"type":"vertex","label":"resultSet"}
{"id":1507,"type":"edge","label":"next","inV":1506,"outV":1505}
{"id":1508,"type":"vertex","label":"range","start":{"line":28,"character":4},"end":{"line":28,"character":8}}
{"id":1509,"type":"edge","label":"next","inV":1479,"outV":1508}
{"id":1510,"type":"vertex","label":"range","start":{"line":28,"character":9},"end":{"line":28,"character":27}}
{"id":1511,"type":"vertex","label":"resultSet"}
{"id":1512,"type":"edge","label":"next","inV":1511,"outV":1510}
{"id":1513,"type":"vertex","label":"range","start":{"line":28,"character":33},"end":{"line":28,"character":36}}
{"id":1514,"type":"edge","label":"next","inV":1501,"outV":1513}
{"id":1515,"type":"vertex","label":"range","start":{"line":28,"character":38},"end":{"line":28,"character":44}}
{"id":1516,"type":"vertex","label":"resultSet"}
{"id":1517,"type":"edge","label":"next","inV":1516,"outV":1515}
{"id":1518,"type":"vertex","label":"range","start":{"line":29,"character":4},"end":{"line":29,"character":13}}
{"id":1519,"type":"edge","label":"next","inV":255,"outV":1518}
{"id":1520,"type":"vertex","label":"range","start":{"line":29,"character":15},"end":{"line":29,"character":18}}
{"id":1521,"type":"edge","label":"next","inV":1501,"outV":1520}
{"id":1522,"type":"vertex","label":"range","start":{"line":32,"character":2},"end":{"line":32,"character":6}}
{"id":1523,"type":"edge","label":"next","inV":244,"outV":1522}
{"id":1524,"type":"vertex","label":"range","start":{"line":33,"character":3},"end":{"line":33,"character":24}}
{"id":1525,"type":"vertex","label":"resultSet"}
{"id":1526,"type":"edge","label":"next","inV":1525,"outV":1524}
{"id":1527,"type":"vertex","label":"range","start":{"line":34,"character":12},"end":{"line":34,"character":16}}
{"id":1528,"type":"vertex","label":"resultSet"}
{"id":1529,"type":"edge","label":"next","inV":1528,"outV":1527}
{"id":1530,"type":"vertex","label":"range","start":{"line":34,"character":19},"end":{"line":34,"character":28}}
{"id":1531,"type":"edge","label":"next","inV":1482,"outV":1530}
{"id":1532,"type":"vertex","label":"range","start":{"line":34,"character":30},"end":{"line":34,"character":33}}
{"id":1533,"type":"edge","label":"next","inV":1485,"outV":1532}
{"id":1534,"type":"vertex","label":"range","start":{"line":35,"character":4},"end":{"line":35,"character":8}}
{"id":1535,"type":"edge","label":"next","inV":1528,"outV":1534}
{"id":1536,"type":"vertex","label":"range","start":{"line":35,"character":9},"end":{"line":35,"character":32}}
{"id":1537,"type":"vertex","label":"resultSet"}
{"id":1538,"type":"edge","label":"next","inV":1537,"outV":1536}
{"id":1539,"type":"vertex","label":"range","start":{"line":36,"character":9},"end":{"line":36,"character":14}}
{"id":1540,"type":"vertex","label":"resultSet"}
{"id":1541,"type":"edge","label":"next","inV":1540,"outV":1539}
{"id":1542,"type":"vertex","label":"range","start":{"line":37,"character":9},"end":{"line":37,"character":18}}
{"id":1543,"type":"vertex","label":"resultSet"}
{"id":1544,"type":"edge","label":"next","inV":1543,"outV":1542}
{"id":1545,"type":"vertex","label":"range","start":{"line":37,"character":19},"end":{"line":37,"character":35}}
{"id":1546,"type":"edge","label":"next","inV":1454,"outV":1545}
{"id":1547,"type":"vertex","label":"range","start":{"line":38,"character":12},"end":{"line":38,"character":15}}
{"id":1548,"type":"vertex","label":"resultSet"}
{"id":1549,"type":"edge","label":"next","inV":1548,"outV":1547}
{"id":1550,"type":"vertex","label":"range","start":{"line":38,"character":18},"end":{"line":38,"character":24}}
{"id":1551,"type":"edge","label":"next","inV":80,"outV":1550}
{"id":1552,"type":"vertex","label":"range","start":{"line":38,"character":26},"end":{"line":38,"character":29}}
{"id":1553,"type":"edge","label":"next","inV":1506,"outV":1552}
{"id":1554,"type":"vertex","label":"range","start":{"line":39,"character":4},"end":{"line":39,"character":8}}
{"id":1555,"type":"edge","label":"next","inV":1528,"outV":1554}
{"id":1556,"type":"vertex","label":"range","start":{"line":39,"character":9},"end":{"line":39,"character":25}}
{"id":1557,"type":"vertex","label":"resultSet"}
{"id":1558,"type":"edge","label":"next","inV":1557,"outV":1556}
{"id":1559,"type":"vertex","label":"range","start":{"line":39,"character":31},"end":{"line":39,"character":34}}
{"id":1560,"type":"edge","label":"next","inV":1548,"outV":1559}
{"id":1561,"type":"vertex","label":"range","start":{"line":39,"character":36},"end":{"line":39,"character":42}}
{"id":1562,"type":"edge","label":"next","inV":1516,"outV":1561}
{"id":1563,"type":"vertex","label":"range","start":{"line":40,"character":4},"end":{"line":40,"character":13}}
{"id":1564,"type":"edge","label":"next","inV":255,"outV":1563}
{"id":1565,"type":"vertex","label":"range","start":{"line":40,"character":15},"end":{"line":40,"character":18}}
{"id":1566,"type":"edge","label":"next","inV":1548,"outV":1565}
{"id":1567,"type":"vertex","label":"range","start":{"line":43,"character":2},"end":{"line":43,"character":6}}
{"id":1568,"type":"edge","label":"next","inV":244,"outV":1567}
{"id":1569,"type":"vertex","label":"range","start":{"line":44,"character":3},"end":{"line":44,"character":19}}
{"id":1570,"type":"vertex","label":"resultSet"}
{"id":1571,"type":"edge","label":"next","inV":1570,"outV":1569}
{"id":1572,"type":"vertex","label":"range","start":{"line":45,"character":8},"end":{"line":45,"character":17}}
{"id":1573,"type":"vertex","label":"resultSet"}
{"id":1574,"type":"edge","label":"next","inV":1573,"outV":1572}
{"id":1575,"type":"vertex","label":"range","start":{"line":45,"character":19},"end":{"line":45,"character":25}}
{"id":1576,"type":"edge","label":"next","inV":1198,"outV":1575}
{"id":1577,"type":"vertex","label":"range","start":{"line":45,"character":35},"end":{"line":45,"character":39}}
{"id":1578,"type":"vertex","label":"resultSet"}
{"id":1579,"type":"edge","label":"next","inV":1578,"outV":1577}
{"id":1580,"type":"vertex","label":"range","start":{"line":46,"character":8},"end":{"line":46,"character":12}}
{"id":1581,"type":"vertex","label":"resultSet"}
{"id":1582,"type":"edge","label":"next","inV":1581,"outV":1580}
{"id":1583,"type":"vertex","label":"range","start":{"line":46,"character":28},"end":{"line":46,"character":37}}
{"id":1584,"type":"edge","label":"next","inV":1573,"outV":1583}
{"id":1585,"type":"vertex","label":"range","start":{"line":47,"character":4},"end":{"line":47,"character":13}}
{"id":1586,"type":"edge","label":"next","inV":255,"outV":1585}
{"id":1587,"type":"vertex","label":"range","start":{"line":47,"character":15},"end":{"line":47,"character":19}}
{"id":1588,"type":"edge","label":"next","inV":1581,"outV":1587}
{"id":1589,"type":"edge","label":"contains","inVs":[1372,1374,1377,1379,1382,1384,1386,1388,1390,1392,1394,1397,1400,1403,1406,1408,1410,1413,1415,1418,1421,1424,1426,1428,1430,1432,1435,1438,1440,1442,1444,1446,1448,1451,1453,1456,1459,1461,1463,1465,1467,1469,1471,1473,1475,1478,1481,1484,1487,1489,1492,1495,1498,1500,1503,1505,1508,1510,1513,1515,1518,1520,1522,1524,1527,1530,1532,1534,1536,1539,1542,1545,1547,1550,1552,1554,1556,1559,1561,1563,1565,1567,1569,1572,1575,1577,1580,1583,1585,1587],"outV":1369}
{"id":1590,"type":"vertex","label":"document","uri":"file:///private/tmp/rust-racingcar/rust-racingcar/src/view/input.rs","languageId":"rust"}
{"id":1591,"type":"vertex","label":"foldingRangeResult","result":[{"startLine":2,"startCharacter":30,"endLine":7,"endCharacter":1},{"startLine":9,"startCharacter":36,"endLine":15,"endCharacter":1}]}
{"id":1592,"type":"edge","label":"textDocument/foldingRange","inV":1591,"outV":1590}
{"id":1593,"type":"vertex","label":"range","start":{"line":0,"character":4},"end":{"line":0,"character":7}}
{"id":1594,"type":"edge","label":"next","inV":117,"outV":1593}
{"id":1595,"type":"vertex","label":"range","start":{"line":0,"character":9},"end":{"line":0,"character":11}}
{"id":1596,"type":"edge","label":"next","inV":1380,"outV":1595}
{"id":1597,"type":"vertex","label":"range","start":{"line":2,"character":7},"end":{"line":2,"character":20}}
{"id":1598,"type":"edge","label":"next","inV":50,"outV":1597}
{"id":1599,"type":"vertex","label":"range","start":{"line":2,"character":26},"end":{"line":2,"character":29}}
{"id":1600,"type":"edge","label":"next","inV":45,"outV":1599}
{"id":1601,"type":"vertex","label":"range","start":{"line":3,"character":12},"end":{"line":3,"character":22}}
{"id":1602,"type":"vertex","label":"resultSet"}
{"id":1603,"type":"edge","label":"next","inV":1602,"outV":1601}
{"id":1604,"type":"vertex","label":"range","start":{"line":3,"character":25},"end":{"line":3,"character":31}}
{"id":1605,"type":"edge","label":"next","inV":80,"outV":1604}
{"id":1606,"type":"vertex","label":"range","start":{"line":3,"character":33},"end":{"line":3,"character":36}}
{"id":1607,"type":"edge","label":"next","inV":1506,"outV":1606}
{"id":1608,"type":"vertex","label":"range","start":{"line":4,"character":4},"end":{"line":4,"character":6}}
{"id":1609,"type":"edge","label":"next","inV":1380,"outV":1608}
{"id":1610,"type":"vertex","label":"range","start":{"line":4,"character":8},"end":{"line":4,"character":13}}
{"id":1611,"type":"vertex","label":"resultSet"}
{"id":1612,"type":"edge","label":"next","inV":1611,"outV":1610}
{"id":1613,"type":"vertex","label":"range","start":{"line":4,"character":16},"end":{"line":4,"character":25}}
{"id":1614,"type":"vertex","label":"resultSet"}
{"id":1615,"type":"edge","label":"next","inV":1614,"outV":1613}
{"id":1616,"type":"vertex","label":"range","start":{"line":4,"character":31},"end":{"line":4,"character":41}}
{"id":1617,"type":"edge","label":"next","inV":1602,"outV":1616}
{"id":1618,"type":"vertex","label":"range","start":{"line":4,"character":43},"end":{"line":4,"character":49}}
{"id":1619,"type":"vertex","label":"resultSet"}
{"id":1620,"type":"edge","label":"next","inV":1619,"outV":1618}
{"id":1621,"type":"vertex","label":"range","start":{"line":5,"character":8},"end":{"line":5,"character":9}}
{"id":1622,"type":"vertex","label":"resultSet"}
{"id":1623,"type":"edge","label":"next","inV":1622,"outV":1621}
{"id":1624,"type":"vertex","label":"range","start":{"line":5,"character":11},"end":{"line":5,"character":14}}
{"id":1625,"type":"edge","label":"next","inV":45,"outV":1624}
{"id":1626,"type":"vertex","label":"range","start":{"line":5,"character":17},"end":{"line":5,"character":27}}
{"id":1627,"type":"edge","label":"next","inV":1602,"outV":1626}
{"id":1628,"type":"vertex","label":"range","start":{"line":5,"character":28},"end":{"line":5,"character":32}}
{"id":1629,"type":"vertex","label":"resultSet"}
{"id":1630,"type":"edge","label":"next","inV":1629,"outV":1628}
{"id":1631,"type":"vertex","label":"range","start":{"line":5,"character":35},"end":{"line":5,"character":40}}
{"id":1632,"type":"vertex","label":"resultSet"}
{"id":1633,"type":"edge","label":"next","inV":1632,"outV":1631}
{"id":1634,"type":"vertex","label":"range","start":{"line":5,"character":43},"end":{"line":5,"character":49}}
{"id":1635,"type":"edge","label":"next","inV":1619,"outV":1634}
{"id":1636,"type":"vertex","label":"range","start":{"line":6,"character":11},"end":{"line":6,"character":12}}
{"id":1637,"type":"edge","label":"next","inV":1622,"outV":1636}
{"id":1638,"type":"vertex","label":"range","start":{"line":9,"character":7},"end":{"line":9,"character":18}}
{"id":1639,"type":"edge","label":"next","inV":85,"outV":1638}
{"id":1640,"type":"vertex","label":"range","start":{"line":9,"character":24},"end":{"line":9,"character":27}}
{"id":1641,"type":"edge","label":"next","inV":77,"outV":1640}
{"id":1642,"type":"vertex","label":"range","start":{"line":9,"character":28},"end":{"line":9,"character":34}}
{"id":1643,"type":"edge","label":"next","inV":80,"outV":1642}
{"id":1644,"type":"vertex","label":"range","start":{"line":10,"character":12},"end":{"line":10,"character":22}}
{"id":1645,"type":"vertex","label":"resultSet"}
{"id":1646,"type":"edge","label":"next","inV":1645,"outV":1644}
{"id":1647,"type":"vertex","label":"range","start":{"line":10,"character":25},"end":{"line":10,"character":31}}
{"id":1648,"type":"edge","label":"next","inV":80,"outV":1647}
{"id":1649,"type":"vertex","label":"range","start":{"line":10,"character":33},"end":{"line":10,"character":36}}
{"id":1650,"type":"edge","label":"next","inV":1506,"outV":1649}
{"id":1651,"type":"vertex","label":"range","start":{"line":11,"character":4},"end":{"line":11,"character":6}}
{"id":1652,"type":"edge","label":"next","inV":1380,"outV":1651}
{"id":1653,"type":"vertex","label":"range","start":{"line":11,"character":8},"end":{"line":11,"character":13}}
{"id":1654,"type":"edge","label":"next","inV":1611,"outV":1653}
{"id":1655,"type":"vertex","label":"range","start":{"line":11,"character":16},"end":{"line":11,"character":25}}
{"id":1656,"type":"edge","label":"next","inV":1614,"outV":1655}
{"id":1657,"type":"vertex","label":"range","start":{"line":11,"character":31},"end":{"line":11,"character":41}}
{"id":1658,"type":"edge","label":"next","inV":1645,"outV":1657}
{"id":1659,"type":"vertex","label":"range","start":{"line":11,"character":43},"end":{"line":11,"character":49}}
{"id":1660,"type":"edge","label":"next","inV":1619,"outV":1659}
{"id":1661,"type":"vertex","label":"range","start":{"line":12,"character":8},"end":{"line":12,"character":13}}
{"id":1662,"type":"vertex","label":"resultSet"}
{"id":1663,"type":"edge","label":"next","inV":1662,"outV":1661}
{"id":1664,"type":"vertex","label":"range","start":{"line":12,"character":15},"end":{"line":12,"character":21}}
{"id":1665,"type":"edge","label":"next","inV":80,"outV":1664}
{"id":1666,"type":"vertex","label":"range","start":{"line":12,"character":24},"end":{"line":12,"character":34}}
{"id":1667,"type":"edge","label":"next","inV":1645,"outV":1666}
{"id":1668,"type":"vertex","label":"range","start":{"line":12,"character":35},"end":{"line":12,"character":39}}
{"id":1669,"type":"edge","label":"next","inV":1629,"outV":1668}
{"id":1670,"type":"vertex","label":"range","start":{"line":12,"character":42},"end":{"line":12,"character":47}}
{"id":1671,"type":"edge","label":"next","inV":1632,"outV":1670}
{"id":1672,"type":"vertex","label":"range","start":{"line":12,"character":50},"end":{"line":12,"character":56}}
{"id":1673,"type":"edge","label":"next","inV":1619,"outV":1672}
{"id":1674,"type":"vertex","label":"range","start":{"line":13,"character":8},"end":{"line":13,"character":13}}
{"id":1675,"type":"vertex","label":"resultSet"}
{"id":1676,"type":"edge","label":"next","inV":1675,"outV":1674}
{"id":1677,"type":"vertex","label":"range","start":{"line":13,"character":16},"end":{"line":13,"character":21}}
{"id":1678,"type":"edge","label":"next","inV":1662,"outV":1677}
{"id":1679,"type":"vertex","label":"range","start":{"line":13,"character":22},"end":{"line":13,"character":27}}
{"id":1680,"type":"vertex","label":"resultSet"}
{"id":1681,"type":"edge","label":"next","inV":1680,"outV":1679}
{"id":1682,"type":"vertex","label":"range","start":{"line":13,"character":33},"end":{"line":13,"character":36}}
{"id":1683,"type":"vertex","label":"resultSet"}
{"id":1684,"type":"edge","label":"next","inV":1683,"outV":1682}
{"id":1685,"type":"vertex","label":"range","start":{"line":13,"character":38},"end":{"line":13,"character":39}}
{"id":1686,"type":"vertex","label":"resultSet"}
{"id":1687,"type":"edge","label":"next","inV":1686,"outV":1685}
{"id":1688,"type":"vertex","label":"range","start":{"line":13,"character":41},"end":{"line":13,"character":42}}
{"id":1689,"type":"edge","label":"next","inV":1686,"outV":1688}
{"id":1690,"type":"vertex","label":"range","start":{"line":13,"character":43},"end":{"line":13,"character":52}}
{"id":1691,"type":"edge","label":"next","inV":190,"outV":1690}
{"id":1692,"type":"vertex","label":"range","start":{"line":13,"character":56},"end":{"line":13,"character":63}}
{"id":1693,"type":"vertex","label":"resultSet"}
{"id":1694,"type":"edge","label":"next","inV":1693,"outV":1692}
{"id":1695,"type":"vertex","label":"range","start":{"line":14,"character":4},"end":{"line":14,"character":9}}
{"id":1696,"type":"edge","label":"next","inV":1675,"outV":1695}
{"id":1697,"type":"edge","label":"contains","inVs":[1593,1595,1597,1599,1601,1604,1606,1608,1610,1613,1616,1618,1621,1624,1626,1628,1631,1634,1636,1638,1640,1642,1644,1647,1649,1651,1653,1655,1657,1659,1661,1664,1666,1668,1670,1672,1674,1677,1679,1682,1685,1688,1690,1692,1695],"outV":1590}
{"id":1698,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\n#[path]\n```\n\n---\n\nValid forms are:\n\n* \\#\\[path = file\\]"}}}
{"id":1699,"type":"edge","label":"textDocument/hover","inV":1698,"outV":5}
{"id":1700,"type":"vertex","label":"referenceResult"}
{"id":1701,"type":"edge","label":"textDocument/references","inV":1700,"outV":5}
{"id":1702,"type":"edge","label":"item","document":1,"property":"references","inVs":[4,10,15,20],"outV":1700}
{"id":1703,"type":"edge","label":"item","document":108,"property":"references","inVs":[111],"outV":1700}
{"id":1704,"type":"edge","label":"item","document":560,"property":"references","inVs":[563],"outV":1700}
{"id":1705,"type":"edge","label":"item","document":945,"property":"references","inVs":[948],"outV":1700}
{"id":1706,"type":"edge","label":"item","document":1369,"property":"references","inVs":[1372],"outV":1700}
{"id":1707,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar\n```\n\n```rust\nmod input\n```"}}}
{"id":1708,"type":"edge","label":"textDocument/hover","inV":1707,"outV":8}
{"id":1709,"type":"vertex","label":"packageInformation","name":"rust-racingcar","manager":"cargo","version":"0.1.0"}
{"id":1710,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::input","unique":"scheme","kind":"export"}
{"id":1711,"type":"edge","label":"packageInformation","inV":1709,"outV":1710}
{"id":1712,"type":"edge","label":"moniker","inV":1710,"outV":8}
{"id":1713,"type":"vertex","label":"definitionResult"}
{"id":1714,"type":"vertex","label":"range","start":{"line":0,"character":0},"end":{"line":16,"character":0}}
{"id":1715,"type":"edge","label":"contains","inVs":[1714],"outV":1590}
{"id":1716,"type":"edge","label":"item","document":1590,"inVs":[1714],"outV":1713}
{"id":1717,"type":"edge","label":"textDocument/definition","inV":1713,"outV":8}
{"id":1718,"type":"vertex","label":"referenceResult"}
{"id":1719,"type":"edge","label":"textDocument/references","inV":1718,"outV":8}
{"id":1720,"type":"edge","label":"item","document":1,"property":"references","inVs":[7,47,63,82],"outV":1718}
{"id":1721,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar\n```\n\n```rust\nmod game\n```"}}}
{"id":1722,"type":"edge","label":"textDocument/hover","inV":1721,"outV":13}
{"id":1723,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::game","unique":"scheme","kind":"export"}
{"id":1724,"type":"edge","label":"packageInformation","inV":1709,"outV":1723}
{"id":1725,"type":"edge","label":"moniker","inV":1723,"outV":13}
{"id":1726,"type":"vertex","label":"definitionResult"}
{"id":1727,"type":"vertex","label":"range","start":{"line":0,"character":0},"end":{"line":81,"character":0}}
{"id":1728,"type":"edge","label":"contains","inVs":[1727],"outV":560}
{"id":1729,"type":"edge","label":"item","document":560,"inVs":[1727],"outV":1726}
{"id":1730,"type":"edge","label":"textDocument/definition","inV":1726,"outV":13}
{"id":1731,"type":"vertex","label":"referenceResult"}
{"id":1732,"type":"edge","label":"textDocument/references","inV":1731,"outV":13}
{"id":1733,"type":"edge","label":"item","document":1,"property":"references","inVs":[12,28,91],"outV":1731}
{"id":1734,"type":"edge","label":"item","document":108,"property":"references","inVs":[129,143,152],"outV":1731}
{"id":1735,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar\n```\n\n```rust\nmod test\n```"}}}
{"id":1736,"type":"edge","label":"textDocument/hover","inV":1735,"outV":18}
{"id":1737,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::test","unique":"scheme","kind":"export"}
{"id":1738,"type":"edge","label":"packageInformation","inV":1709,"outV":1737}
{"id":1739,"type":"edge","label":"moniker","inV":1737,"outV":18}
{"id":1740,"type":"vertex","label":"definitionResult"}
{"id":1741,"type":"vertex","label":"range","start":{"line":0,"character":0},"end":{"line":49,"character":0}}
{"id":1742,"type":"edge","label":"contains","inVs":[1741],"outV":1369}
{"id":1743,"type":"edge","label":"item","document":1369,"inVs":[1741],"outV":1740}
{"id":1744,"type":"edge","label":"textDocument/definition","inV":1740,"outV":18}
{"id":1745,"type":"vertex","label":"referenceResult"}
{"id":1746,"type":"edge","label":"textDocument/references","inV":1745,"outV":18}
{"id":1747,"type":"edge","label":"item","document":1,"property":"references","inVs":[17],"outV":1745}
{"id":1748,"type":"edge","label":"item","document":1369,"property":"references","inVs":[1388],"outV":1745}
{"id":1749,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar\n```\n\n```rust\nmod game_test\n```"}}}
{"id":1750,"type":"edge","label":"textDocument/hover","inV":1749,"outV":23}
{"id":1751,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::game_test","unique":"scheme","kind":"export"}
{"id":1752,"type":"edge","label":"packageInformation","inV":1709,"outV":1751}
{"id":1753,"type":"edge","label":"moniker","inV":1751,"outV":23}
{"id":1754,"type":"vertex","label":"definitionResult"}
{"id":1755,"type":"vertex","label":"range","start":{"line":0,"character":0},"end":{"line":120,"character":0}}
{"id":1756,"type":"edge","label":"contains","inVs":[1755],"outV":108}
{"id":1757,"type":"edge","label":"item","document":108,"inVs":[1755],"outV":1754}
{"id":1758,"type":"edge","label":"textDocument/definition","inV":1754,"outV":23}
{"id":1759,"type":"vertex","label":"referenceResult"}
{"id":1760,"type":"edge","label":"textDocument/references","inV":1759,"outV":23}
{"id":1761,"type":"edge","label":"item","document":1,"property":"references","inVs":[22],"outV":1759}
{"id":1762,"type":"edge","label":"item","document":108,"property":"references","inVs":[139],"outV":1759}
{"id":1763,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nextern crate rust_racingcar\n```"}}}
{"id":1764,"type":"edge","label":"textDocument/hover","inV":1763,"outV":26}
{"id":1765,"type":"vertex","label":"definitionResult"}
{"id":1766,"type":"vertex","label":"range","start":{"line":0,"character":0},"end":{"line":25,"character":0}}
{"id":1767,"type":"edge","label":"contains","inVs":[1766],"outV":1}
{"id":1768,"type":"edge","label":"item","document":1,"inVs":[1766],"outV":1765}
{"id":1769,"type":"edge","label":"textDocument/definition","inV":1765,"outV":26}
{"id":1770,"type":"vertex","label":"referenceResult"}
{"id":1771,"type":"edge","label":"textDocument/references","inV":1770,"outV":26}
{"id":1772,"type":"edge","label":"item","document":1,"property":"references","inVs":[25],"outV":1770}
{"id":1773,"type":"edge","label":"item","document":108,"property":"references","inVs":[127,137,141,150],"outV":1770}
{"id":1774,"type":"edge","label":"item","document":560,"property":"references","inVs":[565,593],"outV":1770}
{"id":1775,"type":"edge","label":"item","document":945,"property":"references","inVs":[950,965,972],"outV":1770}
{"id":1776,"type":"edge","label":"item","document":1369,"property":"references","inVs":[1386],"outV":1770}
{"id":1777,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::game\n```\n\n```rust\npub trait GameFn\n```"}}}
{"id":1778,"type":"edge","label":"textDocument/hover","inV":1777,"outV":31}
{"id":1779,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::game::GameFn","unique":"scheme","kind":"export"}
{"id":1780,"type":"edge","label":"packageInformation","inV":1709,"outV":1779}
{"id":1781,"type":"edge","label":"moniker","inV":1779,"outV":31}
{"id":1782,"type":"vertex","label":"definitionResult"}
{"id":1783,"type":"edge","label":"item","document":560,"inVs":[607],"outV":1782}
{"id":1784,"type":"edge","label":"textDocument/definition","inV":1782,"outV":31}
{"id":1785,"type":"vertex","label":"referenceResult"}
{"id":1786,"type":"edge","label":"textDocument/references","inV":1785,"outV":31}
{"id":1787,"type":"edge","label":"item","document":1,"property":"references","inVs":[30,96],"outV":1785}
{"id":1788,"type":"edge","label":"item","document":108,"property":"references","inVs":[145],"outV":1785}
{"id":1789,"type":"edge","label":"item","document":560,"property":"definitions","inVs":[607],"outV":1785}
{"id":1790,"type":"edge","label":"item","document":560,"property":"references","inVs":[699],"outV":1785}
{"id":1791,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar\n```\n\n```rust\nfn main()\n```"}}}
{"id":1792,"type":"edge","label":"textDocument/hover","inV":1791,"outV":34}
{"id":1793,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::main","unique":"scheme","kind":"export"}
{"id":1794,"type":"edge","label":"packageInformation","inV":1709,"outV":1793}
{"id":1795,"type":"edge","label":"moniker","inV":1793,"outV":34}
{"id":1796,"type":"vertex","label":"definitionResult"}
{"id":1797,"type":"edge","label":"item","document":1,"inVs":[33],"outV":1796}
{"id":1798,"type":"edge","label":"textDocument/definition","inV":1796,"outV":34}
{"id":1799,"type":"vertex","label":"referenceResult"}
{"id":1800,"type":"edge","label":"textDocument/references","inV":1799,"outV":34}
{"id":1801,"type":"edge","label":"item","document":1,"property":"definitions","inVs":[33],"outV":1799}
{"id":1802,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nstd::macros\n```\n\n```rust\nmacro_rules! println\n```\n\n---\n\nPrints to the standard output, with a newline.\n\nOn all platforms, the newline is the LINE FEED character (`\\n`/`U+000A`) alone\n(no additional CARRIAGE RETURN (`\\r`/`U+000D`)).\n\nThis macro uses the same syntax as [`format`](https://doc.rust-lang.org/stable/alloc/macros/macro.format.html), but writes to the standard output instead.\nSee [`std::fmt`] for more information.\n\nThe `println!` macro will lock the standard output on each call. If you call\n`println!` within a hot loop, this behavior may be the bottleneck of the loop.\nTo avoid this, lock stdout with [`io::stdout().lock`](https://doc.rust-lang.org/stable/std/io/stdio/struct.Stdout.html):\n\n```rust\nuse std::io::{stdout, Write};\n\nlet mut lock = stdout().lock();\nwriteln!(lock, \"hello world\").unwrap();\n```\n\nUse `println!` only for the primary output of your program. Use\n[`eprintln`] instead to print error and progress messages.\n\nSee [the formatting documentation in `std::fmt`](https://doc.rust-lang.org/stable/std/std/fmt/index.html)\nfor details of the macro argument syntax.\n\n# Panics\n\nPanics if writing to [`io::stdout`] fails.\n\nWriting to non-blocking stdout can cause an error, which will lead\nthis macro to panic.\n\n# Examples\n\n```rust\nprintln!(); // prints just a newline\nprintln!(\"hello there!\");\nprintln!(\"format {} arguments\", \"some\");\nlet local_variable = \"some\";\nprintln!(\"format {local_variable} arguments\");\n```"}}}
{"id":1803,"type":"edge","label":"textDocument/hover","inV":1802,"outV":37}
{"id":1804,"type":"vertex","label":"packageInformation","name":"std","manager":"cargo","repository":{"type":"git","url":"https://github.com/rust-lang/rust/"},"version":"https://github.com/rust-lang/rust/library/std"}
{"id":1805,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"std::macros::println","unique":"scheme","kind":"import"}
{"id":1806,"type":"edge","label":"packageInformation","inV":1804,"outV":1805}
{"id":1807,"type":"edge","label":"moniker","inV":1805,"outV":37}
{"id":1808,"type":"vertex","label":"definitionResult"}
{"id":1809,"type":"vertex","label":"document","uri":"file:///opt/homebrew/Cellar/rust/1.81.0/lib/rustlib/src/rust/library/std/src/macros.rs","languageId":"rust"}
{"id":1810,"type":"vertex","label":"range","start":{"line":137,"character":13},"end":{"line":137,"character":20}}
{"id":1811,"type":"edge","label":"contains","inVs":[1810],"outV":1809}
{"id":1812,"type":"edge","label":"item","document":1809,"inVs":[1810],"outV":1808}
{"id":1813,"type":"edge","label":"textDocument/definition","inV":1808,"outV":37}
{"id":1814,"type":"vertex","label":"referenceResult"}
{"id":1815,"type":"edge","label":"textDocument/references","inV":1814,"outV":37}
{"id":1816,"type":"edge","label":"item","document":1,"property":"references","inVs":[36,39,52,56,67,71,87],"outV":1814}
{"id":1817,"type":"edge","label":"item","document":108,"property":"references","inVs":[235],"outV":1814}
{"id":1818,"type":"edge","label":"item","document":560,"property":"references","inVs":[827],"outV":1814}
{"id":1819,"type":"edge","label":"item","document":945,"property":"references","inVs":[1086,1101,1130],"outV":1814}
{"id":1820,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nlet the_number_of_cars: i32\n```"}}}
{"id":1821,"type":"edge","label":"textDocument/hover","inV":1820,"outV":42}
{"id":1822,"type":"vertex","label":"definitionResult"}
{"id":1823,"type":"edge","label":"item","document":1,"inVs":[41],"outV":1822}
{"id":1824,"type":"edge","label":"textDocument/definition","inV":1822,"outV":42}
{"id":1825,"type":"vertex","label":"referenceResult"}
{"id":1826,"type":"edge","label":"textDocument/references","inV":1825,"outV":42}
{"id":1827,"type":"edge","label":"item","document":1,"property":"definitions","inVs":[41],"outV":1825}
{"id":1828,"type":"edge","label":"item","document":1,"property":"references","inVs":[54,103],"outV":1825}
{"id":1829,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\ni32\n```\n\n---\n\nThe 32-bit signed integer type."}}}
{"id":1830,"type":"edge","label":"textDocument/hover","inV":1829,"outV":45}
{"id":1831,"type":"vertex","label":"referenceResult"}
{"id":1832,"type":"edge","label":"textDocument/references","inV":1831,"outV":45}
{"id":1833,"type":"edge","label":"item","document":1,"property":"references","inVs":[44,61],"outV":1831}
{"id":1834,"type":"edge","label":"item","document":560,"property":"references","inVs":[586,591,621,626,646,666,674,715,720,809,849,860],"outV":1831}
{"id":1835,"type":"edge","label":"item","document":945,"property":"references","inVs":[995,1054,1113],"outV":1831}
{"id":1836,"type":"edge","label":"item","document":1153,"property":"references","inVs":[1179,1183,1192,1215,1244,1272,1286,1296,1318,1330],"outV":1831}
{"id":1837,"type":"edge","label":"item","document":1590,"property":"references","inVs":[1599,1624],"outV":1831}
{"id":1838,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::input\n```\n\n```rust\npub fn input_integer() -> i32\n```"}}}
{"id":1839,"type":"edge","label":"textDocument/hover","inV":1838,"outV":50}
{"id":1840,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::input::input_integer","unique":"scheme","kind":"export"}
{"id":1841,"type":"edge","label":"packageInformation","inV":1709,"outV":1840}
{"id":1842,"type":"edge","label":"moniker","inV":1840,"outV":50}
{"id":1843,"type":"vertex","label":"definitionResult"}
{"id":1844,"type":"edge","label":"item","document":1590,"inVs":[1597],"outV":1843}
{"id":1845,"type":"edge","label":"textDocument/definition","inV":1843,"outV":50}
{"id":1846,"type":"vertex","label":"referenceResult"}
{"id":1847,"type":"edge","label":"textDocument/references","inV":1846,"outV":50}
{"id":1848,"type":"edge","label":"item","document":1,"property":"references","inVs":[49,65],"outV":1846}
{"id":1849,"type":"edge","label":"item","document":1590,"property":"definitions","inVs":[1597],"outV":1846}
{"id":1850,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nlet the_number_of_attempts: i32\n```"}}}
{"id":1851,"type":"edge","label":"textDocument/hover","inV":1850,"outV":59}
{"id":1852,"type":"vertex","label":"definitionResult"}
{"id":1853,"type":"edge","label":"item","document":1,"inVs":[58],"outV":1852}
{"id":1854,"type":"edge","label":"textDocument/definition","inV":1852,"outV":59}
{"id":1855,"type":"vertex","label":"referenceResult"}
{"id":1856,"type":"edge","label":"textDocument/references","inV":1855,"outV":59}
{"id":1857,"type":"edge","label":"item","document":1,"property":"definitions","inVs":[58],"outV":1855}
{"id":1858,"type":"edge","label":"item","document":1,"property":"references","inVs":[69,105],"outV":1855}
{"id":1859,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nlet player_names: Vec<String>\n```"}}}
{"id":1860,"type":"edge","label":"textDocument/hover","inV":1859,"outV":74}
{"id":1861,"type":"vertex","label":"definitionResult"}
{"id":1862,"type":"edge","label":"item","document":1,"inVs":[73],"outV":1861}
{"id":1863,"type":"edge","label":"textDocument/definition","inV":1861,"outV":74}
{"id":1864,"type":"vertex","label":"referenceResult"}
{"id":1865,"type":"edge","label":"textDocument/references","inV":1864,"outV":74}
{"id":1866,"type":"edge","label":"item","document":1,"property":"definitions","inVs":[73],"outV":1864}
{"id":1867,"type":"edge","label":"item","document":1,"property":"references","inVs":[89,101],"outV":1864}
{"id":1868,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nalloc::vec\n```\n\n```rust\npub struct Vec<T, A = Global>\nwhere\n    A: Allocator,\n{\n    buf: RawVec<T, A>,\n    len: usize,\n}\n```\n\n---\n\nA contiguous growable array type, written as `Vec<T>`, short for 'vector'.\n\n# Examples\n\n```rust\nlet mut vec = Vec::new();\nvec.push(1);\nvec.push(2);\n\nassert_eq!(vec.len(), 2);\nassert_eq!(vec[0], 1);\n\nassert_eq!(vec.pop(), Some(2));\nassert_eq!(vec.len(), 1);\n\nvec[0] = 7;\nassert_eq!(vec[0], 7);\n\nvec.extend([1, 2, 3]);\n\nfor x in &vec {\n    println!(\"{x}\");\n}\nassert_eq!(vec, [7, 1, 2, 3]);\n```\n\nThe [`vec`](https://doc.rust-lang.org/stable/alloc/macros/macro.vec.html) macro is provided for convenient initialization:\n\n```rust\nlet mut vec1 = vec![1, 2, 3];\nvec1.push(4);\nlet vec2 = Vec::from([1, 2, 3, 4]);\nassert_eq!(vec1, vec2);\n```\n\nIt can also initialize each element of a `Vec<T>` with a given value.\nThis may be more efficient than performing allocation and initialization\nin separate steps, especially when initializing a vector of zeros:\n\n```rust\nlet vec = vec![0; 5];\nassert_eq!(vec, [0, 0, 0, 0, 0]);\n\n// The following is equivalent, but potentially slower:\nlet mut vec = Vec::with_capacity(5);\nvec.resize(5, 0);\nassert_eq!(vec, [0, 0, 0, 0, 0]);\n```\n\nFor more information, see\n[Capacity and Reallocation](https://doc.rust-lang.org/stable/alloc/vec/struct.Vec.html#capacity-and-reallocation).\n\nUse a `Vec<T>` as an efficient stack:\n\n```rust\nlet mut stack = Vec::new();\n\nstack.push(1);\nstack.push(2);\nstack.push(3);\n\nwhile let Some(top) = stack.pop() {\n    // Prints 3, 2, 1\n    println!(\"{top}\");\n}\n```\n\n# Indexing\n\nThe `Vec` type allows access to values by index, because it implements the\n[`Index`](https://doc.rust-lang.org/stable/core/ops/index/trait.Index.html) trait. An example will be more explicit:\n\n```rust\nlet v = vec![0, 2, 4, 6];\nprintln!(\"{}\", v[1]); // it will display '2'\n```\n\nHowever be careful: if you try to access an index which isn't in the `Vec`,\nyour software will panic! You cannot do this:\n\n```rust\nlet v = vec![0, 2, 4, 6];\nprintln!(\"{}\", v[6]); // it will panic!\n```\n\nUse [`get`] and [`get_mut`] if you want to check whether the index is in\nthe `Vec`.\n\n# Slicing\n\nA `Vec` can be mutable. On the other hand, slices are read-only objects.\nTo get a [slice](https://doc.rust-lang.org/stable/core/slice/index.html), use [`&`](`&`). Example:\n\n```rust\nfn read_slice(slice: &[usize]) {\n    // ...\n}\n\nlet v = vec![0, 1];\nread_slice(&v);\n\n// ... and that's all!\n// you can also do it like this:\nlet u: &[usize] = &v;\n// or like this:\nlet u: &[_] = &v;\n```\n\nIn Rust, it's more common to pass slices as arguments rather than vectors\nwhen you just want to provide read access. The same goes for [`String`] and\n[`&str`].\n\n# Capacity and reallocation\n\nThe capacity of a vector is the amount of space allocated for any future\nelements that will be added onto the vector. This is not to be confused with\nthe *length* of a vector, which specifies the number of actual elements\nwithin the vector. If a vector's length exceeds its capacity, its capacity\nwill automatically be increased, but its elements will have to be\nreallocated.\n\nFor example, a vector with capacity 10 and length 0 would be an empty vector\nwith space for 10 more elements. Pushing 10 or fewer elements onto the\nvector will not change its capacity or cause reallocation to occur. However,\nif the vector's length is increased to 11, it will have to reallocate, which\ncan be slow. For this reason, it is recommended to use [`Vec::with_capacity`](https://doc.rust-lang.org/stable/alloc/vec/struct.Vec.html)\nwhenever possible to specify how big the vector is expected to get.\n\n# Guarantees\n\nDue to its incredibly fundamental nature, `Vec` makes a lot of guarantees\nabout its design. This ensures that it's as low-overhead as possible in\nthe general case, and can be correctly manipulated in primitive ways\nby unsafe code. Note that these guarantees refer to an unqualified `Vec<T>`.\nIf additional type parameters are added (e.g., to support custom allocators),\noverriding their defaults may change the behavior.\n\nMost fundamentally, `Vec` is and always will be a (pointer, capacity, length)\ntriplet. No more, no less. The order of these fields is completely\nunspecified, and you should use the appropriate methods to modify these.\nThe pointer will never be null, so this type is null-pointer-optimized.\n\nHowever, the pointer might not actually point to allocated memory. In particular,\nif you construct a `Vec` with capacity 0 via [`Vec::new`](https://doc.rust-lang.org/stable/alloc/vec/struct.Vec.html), [`vec![]`](https://doc.rust-lang.org/stable/alloc/macros/macro.vec.html),\n[`Vec::with_capacity(0)`](https://doc.rust-lang.org/stable/alloc/vec/struct.Vec.html), or by calling [`shrink_to_fit`]\non an empty Vec, it will not allocate memory. Similarly, if you store zero-sized\ntypes inside a `Vec`, it will not allocate space for them. *Note that in this case\nthe `Vec` might not report a [`capacity`] of 0*. `Vec` will allocate if and only\nif <code>\n[mem::size_of::\\<T>](https://doc.rust-lang.org/stable/core/mem/fn.size_of.html)() * [capacity]() > 0</code>. In general, `Vec`'s allocation\ndetails are very subtle --- if you intend to allocate memory using a `Vec`\nand use it for something else (either to pass to unsafe code, or to build your\nown memory-backed collection), be sure to deallocate this memory by using\n`from_raw_parts` to recover the `Vec` and then dropping it.\n\nIf a `Vec` *has* allocated memory, then the memory it points to is on the heap\n(as defined by the allocator Rust is configured to use by default), and its\npointer points to [`len`] initialized, contiguous elements in order (what\nyou would see if you coerced it to a slice), followed by <code>\n[capacity] - [len]</code>\nlogically uninitialized, contiguous elements.\n\nA vector containing the elements `'a'` and `'b'` with capacity 4 can be\nvisualized as below. The top part is the `Vec` struct, it contains a\npointer to the head of the allocation in the heap, length and capacity.\nThe bottom part is the allocation on the heap, a contiguous memory block.\n\n```text\n            ptr      len  capacity\n       +--------+--------+--------+\n       | 0x0123 |      2 |      4 |\n       +--------+--------+--------+\n            |\n            v\nHeap   +--------+--------+--------+--------+\n       |    'a' |    'b' | uninit | uninit |\n       +--------+--------+--------+--------+\n```\n\n* **uninit** represents memory that is not initialized, see [`MaybeUninit`].\n* Note: the ABI is not stable and `Vec` makes no guarantees about its memory\n  layout (including the order of fields).\n\n`Vec` will never perform a \"small optimization\" where elements are actually\nstored on the stack for two reasons:\n\n* It would make it more difficult for unsafe code to correctly manipulate\n  a `Vec`. The contents of a `Vec` wouldn't have a stable address if it were\n  only moved, and it would be more difficult to determine if a `Vec` had\n  actually allocated memory.\n\n* It would penalize the general case, incurring an additional branch\n  on every access.\n\n`Vec` will never automatically shrink itself, even if completely empty. This\nensures no unnecessary allocations or deallocations occur. Emptying a `Vec`\nand then filling it back up to the same [`len`] should incur no calls to\nthe allocator. If you wish to free up unused memory, use\n[`shrink_to_fit`] or [`shrink_to`].\n\n[`push`] and [`insert`] will never (re)allocate if the reported capacity is\nsufficient. [`push`] and [`insert`] *will* (re)allocate if\n<code>\n[len] == [capacity]</code>. That is, the reported capacity is completely\naccurate, and can be relied on. It can even be used to manually free the memory\nallocated by a `Vec` if desired. Bulk insertion methods *may* reallocate, even\nwhen not necessary.\n\n`Vec` does not guarantee any particular growth strategy when reallocating\nwhen full, nor when [`reserve`] is called. The current strategy is basic\nand it may prove desirable to use a non-constant growth factor. Whatever\nstrategy is used will of course guarantee *O*(1) amortized [`push`].\n\n`vec![x; n]`, `vec![a, b, c, d]`, and\n[`Vec::with_capacity(n)`](https://doc.rust-lang.org/stable/alloc/vec/struct.Vec.html), will all produce a `Vec`\nwith at least the requested capacity. If <code>\n[len] == [capacity]</code>,\n(as is the case for the [`vec`](https://doc.rust-lang.org/stable/alloc/macros/macro.vec.html) macro), then a `Vec<T>` can be converted to\nand from a [`Box<[T]>`](https://doc.rust-lang.org/stable/alloc/boxed/struct.Box.html) without reallocating or moving the elements.\n\n`Vec` will not specifically overwrite any data that is removed from it,\nbut also won't specifically preserve it. Its uninitialized memory is\nscratch space that it may use however it wants. It will generally just do\nwhatever is most efficient or otherwise easy to implement. Do not rely on\nremoved data to be erased for security purposes. Even if you drop a `Vec`, its\nbuffer may simply be reused by another allocation. Even if you zero a `Vec`'s memory\nfirst, that might not actually happen because the optimizer does not consider\nthis a side-effect that must be preserved. There is one case which we will\nnot break, however: using `unsafe` code to write to the excess capacity,\nand then increasing the length to match, is always valid.\n\nCurrently, `Vec` does not guarantee the order in which elements are dropped.\nThe order has changed in the past and may change again."}}}
{"id":1869,"type":"edge","label":"textDocument/hover","inV":1868,"outV":77}
{"id":1870,"type":"vertex","label":"packageInformation","name":"alloc","manager":"cargo","repository":{"type":"git","url":"https://github.com/rust-lang/rust/"},"version":"https://github.com/rust-lang/rust/library/alloc"}
{"id":1871,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"alloc::vec::Vec","unique":"scheme","kind":"import"}
{"id":1872,"type":"edge","label":"packageInformation","inV":1870,"outV":1871}
{"id":1873,"type":"edge","label":"moniker","inV":1871,"outV":77}
{"id":1874,"type":"vertex","label":"definitionResult"}
{"id":1875,"type":"vertex","label":"document","uri":"file:///opt/homebrew/Cellar/rust/1.81.0/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs","languageId":"rust"}
{"id":1876,"type":"vertex","label":"range","start":{"line":397,"character":11},"end":{"line":397,"character":14}}
{"id":1877,"type":"edge","label":"contains","inVs":[1876],"outV":1875}
{"id":1878,"type":"edge","label":"item","document":1875,"inVs":[1876],"outV":1874}
{"id":1879,"type":"edge","label":"textDocument/definition","inV":1874,"outV":77}
{"id":1880,"type":"vertex","label":"referenceResult"}
{"id":1881,"type":"edge","label":"textDocument/references","inV":1880,"outV":77}
{"id":1882,"type":"edge","label":"item","document":1,"property":"references","inVs":[76],"outV":1880}
{"id":1883,"type":"edge","label":"item","document":108,"property":"references","inVs":[290],"outV":1880}
{"id":1884,"type":"edge","label":"item","document":560,"property":"references","inVs":[598,614,654,685,708,732,834,874],"outV":1880}
{"id":1885,"type":"edge","label":"item","document":945,"property":"references","inVs":[977,1004,1071],"outV":1880}
{"id":1886,"type":"edge","label":"item","document":1590,"property":"references","inVs":[1640],"outV":1880}
{"id":1887,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nalloc::string\n```\n\n```rust\npub struct String {\n    vec: Vec<u8>,\n}\n```\n\n---\n\nA UTF-8–encoded, growable string.\n\n`String` is the most common string type. It has ownership over the contents\nof the string, stored in a heap-allocated buffer (see [Representation](https://doc.rust-lang.org/stable/alloc/string/struct.String.html#representation)).\nIt is closely related to its borrowed counterpart, the primitive [`str`].\n\n# Examples\n\nYou can create a `String` from [a literal string](https://doc.rust-lang.org/stable/alloc/str/index.html) with [`String::from`]:\n\n```rust\nlet hello = String::from(\"Hello, world!\");\n```\n\nYou can append a [`char`](https://doc.rust-lang.org/nightly/core/primitive.char.html) to a `String` with the [`push`] method, and\nappend a [`&str`] with the [`push_str`] method:\n\n```rust\nlet mut hello = String::from(\"Hello, \");\n\nhello.push('w');\nhello.push_str(\"orld!\");\n```\n\nIf you have a vector of UTF-8 bytes, you can create a `String` from it with\nthe [`from_utf8`] method:\n\n```rust\n// some bytes, in a vector\nlet sparkle_heart = vec![240, 159, 146, 150];\n\n// We know these bytes are valid, so we'll use `unwrap()`.\nlet sparkle_heart = String::from_utf8(sparkle_heart).unwrap();\n\nassert_eq!(\"💖\", sparkle_heart);\n```\n\n# UTF-8\n\n`String`s are always valid UTF-8. If you need a non-UTF-8 string, consider\n[`OsString`](https://doc.rust-lang.org/stable/std/ffi/struct.OsString.html). It is similar, but without the UTF-8 constraint. Because UTF-8\nis a variable width encoding, `String`s are typically smaller than an array of\nthe same `chars`:\n\n```rust\nuse std::mem;\n\n// `s` is ASCII which represents each `char` as one byte\nlet s = \"hello\";\nassert_eq!(s.len(), 5);\n\n// A `char` array with the same contents would be longer because\n// every `char` is four bytes\nlet s = ['h', 'e', 'l', 'l', 'o'];\nlet size: usize = s.into_iter().map(|c| mem::size_of_val(&c)).sum();\nassert_eq!(size, 20);\n\n// However, for non-ASCII strings, the difference will be smaller\n// and sometimes they are the same\nlet s = \"💖💖💖💖💖\";\nassert_eq!(s.len(), 20);\n\nlet s = ['💖', '💖', '💖', '💖', '💖'];\nlet size: usize = s.into_iter().map(|c| mem::size_of_val(&c)).sum();\nassert_eq!(size, 20);\n```\n\nThis raises interesting questions as to how `s[i]` should work.\nWhat should `i` be here? Several options include byte indices and\n`char` indices but, because of UTF-8 encoding, only byte indices\nwould provide constant time indexing. Getting the `i`th `char`, for\nexample, is available using [`chars`]:\n\n```rust\nlet s = \"hello\";\nlet third_character = s.chars().nth(2);\nassert_eq!(third_character, Some('l'));\n\nlet s = \"💖💖💖💖💖\";\nlet third_character = s.chars().nth(2);\nassert_eq!(third_character, Some('💖'));\n```\n\nNext, what should `s[i]` return? Because indexing returns a reference\nto underlying data it could be `&u8`, `&[u8]`, or something else similar.\nSince we're only providing one index, `&u8` makes the most sense but that\nmight not be what the user expects and can be explicitly achieved with\n[`as_bytes()`]:\n\n```rust\n// The first byte is 104 - the byte value of `'h'`\nlet s = \"hello\";\nassert_eq!(s.as_bytes()[0], 104);\n// or\nassert_eq!(s.as_bytes()[0], b'h');\n\n// The first byte is 240 which isn't obviously useful\nlet s = \"💖💖💖💖💖\";\nassert_eq!(s.as_bytes()[0], 240);\n```\n\nDue to these ambiguities/restrictions, indexing with a `usize` is simply\nforbidden:\n\n```rust\nlet s = \"hello\";\n\n// The following will not compile!\nprintln!(\"The first letter of s is {}\", s[0]);\n```\n\nIt is more clear, however, how `&s[i..j]` should work (that is,\nindexing with a range). It should accept byte indices (to be constant-time)\nand return a `&str` which is UTF-8 encoded. This is also called \"string slicing\".\nNote this will panic if the byte indices provided are not character\nboundaries - see [`is_char_boundary`] for more details. See the implementations\nfor [`SliceIndex<str>`] for more details on string slicing. For a non-panicking\nversion of string slicing, see [`get`].\n\nThe [`bytes`] and [`chars`] methods return iterators over the bytes and\ncodepoints of the string, respectively. To iterate over codepoints along\nwith byte indices, use [`char_indices`].\n\n# Deref\n\n`String` implements <code>\n[Deref]\\<Target = [str]\\></code>, and so inherits all of [`str`]'s\nmethods. In addition, this means that you can pass a `String` to a\nfunction which takes a [`&str`] by using an ampersand (`&`):\n\n```rust\nfn takes_str(s: &str) { }\n\nlet s = String::from(\"Hello\");\n\ntakes_str(&s);\n```\n\nThis will create a [`&str`] from the `String` and pass it in. This\nconversion is very inexpensive, and so generally, functions will accept\n[`&str`]s as arguments unless they need a `String` for some specific\nreason.\n\nIn certain cases Rust doesn't have enough information to make this\nconversion, known as [`Deref`] coercion. In the following example a string\nslice [`&'a str`](https://doc.rust-lang.org/stable/alloc/str/index.html) implements the trait `TraitExample`, and the function\n`example_func` takes anything that implements the trait. In this case Rust\nwould need to make two implicit conversions, which Rust doesn't have the\nmeans to do. For that reason, the following example will not compile.\n\n```rust\ntrait TraitExample {}\n\nimpl<'a> TraitExample for &'a str {}\n\nfn example_func<A: TraitExample>(example_arg: A) {}\n\nlet example_string = String::from(\"example_string\");\nexample_func(&example_string);\n```\n\nThere are two options that would work instead. The first would be to\nchange the line `example_func(&example_string);` to\n`example_func(example_string.as_str());`, using the method [`as_str`]\nto explicitly extract the string slice containing the string. The second\nway changes `example_func(&example_string);` to\n`example_func(&*example_string);`. In this case we are dereferencing a\n`String` to a [`str`], then referencing the [`str`] back to\n[`&str`]. The second way is more idiomatic, however both work to do the\nconversion explicitly rather than relying on the implicit conversion.\n\n# Representation\n\nA `String` is made up of three components: a pointer to some bytes, a\nlength, and a capacity. The pointer points to the internal buffer which `String`\nuses to store its data. The length is the number of bytes currently stored\nin the buffer, and the capacity is the size of the buffer in bytes. As such,\nthe length will always be less than or equal to the capacity.\n\nThis buffer is always stored on the heap.\n\nYou can look at these with the [`as_ptr`], [`len`], and [`capacity`]\nmethods:\n\n```rust\nuse std::mem;\n\nlet story = String::from(\"Once upon a time...\");\n\n// Prevent automatically dropping the String's data\nlet mut story = mem::ManuallyDrop::new(story);\n\nlet ptr = story.as_mut_ptr();\nlet len = story.len();\nlet capacity = story.capacity();\n\n// story has nineteen bytes\nassert_eq!(19, len);\n\n// We can re-build a String out of ptr, len, and capacity. This is all\n// unsafe because we are responsible for making sure the components are\n// valid:\nlet s = unsafe { String::from_raw_parts(ptr, len, capacity) } ;\n\nassert_eq!(String::from(\"Once upon a time...\"), s);\n```\n\nIf a `String` has enough capacity, adding elements to it will not\nre-allocate. For example, consider this program:\n\n```rust\nlet mut s = String::new();\n\nprintln!(\"{}\", s.capacity());\n\nfor _ in 0..5 {\n    s.push_str(\"hello\");\n    println!(\"{}\", s.capacity());\n}\n```\n\nThis will output the following:\n\n```text\n0\n8\n16\n16\n32\n32\n```\n\nAt first, we have no memory allocated at all, but as we append to the\nstring, it increases its capacity appropriately. If we instead use the\n[`with_capacity`] method to allocate the correct capacity initially:\n\n```rust\nlet mut s = String::with_capacity(25);\n\nprintln!(\"{}\", s.capacity());\n\nfor _ in 0..5 {\n    s.push_str(\"hello\");\n    println!(\"{}\", s.capacity());\n}\n```\n\nWe end up with a different output:\n\n```text\n25\n25\n25\n25\n25\n25\n```\n\nHere, there's no need to allocate more memory inside the loop."}}}
{"id":1888,"type":"edge","label":"textDocument/hover","inV":1887,"outV":80}
{"id":1889,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"alloc::string::String","unique":"scheme","kind":"import"}
{"id":1890,"type":"edge","label":"packageInformation","inV":1870,"outV":1889}
{"id":1891,"type":"edge","label":"moniker","inV":1889,"outV":80}
{"id":1892,"type":"vertex","label":"definitionResult"}
{"id":1893,"type":"vertex","label":"document","uri":"file:///opt/homebrew/Cellar/rust/1.81.0/lib/rustlib/src/rust/library/alloc/src/string.rs","languageId":"rust"}
{"id":1894,"type":"vertex","label":"range","start":{"line":364,"character":11},"end":{"line":364,"character":17}}
{"id":1895,"type":"edge","label":"contains","inVs":[1894],"outV":1893}
{"id":1896,"type":"edge","label":"item","document":1893,"inVs":[1894],"outV":1892}
{"id":1897,"type":"edge","label":"textDocument/definition","inV":1892,"outV":80}
{"id":1898,"type":"vertex","label":"referenceResult"}
{"id":1899,"type":"edge","label":"textDocument/references","inV":1898,"outV":80}
{"id":1900,"type":"edge","label":"item","document":1,"property":"references","inVs":[79],"outV":1898}
{"id":1901,"type":"edge","label":"item","document":560,"property":"references","inVs":[616,687,710,876],"outV":1898}
{"id":1902,"type":"edge","label":"item","document":945,"property":"references","inVs":[970,990,1144],"outV":1898}
{"id":1903,"type":"edge","label":"item","document":1369,"property":"references","inVs":[1406,1424,1438,1459,1503,1550],"outV":1898}
{"id":1904,"type":"edge","label":"item","document":1590,"property":"references","inVs":[1604,1642,1647,1664],"outV":1898}
{"id":1905,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::input\n```\n\n```rust\npub fn input_names() -> Vec<String>\n```"}}}
{"id":1906,"type":"edge","label":"textDocument/hover","inV":1905,"outV":85}
{"id":1907,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::input::input_names","unique":"scheme","kind":"export"}
{"id":1908,"type":"edge","label":"packageInformation","inV":1709,"outV":1907}
{"id":1909,"type":"edge","label":"moniker","inV":1907,"outV":85}
{"id":1910,"type":"vertex","label":"definitionResult"}
{"id":1911,"type":"edge","label":"item","document":1590,"inVs":[1638],"outV":1910}
{"id":1912,"type":"edge","label":"textDocument/definition","inV":1910,"outV":85}
{"id":1913,"type":"vertex","label":"referenceResult"}
{"id":1914,"type":"edge","label":"textDocument/references","inV":1913,"outV":85}
{"id":1915,"type":"edge","label":"item","document":1,"property":"references","inVs":[84],"outV":1913}
{"id":1916,"type":"edge","label":"item","document":1590,"property":"definitions","inVs":[1638],"outV":1913}
{"id":1917,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::game\n```\n\n```rust\npub struct Game {\n    pub number_of_players: i32,\n    pub number_of_attempts: i32,\n    pub(crate) players: Vec<Player>,\n}\n```"}}}
{"id":1918,"type":"edge","label":"textDocument/hover","inV":1917,"outV":94}
{"id":1919,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::game::Game","unique":"scheme","kind":"export"}
{"id":1920,"type":"edge","label":"packageInformation","inV":1709,"outV":1919}
{"id":1921,"type":"edge","label":"moniker","inV":1919,"outV":94}
{"id":1922,"type":"vertex","label":"definitionResult"}
{"id":1923,"type":"edge","label":"item","document":560,"inVs":[581],"outV":1922}
{"id":1924,"type":"edge","label":"textDocument/definition","inV":1922,"outV":94}
{"id":1925,"type":"vertex","label":"referenceResult"}
{"id":1926,"type":"edge","label":"textDocument/references","inV":1925,"outV":94}
{"id":1927,"type":"edge","label":"item","document":1,"property":"references","inVs":[93],"outV":1925}
{"id":1928,"type":"edge","label":"item","document":108,"property":"references","inVs":[131,133,135,176,210],"outV":1925}
{"id":1929,"type":"edge","label":"item","document":560,"property":"definitions","inVs":[581],"outV":1925}
{"id":1930,"type":"edge","label":"item","document":560,"property":"references","inVs":[701],"outV":1925}
{"id":1931,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::game::Game\n```\n\n```rust\nfn new(name_of_players: Vec<String>, number_of_players: i32, number_of_attempts: i32) -> Self\n```"}}}
{"id":1932,"type":"edge","label":"textDocument/hover","inV":1931,"outV":99}
{"id":1933,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::game::Game::GameFn::new","unique":"scheme","kind":"export"}
{"id":1934,"type":"edge","label":"packageInformation","inV":1709,"outV":1933}
{"id":1935,"type":"edge","label":"moniker","inV":1933,"outV":99}
{"id":1936,"type":"vertex","label":"definitionResult"}
{"id":1937,"type":"edge","label":"item","document":560,"inVs":[703],"outV":1936}
{"id":1938,"type":"edge","label":"textDocument/definition","inV":1936,"outV":99}
{"id":1939,"type":"vertex","label":"referenceResult"}
{"id":1940,"type":"edge","label":"textDocument/references","inV":1939,"outV":99}
{"id":1941,"type":"edge","label":"item","document":1,"property":"references","inVs":[98],"outV":1939}
{"id":1942,"type":"edge","label":"item","document":108,"property":"references","inVs":[212],"outV":1939}
{"id":1943,"type":"edge","label":"item","document":560,"property":"definitions","inVs":[703],"outV":1939}
{"id":1944,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::game_test\n```\n\n```rust\nmod game\n```"}}}
{"id":1945,"type":"edge","label":"textDocument/hover","inV":1944,"outV":114}
{"id":1946,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::game_test::game","unique":"scheme","kind":"export"}
{"id":1947,"type":"edge","label":"packageInformation","inV":1709,"outV":1946}
{"id":1948,"type":"edge","label":"moniker","inV":1946,"outV":114}
{"id":1949,"type":"vertex","label":"definitionResult"}
{"id":1950,"type":"vertex","label":"range","start":{"line":0,"character":0},"end":{"line":81,"character":0}}
{"id":1951,"type":"edge","label":"contains","inVs":[1950],"outV":560}
{"id":1952,"type":"edge","label":"item","document":560,"inVs":[1950],"outV":1949}
{"id":1953,"type":"edge","label":"textDocument/definition","inV":1949,"outV":114}
{"id":1954,"type":"vertex","label":"referenceResult"}
{"id":1955,"type":"edge","label":"textDocument/references","inV":1954,"outV":114}
{"id":1956,"type":"edge","label":"item","document":108,"property":"references","inVs":[113,122],"outV":1954}
{"id":1957,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nextern crate std\n```\n\n---\n\n# The Rust Standard Library\n\nThe Rust Standard Library is the foundation of portable Rust software, a\nset of minimal and battle-tested shared abstractions for the [broader Rust\necosystem](https://crates.io). It offers core types, like [`Vec<T>`] and\n[`Option<T>`], library-defined [operations on language\nprimitives](https://doc.rust-lang.org/stable/std/index.html#primitives), [standard macros](https://doc.rust-lang.org/stable/std/index.html#macros), [I/O] and\n[multithreading], among [many other things](https://doc.rust-lang.org/stable/std/index.html#what-is-in-the-standard-library-documentation).\n\n`std` is available to all Rust crates by default. Therefore, the\nstandard library can be accessed in [`use`](https://doc.rust-lang.org/stable/book/ch07-02-defining-modules-to-control-scope-and-privacy.html) statements through the path\n`std`, as in [`use std::env`](https://doc.rust-lang.org/stable/std/env/index.html).\n\n# How to read this documentation\n\nIf you already know the name of what you are looking for, the fastest way to\nfind it is to use the <a href=\"#\" onclick=\"window.searchState.focus();\">search\nbar</a> at the top of the page.\n\nOtherwise, you may want to jump to one of these useful sections:\n\n* [`std::*` modules](https://doc.rust-lang.org/stable/std/index.html#modules)\n* [Primitive types](https://doc.rust-lang.org/stable/std/index.html#primitives)\n* [Standard macros](https://doc.rust-lang.org/stable/std/index.html#macros)\n* [The Rust Prelude]\n\nIf this is your first time, the documentation for the standard library is\nwritten to be casually perused. Clicking on interesting things should\ngenerally lead you to interesting places. Still, there are important bits\nyou don't want to miss, so read on for a tour of the standard library and\nits documentation!\n\nOnce you are familiar with the contents of the standard library you may\nbegin to find the verbosity of the prose distracting. At this stage in your\ndevelopment you may want to press the `[-]` button near the top of the\npage to collapse it into a more skimmable view.\n\nWhile you are looking at that `[-]` button also notice the `source`\nlink. Rust's API documentation comes with the source code and you are\nencouraged to read it. The standard library source is generally high\nquality and a peek behind the curtains is often enlightening.\n\n# What is in the standard library documentation?\n\nFirst of all, The Rust Standard Library is divided into a number of focused\nmodules, [all listed further down this page](https://doc.rust-lang.org/stable/std/index.html#modules). These modules are\nthe bedrock upon which all of Rust is forged, and they have mighty names\nlike [`std::slice`] and [`std::cmp`]. Modules' documentation typically\nincludes an overview of the module along with examples, and are a smart\nplace to start familiarizing yourself with the library.\n\nSecond, implicit methods on [primitive types](https://doc.rust-lang.org/stable/book/ch03-02-data-types.html) are documented here. This can\nbe a source of confusion for two reasons:\n\n1. While primitives are implemented by the compiler, the standard library\n   implements methods directly on the primitive types (and it is the only\n   library that does so), which are [documented in the section on\n   primitives](https://doc.rust-lang.org/stable/std/index.html#primitives).\n1. The standard library exports many modules *with the same name as\n   primitive types*. These define additional items related to the primitive\n   type, but not the all-important methods.\n\nSo for example there is a [page for the primitive type\n`i32`](https://doc.rust-lang.org/nightly/core/primitive.i32.html) that lists all the methods that can be called on\n32-bit integers (very useful), and there is a [page for the module\n`std::i32`](https://doc.rust-lang.org/stable/core/i32/index.html) that documents the constant values [`MIN`] and [`MAX`] (rarely\nuseful).\n\nNote the documentation for the primitives [`str`] and [`[T]`](https://doc.rust-lang.org/stable/alloc/slice/index.html) (also\ncalled 'slice'). Many method calls on [`String`](https://doc.rust-lang.org/stable/alloc/string/struct.String.html) and [`Vec<T>`] are actually\ncalls to methods on [`str`] and [`[T]`](https://doc.rust-lang.org/stable/alloc/slice/index.html) respectively, via [deref\ncoercions](https://doc.rust-lang.org/stable/book/ch15-02-deref.html#implicit-deref-coercions-with-functions-and-methods).\n\nThird, the standard library defines [The Rust Prelude], a small collection\nof items - mostly traits - that are imported into every module of every\ncrate. The traits in the prelude are pervasive, making the prelude\ndocumentation a good entry point to learning about the library.\n\nAnd finally, the standard library exports a number of standard macros, and\n[lists them on this page](https://doc.rust-lang.org/stable/std/index.html#macros) (technically, not all of the standard\nmacros are defined by the standard library - some are defined by the\ncompiler - but they are documented here the same). Like the prelude, the\nstandard macros are imported by default into all crates.\n\n# Contributing changes to the documentation\n\nCheck out the Rust contribution guidelines [here](https://rustc-dev-guide.rust-lang.org/contributing.html#writing-documentation).\nThe source for this documentation can be found on\n[GitHub](https://github.com/rust-lang/rust).\nTo contribute changes, make sure you read the guidelines first, then submit\npull-requests for your suggested changes.\n\nContributions are appreciated! If you see a part of the docs that can be\nimproved, submit a PR, or chat with us first on [Discord](https://discord.gg/rust-lang)\n\\#docs.\n\n# A Tour of The Rust Standard Library\n\nThe rest of this crate documentation is dedicated to pointing out notable\nfeatures of The Rust Standard Library.\n\n## Containers and collections\n\nThe [`option`](https://doc.rust-lang.org/stable/core/option/index.html) and [`result`](https://doc.rust-lang.org/stable/core/result/index.html) modules define optional and error-handling\ntypes, [`Option<T>`] and [`Result<T, E>`]. The [`iter`](https://doc.rust-lang.org/stable/core/iter/index.html) module defines\nRust's iterator trait, [`Iterator`](https://doc.rust-lang.org/stable/core/iter/traits/iterator/trait.Iterator.html), which works with the [`for`](https://doc.rust-lang.org/stable/book/ch03-05-control-flow.html#looping-through-a-collection-with-for) loop to\naccess collections.\n\nThe standard library exposes three common ways to deal with contiguous\nregions of memory:\n\n* [`Vec<T>`] - A heap-allocated *vector* that is resizable at runtime.\n* [`[T; N]`](https://doc.rust-lang.org/stable/core/array/index.html) - An inline *array* with a fixed size at compile time.\n* [`[T]`](https://doc.rust-lang.org/stable/alloc/slice/index.html) - A dynamically sized *slice* into any other kind of contiguous\n  storage, whether heap-allocated or not.\n\nSlices can only be handled through some kind of *pointer*, and as such come\nin many flavors such as:\n\n* `&[T]` - *shared slice*\n* `&mut [T]` - *mutable slice*\n* [`Box<[T]>`](https://doc.rust-lang.org/stable/alloc/boxed/index.html) - *owned slice*\n\n[`str`], a UTF-8 string slice, is a primitive type, and the standard library\ndefines many methods for it. Rust [`str`]s are typically accessed as\nimmutable references: `&str`. Use the owned [`String`](https://doc.rust-lang.org/stable/alloc/string/struct.String.html) for building and\nmutating strings.\n\nFor converting to strings use the [`format`](https://doc.rust-lang.org/stable/alloc/macros/macro.format.html) macro, and for converting from\nstrings use the [`FromStr`] trait.\n\nData may be shared by placing it in a reference-counted box or the [`Rc`]\ntype, and if further contained in a [`Cell`] or [`RefCell`], may be mutated\nas well as shared. Likewise, in a concurrent setting it is common to pair an\natomically-reference-counted box, [`Arc`], with a [`Mutex`] to get the same\neffect.\n\nThe [`collections`](https://doc.rust-lang.org/stable/std/collections/index.html) module defines maps, sets, linked lists and other\ntypical collection types, including the common [`HashMap<K, V>`].\n\n## Platform abstractions and I/O\n\nBesides basic data types, the standard library is largely concerned with\nabstracting over differences in common platforms, most notably Windows and\nUnix derivatives.\n\nCommon types of I/O, including [files], [TCP], and [UDP], are defined in\nthe [`io`](https://doc.rust-lang.org/stable/std/io/index.html), [`fs`](https://doc.rust-lang.org/stable/std/fs/index.html), and [`net`](https://doc.rust-lang.org/stable/std/net/index.html) modules.\n\nThe [`thread`](https://doc.rust-lang.org/stable/std/thread/index.html) module contains Rust's threading abstractions. [`sync`](https://doc.rust-lang.org/stable/std/sync/index.html)\ncontains further primitive shared memory types, including [`atomic`] and\n[`mpsc`], which contains the channel types for message passing.\n\n# Use before and after `main()`\n\nMany parts of the standard library are expected to work before and after `main()`;\nbut this is not guaranteed or ensured by tests. It is recommended that you write your own tests\nand run them on each platform you wish to support.\nThis means that use of `std` before/after main, especially of features that interact with the\nOS or global state, is exempted from stability and portability guarantees and instead only\nprovided on a best-effort basis. Nevertheless bug reports are appreciated.\n\nOn the other hand `core` and `alloc` are most likely to work in such environments with\nthe caveat that any hookable behavior such as panics, oom handling or allocators will also\ndepend on the compatibility of the hooks.\n\nSome features may also behave differently outside main, e.g. stdio could become unbuffered,\nsome panics might turn into aborts, backtraces might not get symbolicated or similar.\n\nNon-exhaustive list of known limitations:\n\n* after-main use of thread-locals, which also affects additional features:\n  * [`thread::current`](https://doc.rust-lang.org/stable/std/thread/fn.current.html)\n  * [`thread::scope`](https://doc.rust-lang.org/stable/std/thread/scoped/fn.scope.html)\n  * [`sync::mpsc`](https://doc.rust-lang.org/stable/std/sync/mpsc/index.html)\n* before-main stdio file descriptors are not guaranteed to be open on unix platforms"}}}
{"id":1958,"type":"edge","label":"textDocument/hover","inV":1957,"outV":117}
{"id":1959,"type":"vertex","label":"definitionResult"}
{"id":1960,"type":"vertex","label":"document","uri":"file:///opt/homebrew/Cellar/rust/1.81.0/lib/rustlib/src/rust/library/std/src/lib.rs","languageId":"rust"}
{"id":1961,"type":"vertex","label":"range","start":{"line":0,"character":0},"end":{"line":750,"character":0}}
{"id":1962,"type":"edge","label":"contains","inVs":[1961],"outV":1960}
{"id":1963,"type":"edge","label":"item","document":1960,"inVs":[1961],"outV":1959}
{"id":1964,"type":"edge","label":"textDocument/definition","inV":1959,"outV":117}
{"id":1965,"type":"vertex","label":"referenceResult"}
{"id":1966,"type":"edge","label":"textDocument/references","inV":1965,"outV":117}
{"id":1967,"type":"edge","label":"item","document":108,"property":"references","inVs":[116],"outV":1965}
{"id":1968,"type":"edge","label":"item","document":1153,"property":"references","inVs":[1162],"outV":1965}
{"id":1969,"type":"edge","label":"item","document":1369,"property":"references","inVs":[1377],"outV":1965}
{"id":1970,"type":"edge","label":"item","document":1590,"property":"references","inVs":[1593],"outV":1965}
{"id":1971,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nstd\n```\n\n```rust\nmod panic\n```\n\n---\n\nPanic support in the standard library."}}}
{"id":1972,"type":"edge","label":"textDocument/hover","inV":1971,"outV":120}
{"id":1973,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"std::panic","unique":"scheme","kind":"import"}
{"id":1974,"type":"edge","label":"packageInformation","inV":1804,"outV":1973}
{"id":1975,"type":"edge","label":"moniker","inV":1973,"outV":120}
{"id":1976,"type":"vertex","label":"definitionResult"}
{"id":1977,"type":"vertex","label":"document","uri":"file:///opt/homebrew/Cellar/rust/1.81.0/lib/rustlib/src/rust/library/std/src/panic.rs","languageId":"rust"}
{"id":1978,"type":"vertex","label":"range","start":{"line":0,"character":0},"end":{"line":531,"character":0}}
{"id":1979,"type":"edge","label":"contains","inVs":[1978],"outV":1977}
{"id":1980,"type":"edge","label":"item","document":1977,"inVs":[1978],"outV":1976}
{"id":1981,"type":"edge","label":"textDocument/definition","inV":1976,"outV":120}
{"id":1982,"type":"vertex","label":"referenceResult"}
{"id":1983,"type":"edge","label":"textDocument/references","inV":1982,"outV":120}
{"id":1984,"type":"edge","label":"item","document":108,"property":"references","inVs":[119,178,205],"outV":1982}
{"id":1985,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::game_test::game\n```\n\n```rust\nmod player\n```"}}}
{"id":1986,"type":"edge","label":"textDocument/hover","inV":1985,"outV":125}
{"id":1987,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::game::game_test::player","unique":"scheme","kind":"export"}
{"id":1988,"type":"edge","label":"packageInformation","inV":1709,"outV":1987}
{"id":1989,"type":"edge","label":"moniker","inV":1987,"outV":125}
{"id":1990,"type":"vertex","label":"definitionResult"}
{"id":1991,"type":"vertex","label":"range","start":{"line":0,"character":0},"end":{"line":52,"character":0}}
{"id":1992,"type":"edge","label":"contains","inVs":[1991],"outV":945}
{"id":1993,"type":"edge","label":"item","document":945,"inVs":[1991],"outV":1990}
{"id":1994,"type":"edge","label":"textDocument/definition","inV":1990,"outV":125}
{"id":1995,"type":"vertex","label":"referenceResult"}
{"id":1996,"type":"edge","label":"textDocument/references","inV":1995,"outV":125}
{"id":1997,"type":"edge","label":"item","document":108,"property":"references","inVs":[124],"outV":1995}
{"id":1998,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::game\n```\n\n```rust\npub struct MockGameFn {\n    GameFn_expectations: MockGameFn_GameFn,\n}\n```"}}}
{"id":1999,"type":"edge","label":"textDocument/hover","inV":1998,"outV":148}
{"id":2000,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::game::MockGameFn","unique":"scheme","kind":"export"}
{"id":2001,"type":"edge","label":"packageInformation","inV":1709,"outV":2000}
{"id":2002,"type":"edge","label":"moniker","inV":2000,"outV":148}
{"id":2003,"type":"vertex","label":"definitionResult"}
{"id":2004,"type":"edge","label":"item","document":560,"inVs":[607],"outV":2003}
{"id":2005,"type":"edge","label":"textDocument/definition","inV":2003,"outV":148}
{"id":2006,"type":"vertex","label":"referenceResult"}
{"id":2007,"type":"edge","label":"textDocument/references","inV":2006,"outV":148}
{"id":2008,"type":"edge","label":"item","document":108,"property":"references","inVs":[147,503,516,524,539],"outV":2006}
{"id":2009,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::game\n```\n\n```rust\nmod player\n```"}}}
{"id":2010,"type":"edge","label":"textDocument/hover","inV":2009,"outV":155}
{"id":2011,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::game::player","unique":"scheme","kind":"export"}
{"id":2012,"type":"edge","label":"packageInformation","inV":1709,"outV":2011}
{"id":2013,"type":"edge","label":"moniker","inV":2011,"outV":155}
{"id":2014,"type":"vertex","label":"definitionResult"}
{"id":2015,"type":"vertex","label":"range","start":{"line":0,"character":0},"end":{"line":52,"character":0}}
{"id":2016,"type":"edge","label":"contains","inVs":[2015],"outV":945}
{"id":2017,"type":"edge","label":"item","document":945,"inVs":[2015],"outV":2014}
{"id":2018,"type":"edge","label":"textDocument/definition","inV":2014,"outV":155}
{"id":2019,"type":"vertex","label":"referenceResult"}
{"id":2020,"type":"edge","label":"textDocument/references","inV":2019,"outV":155}
{"id":2021,"type":"edge","label":"item","document":108,"property":"references","inVs":[154],"outV":2019}
{"id":2022,"type":"edge","label":"item","document":560,"property":"references","inVs":[567,600,656,836,888],"outV":2019}
{"id":2023,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::game::player\n```\n\n```rust\nmod step\n```"}}}
{"id":2024,"type":"edge","label":"textDocument/hover","inV":2023,"outV":158}
{"id":2025,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::player::game::step","unique":"scheme","kind":"export"}
{"id":2026,"type":"edge","label":"packageInformation","inV":1709,"outV":2025}
{"id":2027,"type":"edge","label":"moniker","inV":2025,"outV":158}
{"id":2028,"type":"vertex","label":"definitionResult"}
{"id":2029,"type":"vertex","label":"range","start":{"line":0,"character":0},"end":{"line":59,"character":0}}
{"id":2030,"type":"edge","label":"contains","inVs":[2029],"outV":1153}
{"id":2031,"type":"edge","label":"item","document":1153,"inVs":[2029],"outV":2028}
{"id":2032,"type":"edge","label":"textDocument/definition","inV":2028,"outV":158}
{"id":2033,"type":"vertex","label":"referenceResult"}
{"id":2034,"type":"edge","label":"textDocument/references","inV":2033,"outV":158}
{"id":2035,"type":"edge","label":"item","document":108,"property":"references","inVs":[157,364,386,415,443,471],"outV":2033}
{"id":2036,"type":"edge","label":"item","document":945,"property":"references","inVs":[952,979,1045,1073],"outV":2033}
{"id":2037,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::game_test\n```\n\n```rust\nfn run_test<T>(test: T)\nwhere\n    T: FnOnce(&TestGame) + panic::UnwindSafe,\n```"}}}
{"id":2038,"type":"edge","label":"textDocument/hover","inV":2037,"outV":161}
{"id":2039,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::game_test::run_test","unique":"scheme","kind":"export"}
{"id":2040,"type":"edge","label":"packageInformation","inV":1709,"outV":2039}
{"id":2041,"type":"edge","label":"moniker","inV":2039,"outV":161}
{"id":2042,"type":"vertex","label":"definitionResult"}
{"id":2043,"type":"edge","label":"item","document":108,"inVs":[160],"outV":2042}
{"id":2044,"type":"edge","label":"textDocument/definition","inV":2042,"outV":161}
{"id":2045,"type":"vertex","label":"referenceResult"}
{"id":2046,"type":"edge","label":"textDocument/references","inV":2045,"outV":161}
{"id":2047,"type":"edge","label":"item","document":108,"property":"definitions","inVs":[160],"outV":2045}
{"id":2048,"type":"edge","label":"item","document":108,"property":"references","inVs":[249,274],"outV":2045}
{"id":2049,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nT: FnOnce(&Game) + UnwindSafe\n```"}}}
{"id":2050,"type":"edge","label":"textDocument/hover","inV":2049,"outV":164}
{"id":2051,"type":"vertex","label":"definitionResult"}
{"id":2052,"type":"edge","label":"item","document":108,"inVs":[163],"outV":2051}
{"id":2053,"type":"edge","label":"textDocument/definition","inV":2051,"outV":164}
{"id":2054,"type":"vertex","label":"referenceResult"}
{"id":2055,"type":"edge","label":"textDocument/references","inV":2054,"outV":164}
{"id":2056,"type":"edge","label":"item","document":108,"property":"definitions","inVs":[163],"outV":2054}
{"id":2057,"type":"edge","label":"item","document":108,"property":"references","inVs":[169,171],"outV":2054}
{"id":2058,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\ntest: T\n```"}}}
{"id":2059,"type":"edge","label":"textDocument/hover","inV":2058,"outV":167}
{"id":2060,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::game_test::run_test::test","unique":"scheme","kind":"export"}
{"id":2061,"type":"edge","label":"packageInformation","inV":1709,"outV":2060}
{"id":2062,"type":"edge","label":"moniker","inV":2060,"outV":167}
{"id":2063,"type":"vertex","label":"definitionResult"}
{"id":2064,"type":"edge","label":"item","document":108,"inVs":[166],"outV":2063}
{"id":2065,"type":"edge","label":"textDocument/definition","inV":2063,"outV":167}
{"id":2066,"type":"vertex","label":"referenceResult"}
{"id":2067,"type":"edge","label":"textDocument/references","inV":2066,"outV":167}
{"id":2068,"type":"edge","label":"item","document":108,"property":"definitions","inVs":[166],"outV":2066}
{"id":2069,"type":"edge","label":"item","document":108,"property":"references","inVs":[226],"outV":2066}
{"id":2070,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\ncore::ops::function\n```\n\n```rust\npub trait FnOnce<Args>\nwhere\n    Args: Tuple,\n```\n\n---\n\nThe version of the call operator that takes a by-value receiver.\n\nInstances of `FnOnce` can be called, but might not be callable multiple\ntimes. Because of this, if the only thing known about a type is that it\nimplements `FnOnce`, it can only be called once.\n\n`FnOnce` is implemented automatically by closures that might consume captured\nvariables, as well as all types that implement [`FnMut`](https://doc.rust-lang.org/stable/core/ops/function/trait.FnMut.html), e.g., (safe)\n[function pointers] (since `FnOnce` is a supertrait of [`FnMut`](https://doc.rust-lang.org/stable/core/ops/function/trait.FnMut.html)).\n\nSince both [`Fn`](https://doc.rust-lang.org/stable/core/ops/function/trait.Fn.html) and [`FnMut`](https://doc.rust-lang.org/stable/core/ops/function/trait.FnMut.html) are subtraits of `FnOnce`, any instance of\n[`Fn`](https://doc.rust-lang.org/stable/core/ops/function/trait.Fn.html) or [`FnMut`](https://doc.rust-lang.org/stable/core/ops/function/trait.FnMut.html) can be used where a `FnOnce` is expected.\n\nUse `FnOnce` as a bound when you want to accept a parameter of function-like\ntype and only need to call it once. If you need to call the parameter\nrepeatedly, use [`FnMut`](https://doc.rust-lang.org/stable/core/ops/function/trait.FnMut.html) as a bound; if you also need it to not mutate\nstate, use [`Fn`](https://doc.rust-lang.org/stable/core/ops/function/trait.Fn.html).\n\nSee the [chapter on closures in *The Rust Programming Language*](https://doc.rust-lang.org/stable/core/book/ch13-01-closures.html) for\nsome more information on this topic.\n\nAlso of note is the special syntax for `Fn` traits (e.g.\n`Fn(usize, bool) -> usize`). Those interested in the technical details of\nthis can refer to [the relevant section in the *Rustonomicon*](https://doc.rust-lang.org/stable/core/nomicon/hrtb.html).\n\n# Examples\n\n## Using a `FnOnce` parameter\n\n```rust\nfn consume_with_relish<F>(func: F)\n    where F: FnOnce() -> String\n{\n    // `func` consumes its captured variables, so it cannot be run more\n    // than once.\n    println!(\"Consumed: {}\", func());\n\n    println!(\"Delicious!\");\n\n    // Attempting to invoke `func()` again will throw a `use of moved\n    // value` error for `func`.\n}\n\nlet x = String::from(\"x\");\nlet consume_and_return_x = move || x;\nconsume_with_relish(consume_and_return_x);\n\n// `consume_and_return_x` can no longer be invoked at this point\n```"}}}
{"id":2071,"type":"edge","label":"textDocument/hover","inV":2070,"outV":174}
{"id":2072,"type":"vertex","label":"packageInformation","name":"core","manager":"cargo","repository":{"type":"git","url":"https://github.com/rust-lang/rust/"},"version":"https://github.com/rust-lang/rust/library/core"}
{"id":2073,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"core::function::ops::FnOnce","unique":"scheme","kind":"import"}
{"id":2074,"type":"edge","label":"packageInformation","inV":2072,"outV":2073}
{"id":2075,"type":"edge","label":"moniker","inV":2073,"outV":174}
{"id":2076,"type":"vertex","label":"definitionResult"}
{"id":2077,"type":"vertex","label":"document","uri":"file:///opt/homebrew/Cellar/rust/1.81.0/lib/rustlib/src/rust/library/core/src/ops/function.rs","languageId":"rust"}
{"id":2078,"type":"vertex","label":"range","start":{"line":241,"character":10},"end":{"line":241,"character":16}}
{"id":2079,"type":"edge","label":"contains","inVs":[2078],"outV":2077}
{"id":2080,"type":"edge","label":"item","document":2077,"inVs":[2078],"outV":2076}
{"id":2081,"type":"edge","label":"textDocument/definition","inV":2076,"outV":174}
{"id":2082,"type":"vertex","label":"referenceResult"}
{"id":2083,"type":"edge","label":"textDocument/references","inV":2082,"outV":174}
{"id":2084,"type":"edge","label":"item","document":108,"property":"references","inVs":[173],"outV":2082}
{"id":2085,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\ncore::panic::unwind_safe\n```\n\n```rust\npub auto trait UnwindSafe\n```\n\n---\n\nA marker trait which represents \"panic safe\" types in Rust.\n\nThis trait is implemented by default for many types and behaves similarly in\nterms of inference of implementation to the [`Send`](https://doc.rust-lang.org/stable/core/marker/trait.Send.html) and [`Sync`](https://doc.rust-lang.org/stable/core/marker/trait.Sync.html) traits. The\npurpose of this trait is to encode what types are safe to cross a [`catch_unwind`](https://doc.rust-lang.org/stable/core/std/panic/fn.catch_unwind.html)\nboundary with no fear of unwind safety.\n\n## What is unwind safety?\n\nIn Rust a function can \"return\" early if it either panics or calls a\nfunction which transitively panics. This sort of control flow is not always\nanticipated, and has the possibility of causing subtle bugs through a\ncombination of two critical components:\n\n1. A data structure is in a temporarily invalid state when the thread\n   panics.\n1. This broken invariant is then later observed.\n\nTypically in Rust, it is difficult to perform step (2) because catching a\npanic involves either spawning a thread (which in turn makes it difficult\nto later witness broken invariants) or using the `catch_unwind` function in this\nmodule. Additionally, even if an invariant is witnessed, it typically isn't a\nproblem in Rust because there are no uninitialized values (like in C or C++).\n\nIt is possible, however, for **logical** invariants to be broken in Rust,\nwhich can end up causing behavioral bugs. Another key aspect of unwind safety\nin Rust is that, in the absence of `unsafe` code, a panic cannot lead to\nmemory unsafety.\n\nThat was a bit of a whirlwind tour of unwind safety, but for more information\nabout unwind safety and how it applies to Rust, see an [associated RFC](https://github.com/rust-lang/rfcs/blob/master/text/1236-stabilize-catch-panic.md).\n\n## What is `UnwindSafe`?\n\nNow that we've got an idea of what unwind safety is in Rust, it's also\nimportant to understand what this trait represents. As mentioned above, one\nway to witness broken invariants is through the `catch_unwind` function in this\nmodule as it allows catching a panic and then re-using the environment of\nthe closure.\n\nSimply put, a type `T` implements `UnwindSafe` if it cannot easily allow\nwitnessing a broken invariant through the use of `catch_unwind` (catching a\npanic). This trait is an auto trait, so it is automatically implemented for\nmany types, and it is also structurally composed (e.g., a struct is unwind\nsafe if all of its components are unwind safe).\n\nNote, however, that this is not an unsafe trait, so there is not a succinct\ncontract that this trait is providing. Instead it is intended as more of a\n\"speed bump\" to alert users of `catch_unwind` that broken invariants may be\nwitnessed and may need to be accounted for.\n\n## Who implements `UnwindSafe`?\n\nTypes such as `&mut T` and `&RefCell<T>` are examples which are **not**\nunwind safe. The general idea is that any mutable state which can be shared\nacross `catch_unwind` is not unwind safe by default. This is because it is very\neasy to witness a broken invariant outside of `catch_unwind` as the data is\nsimply accessed as usual.\n\nTypes like `&Mutex<T>`, however, are unwind safe because they implement\npoisoning by default. They still allow witnessing a broken invariant, but\nthey already provide their own \"speed bumps\" to do so.\n\n## When should `UnwindSafe` be used?\n\nIt is not intended that most types or functions need to worry about this trait.\nIt is only used as a bound on the `catch_unwind` function and as mentioned\nabove, the lack of `unsafe` means it is mostly an advisory. The\n[`AssertUnwindSafe`](https://doc.rust-lang.org/stable/core/panic/unwind_safe/struct.AssertUnwindSafe.html) wrapper struct can be used to force this trait to be\nimplemented for any closed over variables passed to `catch_unwind`."}}}
{"id":2086,"type":"edge","label":"textDocument/hover","inV":2085,"outV":181}
{"id":2087,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"core::unwind_safe::panic::UnwindSafe","unique":"scheme","kind":"import"}
{"id":2088,"type":"edge","label":"packageInformation","inV":2072,"outV":2087}
{"id":2089,"type":"edge","label":"moniker","inV":2087,"outV":181}
{"id":2090,"type":"vertex","label":"definitionResult"}
{"id":2091,"type":"vertex","label":"document","uri":"file:///opt/homebrew/Cellar/rust/1.81.0/lib/rustlib/src/rust/library/core/src/panic/unwind_safe.rs","languageId":"rust"}
{"id":2092,"type":"vertex","label":"range","start":{"line":89,"character":15},"end":{"line":89,"character":25}}
{"id":2093,"type":"edge","label":"contains","inVs":[2092],"outV":2091}
{"id":2094,"type":"edge","label":"item","document":2091,"inVs":[2092],"outV":2090}
{"id":2095,"type":"edge","label":"textDocument/definition","inV":2090,"outV":181}
{"id":2096,"type":"vertex","label":"referenceResult"}
{"id":2097,"type":"edge","label":"textDocument/references","inV":2096,"outV":181}
{"id":2098,"type":"edge","label":"item","document":108,"property":"references","inVs":[180],"outV":2096}
{"id":2099,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nlet name_of_players: Vec<String>\n```"}}}
{"id":2100,"type":"edge","label":"textDocument/hover","inV":2099,"outV":184}
{"id":2101,"type":"vertex","label":"definitionResult"}
{"id":2102,"type":"edge","label":"item","document":108,"inVs":[183],"outV":2101}
{"id":2103,"type":"edge","label":"textDocument/definition","inV":2101,"outV":184}
{"id":2104,"type":"vertex","label":"referenceResult"}
{"id":2105,"type":"edge","label":"textDocument/references","inV":2104,"outV":184}
{"id":2106,"type":"edge","label":"item","document":108,"property":"definitions","inVs":[183],"outV":2104}
{"id":2107,"type":"edge","label":"item","document":108,"property":"references","inVs":[214],"outV":2104}
{"id":2108,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nalloc::macros\n```\n\n```rust\nmacro_rules! vec\n```\n\n---\n\nCreates a [`Vec`] containing the arguments.\n\n`vec!` allows `Vec`s to be defined with the same syntax as array expressions.\nThere are two forms of this macro:\n\n* Create a [`Vec`] containing a given list of elements:\n\n```rust\nlet v = vec![1, 2, 3];\nassert_eq!(v[0], 1);\nassert_eq!(v[1], 2);\nassert_eq!(v[2], 3);\n```\n\n* Create a [`Vec`] from a given element and size:\n\n```rust\nlet v = vec![1; 3];\nassert_eq!(v, [1, 1, 1]);\n```\n\nNote that unlike array expressions this syntax supports all elements\nwhich implement [`Clone`](https://doc.rust-lang.org/stable/core/clone/trait.Clone.html) and the number of elements doesn't have to be\na constant.\n\nThis will use `clone` to duplicate an expression, so one should be careful\nusing this with types having a nonstandard `Clone` implementation. For\nexample, `vec![Rc::new(1); 5]` will create a vector of five references\nto the same boxed integer value, not five references pointing to independently\nboxed integers.\n\nAlso, note that `vec![expr; 0]` is allowed, and produces an empty vector.\nThis will still evaluate `expr`, however, and immediately drop the resulting value, so\nbe mindful of side effects."}}}
{"id":2109,"type":"edge","label":"textDocument/hover","inV":2108,"outV":187}
{"id":2110,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"alloc::macros::vec","unique":"scheme","kind":"import"}
{"id":2111,"type":"edge","label":"packageInformation","inV":1870,"outV":2110}
{"id":2112,"type":"edge","label":"moniker","inV":2110,"outV":187}
{"id":2113,"type":"vertex","label":"definitionResult"}
{"id":2114,"type":"vertex","label":"document","uri":"file:///opt/homebrew/Cellar/rust/1.81.0/lib/rustlib/src/rust/library/alloc/src/macros.rs","languageId":"rust"}
{"id":2115,"type":"vertex","label":"range","start":{"line":41,"character":13},"end":{"line":41,"character":16}}
{"id":2116,"type":"edge","label":"contains","inVs":[2115],"outV":2114}
{"id":2117,"type":"edge","label":"item","document":2114,"inVs":[2115],"outV":2113}
{"id":2118,"type":"edge","label":"textDocument/definition","inV":2113,"outV":187}
{"id":2119,"type":"vertex","label":"referenceResult"}
{"id":2120,"type":"edge","label":"textDocument/references","inV":2119,"outV":187}
{"id":2121,"type":"edge","label":"item","document":108,"property":"references","inVs":[186,492],"outV":2119}
{"id":2122,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nalloc::string\n```\n\n```rust\nfn to_string(&self) -> String\n```\n\n---\n\nConverts the given value to a `String`.\n\n# Examples\n\n```rust\nlet i = 5;\nlet five = String::from(\"5\");\n\nassert_eq!(five, i.to_string());\n```"}}}
{"id":2123,"type":"edge","label":"textDocument/hover","inV":2122,"outV":190}
{"id":2124,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"alloc::string::ToString::to_string","unique":"scheme","kind":"import"}
{"id":2125,"type":"edge","label":"packageInformation","inV":1870,"outV":2124}
{"id":2126,"type":"edge","label":"moniker","inV":2124,"outV":190}
{"id":2127,"type":"vertex","label":"definitionResult"}
{"id":2128,"type":"vertex","label":"range","start":{"line":2650,"character":7},"end":{"line":2650,"character":16}}
{"id":2129,"type":"edge","label":"contains","inVs":[2128],"outV":1893}
{"id":2130,"type":"edge","label":"item","document":1893,"inVs":[2128],"outV":2127}
{"id":2131,"type":"edge","label":"textDocument/definition","inV":2127,"outV":190}
{"id":2132,"type":"vertex","label":"referenceResult"}
{"id":2133,"type":"edge","label":"textDocument/references","inV":2132,"outV":190}
{"id":2134,"type":"edge","label":"item","document":108,"property":"references","inVs":[189,192,194,494,496,498],"outV":2132}
{"id":2135,"type":"edge","label":"item","document":1590,"property":"references","inVs":[1690],"outV":2132}
{"id":2136,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nlet number_of_players: i32\n```"}}}
{"id":2137,"type":"edge","label":"textDocument/hover","inV":2136,"outV":197}
{"id":2138,"type":"vertex","label":"definitionResult"}
{"id":2139,"type":"edge","label":"item","document":108,"inVs":[196],"outV":2138}
{"id":2140,"type":"edge","label":"textDocument/definition","inV":2138,"outV":197}
{"id":2141,"type":"vertex","label":"referenceResult"}
{"id":2142,"type":"edge","label":"textDocument/references","inV":2141,"outV":197}
{"id":2143,"type":"edge","label":"item","document":108,"property":"definitions","inVs":[196],"outV":2141}
{"id":2144,"type":"edge","label":"item","document":108,"property":"references","inVs":[216],"outV":2141}
{"id":2145,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nlet number_of_attempts: i32\n```"}}}
{"id":2146,"type":"edge","label":"textDocument/hover","inV":2145,"outV":200}
{"id":2147,"type":"vertex","label":"definitionResult"}
{"id":2148,"type":"edge","label":"item","document":108,"inVs":[199],"outV":2147}
{"id":2149,"type":"edge","label":"textDocument/definition","inV":2147,"outV":200}
{"id":2150,"type":"vertex","label":"referenceResult"}
{"id":2151,"type":"edge","label":"textDocument/references","inV":2150,"outV":200}
{"id":2152,"type":"edge","label":"item","document":108,"property":"definitions","inVs":[199],"outV":2150}
{"id":2153,"type":"edge","label":"item","document":108,"property":"references","inVs":[218],"outV":2150}
{"id":2154,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nlet test_game_create_result: Result<(), Box<dyn Any + Send>>\n```"}}}
{"id":2155,"type":"edge","label":"textDocument/hover","inV":2154,"outV":203}
{"id":2156,"type":"vertex","label":"definitionResult"}
{"id":2157,"type":"edge","label":"item","document":108,"inVs":[202],"outV":2156}
{"id":2158,"type":"edge","label":"textDocument/definition","inV":2156,"outV":203}
{"id":2159,"type":"vertex","label":"referenceResult"}
{"id":2160,"type":"edge","label":"textDocument/references","inV":2159,"outV":203}
{"id":2161,"type":"edge","label":"item","document":108,"property":"definitions","inVs":[202],"outV":2159}
{"id":2162,"type":"edge","label":"item","document":108,"property":"references","inVs":[230],"outV":2159}
{"id":2163,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nstd::panic\n```\n\n```rust\npub fn catch_unwind<F, R>(f: F) -> Result<R>\nwhere\n    F: FnOnce() -> R + UnwindSafe,\n```\n\n---\n\nInvokes a closure, capturing the cause of an unwinding panic if one occurs.\n\nThis function will return `Ok` with the closure's result if the closure\ndoes not panic, and will return `Err(cause)` if the closure panics. The\n`cause` returned is the object with which panic was originally invoked.\n\nIt is currently undefined behavior to unwind from Rust code into foreign\ncode, so this function is particularly useful when Rust is called from\nanother language (normally C). This can run arbitrary Rust code, capturing a\npanic and allowing a graceful handling of the error.\n\nIt is **not** recommended to use this function for a general try/catch\nmechanism. The [`Result`](https://doc.rust-lang.org/stable/std/thread/type.Result.html) type is more appropriate to use for functions that\ncan fail on a regular basis. Additionally, this function is not guaranteed\nto catch all panics, see the \"Notes\" section below.\n\nThe closure provided is required to adhere to the [`UnwindSafe`](https://doc.rust-lang.org/stable/core/panic/unwind_safe/trait.UnwindSafe.html) trait to ensure\nthat all captured variables are safe to cross this boundary. The purpose of\nthis bound is to encode the concept of [exception safety](https://github.com/rust-lang/rfcs/blob/master/text/1236-stabilize-catch-panic.md) in the type\nsystem. Most usage of this function should not need to worry about this\nbound as programs are naturally unwind safe without `unsafe` code. If it\nbecomes a problem the [`AssertUnwindSafe`](https://doc.rust-lang.org/stable/core/panic/unwind_safe/struct.AssertUnwindSafe.html) wrapper struct can be used to quickly\nassert that the usage here is indeed unwind safe.\n\n# Notes\n\nNote that this function **might not catch all panics** in Rust. A panic in\nRust is not always implemented via unwinding, but can be implemented by\naborting the process as well. This function *only* catches unwinding panics,\nnot those that abort the process.\n\nNote that if a custom panic hook has been set, it will be invoked before\nthe panic is caught, before unwinding.\n\nAlso note that unwinding into Rust code with a foreign exception (e.g.\nan exception thrown from C++ code) is undefined behavior.\n\nFinally, be **careful in how you drop the result of this function**.\nIf it is `Err`, it contains the panic payload, and dropping that may in turn panic!\n\n# Examples\n\n```rust\nuse std::panic;\n\nlet result = panic::catch_unwind(|| {\n    println!(\"hello!\");\n});\nassert!(result.is_ok());\n\nlet result = panic::catch_unwind(|| {\n    panic!(\"oh no!\");\n});\nassert!(result.is_err());\n```"}}}
{"id":2164,"type":"edge","label":"textDocument/hover","inV":2163,"outV":208}
{"id":2165,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"std::panic::catch_unwind","unique":"scheme","kind":"import"}
{"id":2166,"type":"edge","label":"packageInformation","inV":1804,"outV":2165}
{"id":2167,"type":"edge","label":"moniker","inV":2165,"outV":208}
{"id":2168,"type":"vertex","label":"definitionResult"}
{"id":2169,"type":"vertex","label":"range","start":{"line":348,"character":7},"end":{"line":348,"character":19}}
{"id":2170,"type":"edge","label":"contains","inVs":[2169],"outV":1977}
{"id":2171,"type":"edge","label":"item","document":1977,"inVs":[2169],"outV":2168}
{"id":2172,"type":"edge","label":"textDocument/definition","inV":2168,"outV":208}
{"id":2173,"type":"vertex","label":"referenceResult"}
{"id":2174,"type":"edge","label":"textDocument/references","inV":2173,"outV":208}
{"id":2175,"type":"edge","label":"item","document":108,"property":"references","inVs":[207],"outV":2173}
{"id":2176,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\ncore::result::Result\n```\n\n```rust\nimpl<T, E> Result<T, E>\npub fn map<U, F>(self, op: F) -> Result<U, E>\nwhere\n    F: FnOnce(T) -> U,\n```\n\n---\n\nMaps a `Result<T, E>` to `Result<U, E>` by applying a function to a\ncontained [`Ok`](https://doc.rust-lang.org/stable/core/result/enum.Result.html) value, leaving an [`Err`](https://doc.rust-lang.org/stable/core/result/enum.Result.html) value untouched.\n\nThis function can be used to compose the results of two functions.\n\n# Examples\n\nPrint the numbers on each line of a string multiplied by two.\n\n```rust\nlet line = \"1\\n2\\n3\\n4\\n\";\n\nfor num in line.lines() {\n    match num.parse::<i32>().map(|i| i * 2) {\n        Ok(n) => println!(\"{n}\"),\n        Err(..) => {}\n    }\n}\n```"}}}
{"id":2177,"type":"edge","label":"textDocument/hover","inV":2176,"outV":221}
{"id":2178,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"core::result::Result::map","unique":"scheme","kind":"import"}
{"id":2179,"type":"edge","label":"packageInformation","inV":2072,"outV":2178}
{"id":2180,"type":"edge","label":"moniker","inV":2178,"outV":221}
{"id":2181,"type":"vertex","label":"definitionResult"}
{"id":2182,"type":"vertex","label":"document","uri":"file:///opt/homebrew/Cellar/rust/1.81.0/lib/rustlib/src/rust/library/core/src/result.rs","languageId":"rust"}
{"id":2183,"type":"vertex","label":"range","start":{"line":768,"character":11},"end":{"line":768,"character":14}}
{"id":2184,"type":"edge","label":"contains","inVs":[2183],"outV":2182}
{"id":2185,"type":"edge","label":"item","document":2182,"inVs":[2183],"outV":2181}
{"id":2186,"type":"edge","label":"textDocument/definition","inV":2181,"outV":221}
{"id":2187,"type":"vertex","label":"referenceResult"}
{"id":2188,"type":"edge","label":"textDocument/references","inV":2187,"outV":221}
{"id":2189,"type":"edge","label":"item","document":108,"property":"references","inVs":[220],"outV":2187}
{"id":2190,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\ntest_game: Game\n```"}}}
{"id":2191,"type":"edge","label":"textDocument/hover","inV":2190,"outV":224}
{"id":2192,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::game_test::run_test::test_game","unique":"scheme","kind":"export"}
{"id":2193,"type":"edge","label":"packageInformation","inV":1709,"outV":2192}
{"id":2194,"type":"edge","label":"moniker","inV":2192,"outV":224}
{"id":2195,"type":"vertex","label":"definitionResult"}
{"id":2196,"type":"edge","label":"item","document":108,"inVs":[223],"outV":2195}
{"id":2197,"type":"edge","label":"textDocument/definition","inV":2195,"outV":224}
{"id":2198,"type":"vertex","label":"referenceResult"}
{"id":2199,"type":"edge","label":"textDocument/references","inV":2198,"outV":224}
{"id":2200,"type":"edge","label":"item","document":108,"property":"definitions","inVs":[223],"outV":2198}
{"id":2201,"type":"edge","label":"item","document":108,"property":"references","inVs":[228],"outV":2198}
{"id":2202,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\ncore::result::Result\n```\n\n```rust\nOk(T)\n```\n\n---\n\nContains the success value"}}}
{"id":2203,"type":"edge","label":"textDocument/hover","inV":2202,"outV":233}
{"id":2204,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"core::result::Ok","unique":"scheme","kind":"import"}
{"id":2205,"type":"edge","label":"packageInformation","inV":2072,"outV":2204}
{"id":2206,"type":"edge","label":"moniker","inV":2204,"outV":233}
{"id":2207,"type":"vertex","label":"definitionResult"}
{"id":2208,"type":"vertex","label":"range","start":{"line":530,"character":4},"end":{"line":530,"character":6}}
{"id":2209,"type":"edge","label":"contains","inVs":[2208],"outV":2182}
{"id":2210,"type":"edge","label":"item","document":2182,"inVs":[2208],"outV":2207}
{"id":2211,"type":"edge","label":"textDocument/definition","inV":2207,"outV":233}
{"id":2212,"type":"vertex","label":"referenceResult"}
{"id":2213,"type":"edge","label":"textDocument/references","inV":2212,"outV":233}
{"id":2214,"type":"edge","label":"item","document":108,"property":"references","inVs":[232],"outV":2212}
{"id":2215,"type":"edge","label":"item","document":1153,"property":"references","inVs":[1366],"outV":2212}
{"id":2216,"type":"edge","label":"item","document":1369,"property":"references","inVs":[1451,1471],"outV":2212}
{"id":2217,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\ncore::result::Result\n```\n\n```rust\nErr(E)\n```\n\n---\n\nContains the error value"}}}
{"id":2218,"type":"edge","label":"textDocument/hover","inV":2217,"outV":238}
{"id":2219,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"core::result::Err","unique":"scheme","kind":"import"}
{"id":2220,"type":"edge","label":"packageInformation","inV":2072,"outV":2219}
{"id":2221,"type":"edge","label":"moniker","inV":2219,"outV":238}
{"id":2222,"type":"vertex","label":"definitionResult"}
{"id":2223,"type":"vertex","label":"range","start":{"line":535,"character":4},"end":{"line":535,"character":7}}
{"id":2224,"type":"edge","label":"contains","inVs":[2223],"outV":2182}
{"id":2225,"type":"edge","label":"item","document":2182,"inVs":[2223],"outV":2222}
{"id":2226,"type":"edge","label":"textDocument/definition","inV":2222,"outV":238}
{"id":2227,"type":"vertex","label":"referenceResult"}
{"id":2228,"type":"edge","label":"textDocument/references","inV":2227,"outV":238}
{"id":2229,"type":"edge","label":"item","document":108,"property":"references","inVs":[237],"outV":2227}
{"id":2230,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nstd::macros\n```\n\n```rust\nmacro_rules! panic\n```"}}}
{"id":2231,"type":"edge","label":"textDocument/hover","inV":2230,"outV":241}
{"id":2232,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"std::macros::panic","unique":"scheme","kind":"import"}
{"id":2233,"type":"edge","label":"packageInformation","inV":1804,"outV":2232}
{"id":2234,"type":"edge","label":"moniker","inV":2232,"outV":241}
{"id":2235,"type":"vertex","label":"definitionResult"}
{"id":2236,"type":"vertex","label":"range","start":{"line":13,"character":13},"end":{"line":13,"character":18}}
{"id":2237,"type":"edge","label":"contains","inVs":[2236],"outV":1809}
{"id":2238,"type":"edge","label":"item","document":1809,"inVs":[2236],"outV":2235}
{"id":2239,"type":"edge","label":"textDocument/definition","inV":2235,"outV":241}
{"id":2240,"type":"vertex","label":"referenceResult"}
{"id":2241,"type":"edge","label":"textDocument/references","inV":2240,"outV":241}
{"id":2242,"type":"edge","label":"item","document":108,"property":"references","inVs":[240],"outV":2240}
{"id":2243,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\ncore::macros::builtin\n```\n\n```rust\nmacro test\n```\n\n---\n\nAttribute macro applied to a function to turn it into a unit test.\n\nSee [the reference](https://doc.rust-lang.org/stable/reference/attributes/testing.html#the-test-attribute) for more info."}}}
{"id":2244,"type":"edge","label":"textDocument/hover","inV":2243,"outV":244}
{"id":2245,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"core::builtin::macros::test","unique":"scheme","kind":"import"}
{"id":2246,"type":"edge","label":"packageInformation","inV":2072,"outV":2245}
{"id":2247,"type":"edge","label":"moniker","inV":2245,"outV":244}
{"id":2248,"type":"vertex","label":"definitionResult"}
{"id":2249,"type":"vertex","label":"document","uri":"file:///opt/homebrew/Cellar/rust/1.81.0/lib/rustlib/src/rust/library/core/src/macros/mod.rs","languageId":"rust"}
{"id":2250,"type":"vertex","label":"range","start":{"line":1640,"character":14},"end":{"line":1640,"character":18}}
{"id":2251,"type":"edge","label":"contains","inVs":[2250],"outV":2249}
{"id":2252,"type":"edge","label":"item","document":2249,"inVs":[2250],"outV":2248}
{"id":2253,"type":"edge","label":"textDocument/definition","inV":2248,"outV":244}
{"id":2254,"type":"vertex","label":"referenceResult"}
{"id":2255,"type":"edge","label":"textDocument/references","inV":2254,"outV":244}
{"id":2256,"type":"edge","label":"item","document":108,"property":"references","inVs":[243,269,356],"outV":2254}
{"id":2257,"type":"edge","label":"item","document":1369,"property":"references","inVs":[1473,1522,1567],"outV":2254}
{"id":2258,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::game_test\n```\n\n```rust\nfn is_able_to_create_new_game_struct()\n```"}}}
{"id":2259,"type":"edge","label":"textDocument/hover","inV":2258,"outV":247}
{"id":2260,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::game_test::is_able_to_create_new_game_struct","unique":"scheme","kind":"export"}
{"id":2261,"type":"edge","label":"packageInformation","inV":1709,"outV":2260}
{"id":2262,"type":"edge","label":"moniker","inV":2260,"outV":247}
{"id":2263,"type":"vertex","label":"definitionResult"}
{"id":2264,"type":"edge","label":"item","document":108,"inVs":[246],"outV":2263}
{"id":2265,"type":"edge","label":"textDocument/definition","inV":2263,"outV":247}
{"id":2266,"type":"vertex","label":"referenceResult"}
{"id":2267,"type":"edge","label":"textDocument/references","inV":2266,"outV":247}
{"id":2268,"type":"edge","label":"item","document":108,"property":"definitions","inVs":[246],"outV":2266}
{"id":2269,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nnew_game: &Game\n```"}}}
{"id":2270,"type":"edge","label":"textDocument/hover","inV":2269,"outV":252}
{"id":2271,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::game_test::is_able_to_create_new_game_struct::new_game","unique":"scheme","kind":"export"}
{"id":2272,"type":"edge","label":"packageInformation","inV":1709,"outV":2271}
{"id":2273,"type":"edge","label":"moniker","inV":2271,"outV":252}
{"id":2274,"type":"vertex","label":"definitionResult"}
{"id":2275,"type":"edge","label":"item","document":108,"inVs":[251],"outV":2274}
{"id":2276,"type":"edge","label":"textDocument/definition","inV":2274,"outV":252}
{"id":2277,"type":"vertex","label":"referenceResult"}
{"id":2278,"type":"edge","label":"textDocument/references","inV":2277,"outV":252}
{"id":2279,"type":"edge","label":"item","document":108,"property":"definitions","inVs":[251],"outV":2277}
{"id":2280,"type":"edge","label":"item","document":108,"property":"references","inVs":[257,264],"outV":2277}
{"id":2281,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\ncore::macros\n```\n\n```rust\nmacro_rules! assert_eq\n```\n\n---\n\nAsserts that two expressions are equal to each other (using [`PartialEq`](https://doc.rust-lang.org/stable/core/cmp/trait.PartialEq.html)).\n\nOn panic, this macro will print the values of the expressions with their\ndebug representations.\n\nLike [`assert`](https://doc.rust-lang.org/stable/core/macros/builtin/macro.assert.html), this macro has a second form, where a custom\npanic message can be provided.\n\n# Examples\n\n```rust\nlet a = 3;\nlet b = 1 + 2;\nassert_eq!(a, b);\n\nassert_eq!(a, b, \"we are testing addition with {} and {}\", a, b);\n```"}}}
{"id":2282,"type":"edge","label":"textDocument/hover","inV":2281,"outV":255}
{"id":2283,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"core::macros::assert_eq","unique":"scheme","kind":"import"}
{"id":2284,"type":"edge","label":"packageInformation","inV":2072,"outV":2283}
{"id":2285,"type":"edge","label":"moniker","inV":2283,"outV":255}
{"id":2286,"type":"vertex","label":"definitionResult"}
{"id":2287,"type":"vertex","label":"range","start":{"line":35,"character":13},"end":{"line":35,"character":22}}
{"id":2288,"type":"edge","label":"contains","inVs":[2287],"outV":2249}
{"id":2289,"type":"edge","label":"item","document":2249,"inVs":[2287],"outV":2286}
{"id":2290,"type":"edge","label":"textDocument/definition","inV":2286,"outV":255}
{"id":2291,"type":"vertex","label":"referenceResult"}
{"id":2292,"type":"edge","label":"textDocument/references","inV":2291,"outV":255}
{"id":2293,"type":"edge","label":"item","document":108,"property":"references","inVs":[254,262,326,349],"outV":2291}
{"id":2294,"type":"edge","label":"item","document":1369,"property":"references","inVs":[1518,1563,1585],"outV":2291}
{"id":2295,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::game::Game\n```\n\n```rust\nfn get_number_of_players(&self) -> i32\n```"}}}
{"id":2296,"type":"edge","label":"textDocument/hover","inV":2295,"outV":260}
{"id":2297,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::game::Game::GameFn::get_number_of_players","unique":"scheme","kind":"export"}
{"id":2298,"type":"edge","label":"packageInformation","inV":1709,"outV":2297}
{"id":2299,"type":"edge","label":"moniker","inV":2297,"outV":260}
{"id":2300,"type":"vertex","label":"definitionResult"}
{"id":2301,"type":"edge","label":"item","document":560,"inVs":[844],"outV":2300}
{"id":2302,"type":"edge","label":"textDocument/definition","inV":2300,"outV":260}
{"id":2303,"type":"vertex","label":"referenceResult"}
{"id":2304,"type":"edge","label":"textDocument/references","inV":2303,"outV":260}
{"id":2305,"type":"edge","label":"item","document":108,"property":"references","inVs":[259],"outV":2303}
{"id":2306,"type":"edge","label":"item","document":560,"property":"definitions","inVs":[844],"outV":2303}
{"id":2307,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::game::Game\n```\n\n```rust\nfn get_number_of_attempts(&self) -> i32\n```"}}}
{"id":2308,"type":"edge","label":"textDocument/hover","inV":2307,"outV":267}
{"id":2309,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::game::Game::GameFn::get_number_of_attempts","unique":"scheme","kind":"export"}
{"id":2310,"type":"edge","label":"packageInformation","inV":1709,"outV":2309}
{"id":2311,"type":"edge","label":"moniker","inV":2309,"outV":267}
{"id":2312,"type":"vertex","label":"definitionResult"}
{"id":2313,"type":"edge","label":"item","document":560,"inVs":[855],"outV":2312}
{"id":2314,"type":"edge","label":"textDocument/definition","inV":2312,"outV":267}
{"id":2315,"type":"vertex","label":"referenceResult"}
{"id":2316,"type":"edge","label":"textDocument/references","inV":2315,"outV":267}
{"id":2317,"type":"edge","label":"item","document":108,"property":"references","inVs":[266,334],"outV":2315}
{"id":2318,"type":"edge","label":"item","document":560,"property":"definitions","inVs":[855],"outV":2315}
{"id":2319,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::game_test\n```\n\n```rust\nfn is_able_to_create_new_step_struct_in_player()\n```"}}}
{"id":2320,"type":"edge","label":"textDocument/hover","inV":2319,"outV":272}
{"id":2321,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::game_test::is_able_to_create_new_step_struct_in_player","unique":"scheme","kind":"export"}
{"id":2322,"type":"edge","label":"packageInformation","inV":1709,"outV":2321}
{"id":2323,"type":"edge","label":"moniker","inV":2321,"outV":272}
{"id":2324,"type":"vertex","label":"definitionResult"}
{"id":2325,"type":"edge","label":"item","document":108,"inVs":[271],"outV":2324}
{"id":2326,"type":"edge","label":"textDocument/definition","inV":2324,"outV":272}
{"id":2327,"type":"vertex","label":"referenceResult"}
{"id":2328,"type":"edge","label":"textDocument/references","inV":2327,"outV":272}
{"id":2329,"type":"edge","label":"item","document":108,"property":"definitions","inVs":[271],"outV":2327}
{"id":2330,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nnew_game: &Game\n```"}}}
{"id":2331,"type":"edge","label":"textDocument/hover","inV":2330,"outV":277}
{"id":2332,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::game_test::is_able_to_create_new_step_struct_in_player::new_game","unique":"scheme","kind":"export"}
{"id":2333,"type":"edge","label":"packageInformation","inV":1709,"outV":2332}
{"id":2334,"type":"edge","label":"moniker","inV":2332,"outV":277}
{"id":2335,"type":"vertex","label":"definitionResult"}
{"id":2336,"type":"edge","label":"item","document":108,"inVs":[276],"outV":2335}
{"id":2337,"type":"edge","label":"textDocument/definition","inV":2335,"outV":277}
{"id":2338,"type":"vertex","label":"referenceResult"}
{"id":2339,"type":"edge","label":"textDocument/references","inV":2338,"outV":277}
{"id":2340,"type":"edge","label":"item","document":108,"property":"definitions","inVs":[276],"outV":2338}
{"id":2341,"type":"edge","label":"item","document":108,"property":"references","inVs":[282,332],"outV":2338}
{"id":2342,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nlet original_players: &Vec<Player>\n```"}}}
{"id":2343,"type":"edge","label":"textDocument/hover","inV":2342,"outV":280}
{"id":2344,"type":"vertex","label":"definitionResult"}
{"id":2345,"type":"edge","label":"item","document":108,"inVs":[279],"outV":2344}
{"id":2346,"type":"edge","label":"textDocument/definition","inV":2344,"outV":280}
{"id":2347,"type":"vertex","label":"referenceResult"}
{"id":2348,"type":"edge","label":"textDocument/references","inV":2347,"outV":280}
{"id":2349,"type":"edge","label":"item","document":108,"property":"definitions","inVs":[279],"outV":2347}
{"id":2350,"type":"edge","label":"item","document":108,"property":"references","inVs":[295,305],"outV":2347}
{"id":2351,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::game::Game\n```\n\n```rust\nfn get_players(&self) -> &Vec<player::Player>\n```"}}}
{"id":2352,"type":"edge","label":"textDocument/hover","inV":2351,"outV":285}
{"id":2353,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::game::Game::GameFn::get_players","unique":"scheme","kind":"export"}
{"id":2354,"type":"edge","label":"packageInformation","inV":1709,"outV":2353}
{"id":2355,"type":"edge","label":"moniker","inV":2353,"outV":285}
{"id":2356,"type":"vertex","label":"definitionResult"}
{"id":2357,"type":"edge","label":"item","document":560,"inVs":[829],"outV":2356}
{"id":2358,"type":"edge","label":"textDocument/definition","inV":2356,"outV":285}
{"id":2359,"type":"vertex","label":"referenceResult"}
{"id":2360,"type":"edge","label":"textDocument/references","inV":2359,"outV":285}
{"id":2361,"type":"edge","label":"item","document":108,"property":"references","inVs":[284],"outV":2359}
{"id":2362,"type":"edge","label":"item","document":560,"property":"definitions","inVs":[829],"outV":2359}
{"id":2363,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nlet mut players: Vec<Player>\n```"}}}
{"id":2364,"type":"edge","label":"textDocument/hover","inV":2363,"outV":288}
{"id":2365,"type":"vertex","label":"definitionResult"}
{"id":2366,"type":"edge","label":"item","document":108,"inVs":[287],"outV":2365}
{"id":2367,"type":"edge","label":"textDocument/definition","inV":2365,"outV":288}
{"id":2368,"type":"vertex","label":"referenceResult"}
{"id":2369,"type":"edge","label":"textDocument/references","inV":2368,"outV":288}
{"id":2370,"type":"edge","label":"item","document":108,"property":"definitions","inVs":[287],"outV":2368}
{"id":2371,"type":"edge","label":"item","document":108,"property":"references","inVs":[300,310],"outV":2368}
{"id":2372,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nalloc::vec::Vec\n```\n\n```rust\nimpl<T> Vec<T, Global>\npub fn with_capacity(capacity: usize) -> Self\n```\n\n---\n\nConstructs a new, empty `Vec<T>` with at least the specified capacity.\n\nThe vector will be able to hold at least `capacity` elements without\nreallocating. This method is allowed to allocate for more elements than\n`capacity`. If `capacity` is 0, the vector will not allocate.\n\nIt is important to note that although the returned vector has the\nminimum *capacity* specified, the vector will have a zero *length*. For\nan explanation of the difference between length and capacity, see\n*[Capacity and reallocation](https://doc.rust-lang.org/stable/alloc/vec/struct.Vec.html#capacity-and-reallocation)*.\n\nIf it is important to know the exact allocated capacity of a `Vec`,\nalways use the [`capacity`] method after construction.\n\nFor `Vec<T>` where `T` is a zero-sized type, there will be no allocation\nand the capacity will always be `usize::MAX`.\n\n# Panics\n\nPanics if the new capacity exceeds `isize::MAX` *bytes*.\n\n# Examples\n\n```rust\nlet mut vec = Vec::with_capacity(10);\n\n// The vector contains no items, even though it has capacity for more\nassert_eq!(vec.len(), 0);\nassert!(vec.capacity() >= 10);\n\n// These are all done without reallocating...\nfor i in 0..10 {\n    vec.push(i);\n}\nassert_eq!(vec.len(), 10);\nassert!(vec.capacity() >= 10);\n\n// ...but this may make the vector reallocate\nvec.push(11);\nassert_eq!(vec.len(), 11);\nassert!(vec.capacity() >= 11);\n\n// A vector of a zero-sized type will always over-allocate, since no\n// allocation is necessary\nlet vec_units = Vec::<()>::with_capacity(10);\nassert_eq!(vec_units.capacity(), usize::MAX);\n```"}}}
{"id":2373,"type":"edge","label":"textDocument/hover","inV":2372,"outV":293}
{"id":2374,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"alloc::vec::Vec::with_capacity","unique":"scheme","kind":"import"}
{"id":2375,"type":"edge","label":"packageInformation","inV":1870,"outV":2374}
{"id":2376,"type":"edge","label":"moniker","inV":2374,"outV":293}
{"id":2377,"type":"vertex","label":"definitionResult"}
{"id":2378,"type":"vertex","label":"range","start":{"line":479,"character":11},"end":{"line":479,"character":24}}
{"id":2379,"type":"edge","label":"contains","inVs":[2378],"outV":1875}
{"id":2380,"type":"edge","label":"item","document":1875,"inVs":[2378],"outV":2377}
{"id":2381,"type":"edge","label":"textDocument/definition","inV":2377,"outV":293}
{"id":2382,"type":"vertex","label":"referenceResult"}
{"id":2383,"type":"edge","label":"textDocument/references","inV":2382,"outV":293}
{"id":2384,"type":"edge","label":"item","document":108,"property":"references","inVs":[292],"outV":2382}
{"id":2385,"type":"edge","label":"item","document":560,"property":"references","inVs":[734],"outV":2382}
{"id":2386,"type":"edge","label":"item","document":945,"property":"references","inVs":[1006],"outV":2382}
{"id":2387,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nalloc::vec::Vec\n```\n\n```rust\nimpl<T, A> Vec<T, A>\npub fn len(&self) -> usize\nwhere\n    // Bounds from impl:\n    A: Allocator,\n```\n\n---\n\nReturns the number of elements in the vector, also referred to\nas its 'length'.\n\n# Examples\n\n```rust\nlet a = vec![1, 2, 3];\nassert_eq!(a.len(), 3);\n```"}}}
{"id":2388,"type":"edge","label":"textDocument/hover","inV":2387,"outV":298}
{"id":2389,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"alloc::vec::Vec::len","unique":"scheme","kind":"import"}
{"id":2390,"type":"edge","label":"packageInformation","inV":1870,"outV":2389}
{"id":2391,"type":"edge","label":"moniker","inV":2389,"outV":298}
{"id":2392,"type":"vertex","label":"definitionResult"}
{"id":2393,"type":"vertex","label":"range","start":{"line":2258,"character":11},"end":{"line":2258,"character":14}}
{"id":2394,"type":"edge","label":"contains","inVs":[2393],"outV":1875}
{"id":2395,"type":"edge","label":"item","document":1875,"inVs":[2393],"outV":2392}
{"id":2396,"type":"edge","label":"textDocument/definition","inV":2392,"outV":298}
{"id":2397,"type":"vertex","label":"referenceResult"}
{"id":2398,"type":"edge","label":"textDocument/references","inV":2397,"outV":298}
{"id":2399,"type":"edge","label":"item","document":108,"property":"references","inVs":[297,330],"outV":2397}
{"id":2400,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nalloc::vec::Vec\n```\n\n```rust\nimpl<T, A> Clone for Vec<T, A>\nfn clone_from(&mut self, source: &Self)\nwhere\n    // Bounds from impl:\n    T: Clone,\n    A: Allocator + Clone,\n```\n\n---\n\nOverwrites the contents of `self` with a clone of the contents of `source`.\n\nThis method is preferred over simply assigning `source.clone()` to `self`,\nas it avoids reallocation if possible. Additionally, if the element type\n`T` overrides `clone_from()`, this will reuse the resources of `self`'s\nelements as well.\n\n# Examples\n\n```rust\nlet x = vec![5, 6, 7];\nlet mut y = vec![8, 9, 10];\nlet yp: *const i32 = y.as_ptr();\n\ny.clone_from(&x);\n\n// The value is the same\nassert_eq!(x, y);\n\n// And no reallocation occurred\nassert_eq!(yp, y.as_ptr());\n```"}}}
{"id":2401,"type":"edge","label":"textDocument/hover","inV":2400,"outV":303}
{"id":2402,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"alloc::vec::Vec::Clone::clone_from","unique":"scheme","kind":"import"}
{"id":2403,"type":"edge","label":"packageInformation","inV":1870,"outV":2402}
{"id":2404,"type":"edge","label":"moniker","inV":2402,"outV":303}
{"id":2405,"type":"vertex","label":"definitionResult"}
{"id":2406,"type":"vertex","label":"range","start":{"line":2877,"character":7},"end":{"line":2877,"character":17}}
{"id":2407,"type":"edge","label":"contains","inVs":[2406],"outV":1875}
{"id":2408,"type":"edge","label":"item","document":1875,"inVs":[2406],"outV":2405}
{"id":2409,"type":"edge","label":"textDocument/definition","inV":2405,"outV":303}
{"id":2410,"type":"vertex","label":"referenceResult"}
{"id":2411,"type":"edge","label":"textDocument/references","inV":2410,"outV":303}
{"id":2412,"type":"edge","label":"item","document":108,"property":"references","inVs":[302],"outV":2410}
{"id":2413,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nlet player: &mut Player\n```"}}}
{"id":2414,"type":"edge","label":"textDocument/hover","inV":2413,"outV":308}
{"id":2415,"type":"vertex","label":"definitionResult"}
{"id":2416,"type":"edge","label":"item","document":108,"inVs":[307],"outV":2415}
{"id":2417,"type":"edge","label":"textDocument/definition","inV":2415,"outV":308}
{"id":2418,"type":"vertex","label":"referenceResult"}
{"id":2419,"type":"edge","label":"textDocument/references","inV":2418,"outV":308}
{"id":2420,"type":"edge","label":"item","document":108,"property":"definitions","inVs":[307],"outV":2418}
{"id":2421,"type":"edge","label":"item","document":108,"property":"references","inVs":[321],"outV":2418}
{"id":2422,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\ncore::slice\n```\n\n```rust\nimpl<T> [T]\npub fn get_mut<I>(&mut self, index: I) -> Option<&mut I::Output>\nwhere\n    I: SliceIndex<Self>,\n```\n\n---\n\nReturns a mutable reference to an element or subslice depending on the\ntype of index (see [`get`]) or `None` if the index is out of bounds.\n\n# Examples\n\n```rust\nlet x = &mut [0, 1, 2];\n\nif let Some(elem) = x.get_mut(1) {\n    *elem = 42;\n}\nassert_eq!(x, &[0, 42, 2]);\n```"}}}
{"id":2423,"type":"edge","label":"textDocument/hover","inV":2422,"outV":313}
{"id":2424,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"core::slice::get_mut","unique":"scheme","kind":"import"}
{"id":2425,"type":"edge","label":"packageInformation","inV":2072,"outV":2424}
{"id":2426,"type":"edge","label":"moniker","inV":2424,"outV":313}
{"id":2427,"type":"vertex","label":"definitionResult"}
{"id":2428,"type":"vertex","label":"document","uri":"file:///opt/homebrew/Cellar/rust/1.81.0/lib/rustlib/src/rust/library/core/src/slice/mod.rs","languageId":"rust"}
{"id":2429,"type":"vertex","label":"range","start":{"line":637,"character":11},"end":{"line":637,"character":18}}
{"id":2430,"type":"edge","label":"contains","inVs":[2429],"outV":2428}
{"id":2431,"type":"edge","label":"item","document":2428,"inVs":[2429],"outV":2427}
{"id":2432,"type":"edge","label":"textDocument/definition","inV":2427,"outV":313}
{"id":2433,"type":"vertex","label":"referenceResult"}
{"id":2434,"type":"edge","label":"textDocument/references","inV":2433,"outV":313}
{"id":2435,"type":"edge","label":"item","document":108,"property":"references","inVs":[312],"outV":2433}
{"id":2436,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\ncore::option::Option\n```\n\n```rust\nimpl<T> Option<T>\npub const fn unwrap(self) -> T\n```\n\n---\n\nReturns the contained [`Some`](https://doc.rust-lang.org/stable/core/option/enum.Option.html) value, consuming the `self` value.\n\nBecause this function may panic, its use is generally discouraged.\nInstead, prefer to use pattern matching and handle the [`None`](https://doc.rust-lang.org/stable/core/option/enum.Option.html)\ncase explicitly, or call [`unwrap_or`], [`unwrap_or_else`], or\n[`unwrap_or_default`].\n\n# Panics\n\nPanics if the self value equals [`None`](https://doc.rust-lang.org/stable/core/option/enum.Option.html).\n\n# Examples\n\n```rust\nlet x = Some(\"air\");\nassert_eq!(x.unwrap(), \"air\");\n```\n\n```rust\nlet x: Option<&str> = None;\nassert_eq!(x.unwrap(), \"air\"); // fails\n```"}}}
{"id":2437,"type":"edge","label":"textDocument/hover","inV":2436,"outV":316}
{"id":2438,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"core::option::Option::unwrap","unique":"scheme","kind":"import"}
{"id":2439,"type":"edge","label":"packageInformation","inV":2072,"outV":2438}
{"id":2440,"type":"edge","label":"moniker","inV":2438,"outV":316}
{"id":2441,"type":"vertex","label":"definitionResult"}
{"id":2442,"type":"vertex","label":"document","uri":"file:///opt/homebrew/Cellar/rust/1.81.0/lib/rustlib/src/rust/library/core/src/option.rs","languageId":"rust"}
{"id":2443,"type":"vertex","label":"range","start":{"line":966,"character":17},"end":{"line":966,"character":23}}
{"id":2444,"type":"edge","label":"contains","inVs":[2443],"outV":2442}
{"id":2445,"type":"edge","label":"item","document":2442,"inVs":[2443],"outV":2441}
{"id":2446,"type":"edge","label":"textDocument/definition","inV":2441,"outV":316}
{"id":2447,"type":"vertex","label":"referenceResult"}
{"id":2448,"type":"edge","label":"textDocument/references","inV":2447,"outV":316}
{"id":2449,"type":"edge","label":"item","document":108,"property":"references","inVs":[315,347],"outV":2447}
{"id":2450,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nlet steps: &Vec<Step>\n```"}}}
{"id":2451,"type":"edge","label":"textDocument/hover","inV":2450,"outV":319}
{"id":2452,"type":"vertex","label":"definitionResult"}
{"id":2453,"type":"edge","label":"item","document":108,"inVs":[318],"outV":2452}
{"id":2454,"type":"edge","label":"textDocument/definition","inV":2452,"outV":319}
{"id":2455,"type":"vertex","label":"referenceResult"}
{"id":2456,"type":"edge","label":"textDocument/references","inV":2455,"outV":319}
{"id":2457,"type":"edge","label":"item","document":108,"property":"definitions","inVs":[318],"outV":2455}
{"id":2458,"type":"edge","label":"item","document":108,"property":"references","inVs":[328,342],"outV":2455}
{"id":2459,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::game::player::Player\n```\n\n```rust\npub fn get_steps(&self) -> &Vec<step::Step>\n```"}}}
{"id":2460,"type":"edge","label":"textDocument/hover","inV":2459,"outV":324}
{"id":2461,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::player::game::Player::get_steps","unique":"scheme","kind":"export"}
{"id":2462,"type":"edge","label":"packageInformation","inV":1709,"outV":2461}
{"id":2463,"type":"edge","label":"moniker","inV":2461,"outV":324}
{"id":2464,"type":"vertex","label":"definitionResult"}
{"id":2465,"type":"edge","label":"item","document":945,"inVs":[1066],"outV":2464}
{"id":2466,"type":"edge","label":"textDocument/definition","inV":2464,"outV":324}
{"id":2467,"type":"vertex","label":"referenceResult"}
{"id":2468,"type":"edge","label":"textDocument/references","inV":2467,"outV":324}
{"id":2469,"type":"edge","label":"item","document":108,"property":"references","inVs":[323],"outV":2467}
{"id":2470,"type":"edge","label":"item","document":945,"property":"definitions","inVs":[1066],"outV":2467}
{"id":2471,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nusize\n```\n\n---\n\nThe pointer-sized unsigned integer type.\n\nThe size of this primitive is how many bytes it takes to reference any\nlocation in memory. For example, on a 32 bit target, this is 4 bytes\nand on a 64 bit target, this is 8 bytes."}}}
{"id":2472,"type":"edge","label":"textDocument/hover","inV":2471,"outV":337}
{"id":2473,"type":"vertex","label":"referenceResult"}
{"id":2474,"type":"edge","label":"textDocument/references","inV":2473,"outV":337}
{"id":2475,"type":"edge","label":"item","document":108,"property":"references","inVs":[336],"outV":2473}
{"id":2476,"type":"edge","label":"item","document":560,"property":"references","inVs":[738],"outV":2473}
{"id":2477,"type":"edge","label":"item","document":945,"property":"references","inVs":[1010],"outV":2473}
{"id":2478,"type":"edge","label":"item","document":1369,"property":"references","inVs":[1413,1430,1444,1465],"outV":2473}
{"id":2479,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nlet step: &Step\n```"}}}
{"id":2480,"type":"edge","label":"textDocument/hover","inV":2479,"outV":340}
{"id":2481,"type":"vertex","label":"definitionResult"}
{"id":2482,"type":"edge","label":"item","document":108,"inVs":[339],"outV":2481}
{"id":2483,"type":"edge","label":"textDocument/definition","inV":2481,"outV":340}
{"id":2484,"type":"vertex","label":"referenceResult"}
{"id":2485,"type":"edge","label":"textDocument/references","inV":2484,"outV":340}
{"id":2486,"type":"edge","label":"item","document":108,"property":"definitions","inVs":[339],"outV":2484}
{"id":2487,"type":"edge","label":"item","document":108,"property":"references","inVs":[351],"outV":2484}
{"id":2488,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\ncore::slice\n```\n\n```rust\nimpl<T> [T]\npub fn get<I>(&self, index: I) -> Option<&I::Output>\nwhere\n    I: SliceIndex<Self>,\n```\n\n---\n\nReturns a reference to an element or subslice depending on the type of\nindex.\n\n* If given a position, returns a reference to the element at that\n  position or `None` if out of bounds.\n* If given a range, returns the subslice corresponding to that range,\n  or `None` if out of bounds.\n\n# Examples\n\n```rust\nlet v = [10, 40, 30];\nassert_eq!(Some(&40), v.get(1));\nassert_eq!(Some(&[10, 40][..]), v.get(0..2));\nassert_eq!(None, v.get(3));\nassert_eq!(None, v.get(0..4));\n```"}}}
{"id":2489,"type":"edge","label":"textDocument/hover","inV":2488,"outV":345}
{"id":2490,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"core::slice::get","unique":"scheme","kind":"import"}
{"id":2491,"type":"edge","label":"packageInformation","inV":2072,"outV":2490}
{"id":2492,"type":"edge","label":"moniker","inV":2490,"outV":345}
{"id":2493,"type":"vertex","label":"definitionResult"}
{"id":2494,"type":"vertex","label":"range","start":{"line":612,"character":11},"end":{"line":612,"character":14}}
{"id":2495,"type":"edge","label":"contains","inVs":[2494],"outV":2428}
{"id":2496,"type":"edge","label":"item","document":2428,"inVs":[2494],"outV":2493}
{"id":2497,"type":"edge","label":"textDocument/definition","inV":2493,"outV":345}
{"id":2498,"type":"vertex","label":"referenceResult"}
{"id":2499,"type":"edge","label":"textDocument/references","inV":2498,"outV":345}
{"id":2500,"type":"edge","label":"item","document":108,"property":"references","inVs":[344],"outV":2498}
{"id":2501,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::game::player::step::Step\n```\n\n```rust\npub fn get_step_number(&self) -> i32\n```"}}}
{"id":2502,"type":"edge","label":"textDocument/hover","inV":2501,"outV":354}
{"id":2503,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::step::player::game::Step::get_step_number","unique":"scheme","kind":"export"}
{"id":2504,"type":"edge","label":"packageInformation","inV":1709,"outV":2503}
{"id":2505,"type":"edge","label":"moniker","inV":2503,"outV":354}
{"id":2506,"type":"vertex","label":"definitionResult"}
{"id":2507,"type":"edge","label":"item","document":1153,"inVs":[1313],"outV":2506}
{"id":2508,"type":"edge","label":"textDocument/definition","inV":2506,"outV":354}
{"id":2509,"type":"vertex","label":"referenceResult"}
{"id":2510,"type":"edge","label":"textDocument/references","inV":2509,"outV":354}
{"id":2511,"type":"edge","label":"item","document":108,"property":"references","inVs":[353],"outV":2509}
{"id":2512,"type":"edge","label":"item","document":945,"property":"references","inVs":[1126],"outV":2509}
{"id":2513,"type":"edge","label":"item","document":1153,"property":"definitions","inVs":[1313],"outV":2509}
{"id":2514,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::game_test\n```\n\n```rust\nfn test_mocked_game_new_function()\n```"}}}
{"id":2515,"type":"edge","label":"textDocument/hover","inV":2514,"outV":359}
{"id":2516,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::game_test::test_mocked_game_new_function","unique":"scheme","kind":"export"}
{"id":2517,"type":"edge","label":"packageInformation","inV":1709,"outV":2516}
{"id":2518,"type":"edge","label":"moniker","inV":2516,"outV":359}
{"id":2519,"type":"vertex","label":"definitionResult"}
{"id":2520,"type":"edge","label":"item","document":108,"inVs":[358],"outV":2519}
{"id":2521,"type":"edge","label":"textDocument/definition","inV":2519,"outV":359}
{"id":2522,"type":"vertex","label":"referenceResult"}
{"id":2523,"type":"edge","label":"textDocument/references","inV":2522,"outV":359}
{"id":2524,"type":"edge","label":"item","document":108,"property":"definitions","inVs":[358],"outV":2522}
{"id":2525,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nlet step_case_1: Step\n```"}}}
{"id":2526,"type":"edge","label":"textDocument/hover","inV":2525,"outV":362}
{"id":2527,"type":"vertex","label":"definitionResult"}
{"id":2528,"type":"edge","label":"item","document":108,"inVs":[361],"outV":2527}
{"id":2529,"type":"edge","label":"textDocument/definition","inV":2527,"outV":362}
{"id":2530,"type":"vertex","label":"referenceResult"}
{"id":2531,"type":"edge","label":"textDocument/references","inV":2530,"outV":362}
{"id":2532,"type":"edge","label":"item","document":108,"property":"definitions","inVs":[361],"outV":2530}
{"id":2533,"type":"edge","label":"item","document":108,"property":"references","inVs":[381],"outV":2530}
{"id":2534,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::game::player::step\n```\n\n```rust\npub struct Step {\n    pub is_moved: i32,\n    pub step_number: i32,\n}\n```"}}}
{"id":2535,"type":"edge","label":"textDocument/hover","inV":2534,"outV":367}
{"id":2536,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::step::player::game::Step","unique":"scheme","kind":"export"}
{"id":2537,"type":"edge","label":"packageInformation","inV":1709,"outV":2536}
{"id":2538,"type":"edge","label":"moniker","inV":2536,"outV":367}
{"id":2539,"type":"vertex","label":"definitionResult"}
{"id":2540,"type":"edge","label":"item","document":1153,"inVs":[1175],"outV":2539}
{"id":2541,"type":"edge","label":"textDocument/definition","inV":2539,"outV":367}
{"id":2542,"type":"vertex","label":"referenceResult"}
{"id":2543,"type":"edge","label":"textDocument/references","inV":2542,"outV":367}
{"id":2544,"type":"edge","label":"item","document":108,"property":"references","inVs":[366,388,417,445,473],"outV":2542}
{"id":2545,"type":"edge","label":"item","document":945,"property":"references","inVs":[981,1047,1075],"outV":2542}
{"id":2546,"type":"edge","label":"item","document":1153,"property":"definitions","inVs":[1175],"outV":2542}
{"id":2547,"type":"edge","label":"item","document":1153,"property":"references","inVs":[1185,1200,1251,1253,1341],"outV":2542}
{"id":2548,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::game::player::step::Step\n```\n\n```rust\npub step_number: i32\n```"}}}
{"id":2549,"type":"edge","label":"textDocument/hover","inV":2548,"outV":370}
{"id":2550,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::step::player::game::Step::step_number","unique":"scheme","kind":"export"}
{"id":2551,"type":"edge","label":"packageInformation","inV":1709,"outV":2550}
{"id":2552,"type":"edge","label":"moniker","inV":2550,"outV":370}
{"id":2553,"type":"vertex","label":"definitionResult"}
{"id":2554,"type":"edge","label":"item","document":1153,"inVs":[1181],"outV":2553}
{"id":2555,"type":"edge","label":"textDocument/definition","inV":2553,"outV":370}
{"id":2556,"type":"vertex","label":"referenceResult"}
{"id":2557,"type":"edge","label":"textDocument/references","inV":2556,"outV":370}
{"id":2558,"type":"edge","label":"item","document":108,"property":"references","inVs":[369,390,419,447,475],"outV":2556}
{"id":2559,"type":"edge","label":"item","document":1153,"property":"definitions","inVs":[1181],"outV":2556}
{"id":2560,"type":"edge","label":"item","document":1153,"property":"references","inVs":[1274,1278,1288,1292,1322],"outV":2556}
{"id":2561,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::game::player::step::Step\n```\n\n```rust\npub is_moved: i32\n```"}}}
{"id":2562,"type":"edge","label":"textDocument/hover","inV":2561,"outV":373}
{"id":2563,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::step::player::game::Step::is_moved","unique":"scheme","kind":"export"}
{"id":2564,"type":"edge","label":"packageInformation","inV":1709,"outV":2563}
{"id":2565,"type":"edge","label":"moniker","inV":2563,"outV":373}
{"id":2566,"type":"vertex","label":"definitionResult"}
{"id":2567,"type":"edge","label":"item","document":1153,"inVs":[1177],"outV":2566}
{"id":2568,"type":"edge","label":"textDocument/definition","inV":2566,"outV":373}
{"id":2569,"type":"vertex","label":"referenceResult"}
{"id":2570,"type":"edge","label":"textDocument/references","inV":2569,"outV":373}
{"id":2571,"type":"edge","label":"item","document":108,"property":"references","inVs":[372,392,401,421,429,449,457,477,485],"outV":2569}
{"id":2572,"type":"edge","label":"item","document":1153,"property":"definitions","inVs":[1177],"outV":2569}
{"id":2573,"type":"edge","label":"item","document":1153,"property":"references","inVs":[1210,1264,1268,1282,1334,1361],"outV":2569}
{"id":2574,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nlet step_case_1_optional: Option<&Step>\n```"}}}
{"id":2575,"type":"edge","label":"textDocument/hover","inV":2574,"outV":376}
{"id":2576,"type":"vertex","label":"definitionResult"}
{"id":2577,"type":"edge","label":"item","document":108,"inVs":[375],"outV":2576}
{"id":2578,"type":"edge","label":"textDocument/definition","inV":2576,"outV":376}
{"id":2579,"type":"vertex","label":"referenceResult"}
{"id":2580,"type":"edge","label":"textDocument/references","inV":2579,"outV":376}
{"id":2581,"type":"edge","label":"item","document":108,"property":"definitions","inVs":[375],"outV":2579}
{"id":2582,"type":"edge","label":"item","document":108,"property":"references","inVs":[403],"outV":2579}
{"id":2583,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\ncore::option::Option\n```\n\n```rust\nSome(T)\n```\n\n---\n\nSome value of type `T`."}}}
{"id":2584,"type":"edge","label":"textDocument/hover","inV":2583,"outV":379}
{"id":2585,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"core::option::Some","unique":"scheme","kind":"import"}
{"id":2586,"type":"edge","label":"packageInformation","inV":2072,"outV":2585}
{"id":2587,"type":"edge","label":"moniker","inV":2585,"outV":379}
{"id":2588,"type":"vertex","label":"definitionResult"}
{"id":2589,"type":"vertex","label":"range","start":{"line":581,"character":4},"end":{"line":581,"character":8}}
{"id":2590,"type":"edge","label":"contains","inVs":[2589],"outV":2442}
{"id":2591,"type":"edge","label":"item","document":2442,"inVs":[2589],"outV":2588}
{"id":2592,"type":"edge","label":"textDocument/definition","inV":2588,"outV":379}
{"id":2593,"type":"vertex","label":"referenceResult"}
{"id":2594,"type":"edge","label":"textDocument/references","inV":2593,"outV":379}
{"id":2595,"type":"edge","label":"item","document":108,"property":"references","inVs":[378,408,436,464],"outV":2593}
{"id":2596,"type":"edge","label":"item","document":1153,"property":"references","inVs":[1255],"outV":2593}
{"id":2597,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nlet mut step_case_2: Step\n```"}}}
{"id":2598,"type":"edge","label":"textDocument/hover","inV":2597,"outV":384}
{"id":2599,"type":"vertex","label":"definitionResult"}
{"id":2600,"type":"edge","label":"item","document":108,"inVs":[383],"outV":2599}
{"id":2601,"type":"edge","label":"textDocument/definition","inV":2599,"outV":384}
{"id":2602,"type":"vertex","label":"referenceResult"}
{"id":2603,"type":"edge","label":"textDocument/references","inV":2602,"outV":384}
{"id":2604,"type":"edge","label":"item","document":108,"property":"definitions","inVs":[383],"outV":2602}
{"id":2605,"type":"edge","label":"item","document":108,"property":"references","inVs":[394,399,410],"outV":2602}
{"id":2606,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::game::player::step::Step\n```\n\n```rust\npub fn update_this_step_move_number(&mut self, this_step_move_number: i32, last_step: Option<&Step>) -> Step\n```"}}}
{"id":2607,"type":"edge","label":"textDocument/hover","inV":2606,"outV":397}
{"id":2608,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::step::player::game::Step::update_this_step_move_number","unique":"scheme","kind":"export"}
{"id":2609,"type":"edge","label":"packageInformation","inV":1709,"outV":2608}
{"id":2610,"type":"edge","label":"moniker","inV":2608,"outV":397}
{"id":2611,"type":"vertex","label":"definitionResult"}
{"id":2612,"type":"edge","label":"item","document":1153,"inVs":[1236],"outV":2611}
{"id":2613,"type":"edge","label":"textDocument/definition","inV":2611,"outV":397}
{"id":2614,"type":"vertex","label":"referenceResult"}
{"id":2615,"type":"edge","label":"textDocument/references","inV":2614,"outV":397}
{"id":2616,"type":"edge","label":"item","document":108,"property":"references","inVs":[396,425,453,481],"outV":2614}
{"id":2617,"type":"edge","label":"item","document":1153,"property":"references","inVs":[1226],"outV":2614}
{"id":2618,"type":"edge","label":"item","document":1153,"property":"definitions","inVs":[1236],"outV":2614}
{"id":2619,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nlet step_case_2_optional: Option<&Step>\n```"}}}
{"id":2620,"type":"edge","label":"textDocument/hover","inV":2619,"outV":406}
{"id":2621,"type":"vertex","label":"definitionResult"}
{"id":2622,"type":"edge","label":"item","document":108,"inVs":[405],"outV":2621}
{"id":2623,"type":"edge","label":"textDocument/definition","inV":2621,"outV":406}
{"id":2624,"type":"vertex","label":"referenceResult"}
{"id":2625,"type":"edge","label":"textDocument/references","inV":2624,"outV":406}
{"id":2626,"type":"edge","label":"item","document":108,"property":"definitions","inVs":[405],"outV":2624}
{"id":2627,"type":"edge","label":"item","document":108,"property":"references","inVs":[431],"outV":2624}
{"id":2628,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nlet mut step_case_3: Step\n```"}}}
{"id":2629,"type":"edge","label":"textDocument/hover","inV":2628,"outV":413}
{"id":2630,"type":"vertex","label":"definitionResult"}
{"id":2631,"type":"edge","label":"item","document":108,"inVs":[412],"outV":2630}
{"id":2632,"type":"edge","label":"textDocument/definition","inV":2630,"outV":413}
{"id":2633,"type":"vertex","label":"referenceResult"}
{"id":2634,"type":"edge","label":"textDocument/references","inV":2633,"outV":413}
{"id":2635,"type":"edge","label":"item","document":108,"property":"definitions","inVs":[412],"outV":2633}
{"id":2636,"type":"edge","label":"item","document":108,"property":"references","inVs":[423,427,438],"outV":2633}
{"id":2637,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nlet step_case_3_optional: Option<&Step>\n```"}}}
{"id":2638,"type":"edge","label":"textDocument/hover","inV":2637,"outV":434}
{"id":2639,"type":"vertex","label":"definitionResult"}
{"id":2640,"type":"edge","label":"item","document":108,"inVs":[433],"outV":2639}
{"id":2641,"type":"edge","label":"textDocument/definition","inV":2639,"outV":434}
{"id":2642,"type":"vertex","label":"referenceResult"}
{"id":2643,"type":"edge","label":"textDocument/references","inV":2642,"outV":434}
{"id":2644,"type":"edge","label":"item","document":108,"property":"definitions","inVs":[433],"outV":2642}
{"id":2645,"type":"edge","label":"item","document":108,"property":"references","inVs":[459],"outV":2642}
{"id":2646,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nlet mut step_case_4: Step\n```"}}}
{"id":2647,"type":"edge","label":"textDocument/hover","inV":2646,"outV":441}
{"id":2648,"type":"vertex","label":"definitionResult"}
{"id":2649,"type":"edge","label":"item","document":108,"inVs":[440],"outV":2648}
{"id":2650,"type":"edge","label":"textDocument/definition","inV":2648,"outV":441}
{"id":2651,"type":"vertex","label":"referenceResult"}
{"id":2652,"type":"edge","label":"textDocument/references","inV":2651,"outV":441}
{"id":2653,"type":"edge","label":"item","document":108,"property":"definitions","inVs":[440],"outV":2651}
{"id":2654,"type":"edge","label":"item","document":108,"property":"references","inVs":[451,455,466],"outV":2651}
{"id":2655,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nlet step_case_4_optional: Option<&Step>\n```"}}}
{"id":2656,"type":"edge","label":"textDocument/hover","inV":2655,"outV":462}
{"id":2657,"type":"vertex","label":"definitionResult"}
{"id":2658,"type":"edge","label":"item","document":108,"inVs":[461],"outV":2657}
{"id":2659,"type":"edge","label":"textDocument/definition","inV":2657,"outV":462}
{"id":2660,"type":"vertex","label":"referenceResult"}
{"id":2661,"type":"edge","label":"textDocument/references","inV":2660,"outV":462}
{"id":2662,"type":"edge","label":"item","document":108,"property":"definitions","inVs":[461],"outV":2660}
{"id":2663,"type":"edge","label":"item","document":108,"property":"references","inVs":[487],"outV":2660}
{"id":2664,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nlet mut step_case_5: Step\n```"}}}
{"id":2665,"type":"edge","label":"textDocument/hover","inV":2664,"outV":469}
{"id":2666,"type":"vertex","label":"definitionResult"}
{"id":2667,"type":"edge","label":"item","document":108,"inVs":[468],"outV":2666}
{"id":2668,"type":"edge","label":"textDocument/definition","inV":2666,"outV":469}
{"id":2669,"type":"vertex","label":"referenceResult"}
{"id":2670,"type":"edge","label":"textDocument/references","inV":2669,"outV":469}
{"id":2671,"type":"edge","label":"item","document":108,"property":"definitions","inVs":[468],"outV":2669}
{"id":2672,"type":"edge","label":"item","document":108,"property":"references","inVs":[479,483],"outV":2669}
{"id":2673,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nlet players_name: Vec<String>\n```"}}}
{"id":2674,"type":"edge","label":"textDocument/hover","inV":2673,"outV":490}
{"id":2675,"type":"vertex","label":"definitionResult"}
{"id":2676,"type":"edge","label":"item","document":108,"inVs":[489],"outV":2675}
{"id":2677,"type":"edge","label":"textDocument/definition","inV":2675,"outV":490}
{"id":2678,"type":"vertex","label":"referenceResult"}
{"id":2679,"type":"edge","label":"textDocument/references","inV":2678,"outV":490}
{"id":2680,"type":"edge","label":"item","document":108,"property":"definitions","inVs":[489],"outV":2678}
{"id":2681,"type":"edge","label":"item","document":108,"property":"references","inVs":[529],"outV":2678}
{"id":2682,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nlet ctx: Context\n```"}}}
{"id":2683,"type":"edge","label":"textDocument/hover","inV":2682,"outV":501}
{"id":2684,"type":"vertex","label":"definitionResult"}
{"id":2685,"type":"edge","label":"item","document":108,"inVs":[500],"outV":2684}
{"id":2686,"type":"edge","label":"textDocument/definition","inV":2684,"outV":501}
{"id":2687,"type":"vertex","label":"referenceResult"}
{"id":2688,"type":"edge","label":"textDocument/references","inV":2687,"outV":501}
{"id":2689,"type":"edge","label":"item","document":108,"property":"definitions","inVs":[500],"outV":2687}
{"id":2690,"type":"edge","label":"item","document":108,"property":"references","inVs":[508],"outV":2687}
{"id":2691,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::game::MockGameFn\n```\n\n```rust\npub fn new_context() -> __mock_MockGameFn_GameFn::__new::Context\n```\n\n---\n\nCreate a [`Context`](https://docs.rs/rust_racingcar/0.1.0/rust_racingcar/game/__mock_MockGameFn_GameFn/__new/struct.Context.html) for mocking the `new` method"}}}
{"id":2692,"type":"edge","label":"textDocument/hover","inV":2691,"outV":506}
{"id":2693,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::game::MockGameFn::new_context","unique":"scheme","kind":"export"}
{"id":2694,"type":"edge","label":"packageInformation","inV":1709,"outV":2693}
{"id":2695,"type":"edge","label":"moniker","inV":2693,"outV":506}
{"id":2696,"type":"vertex","label":"definitionResult"}
{"id":2697,"type":"edge","label":"item","document":560,"inVs":[609],"outV":2696}
{"id":2698,"type":"edge","label":"textDocument/definition","inV":2696,"outV":506}
{"id":2699,"type":"vertex","label":"referenceResult"}
{"id":2700,"type":"edge","label":"textDocument/references","inV":2699,"outV":506}
{"id":2701,"type":"edge","label":"item","document":108,"property":"references","inVs":[505],"outV":2699}
{"id":2702,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::game::__mock_MockGameFn_GameFn::__new::Context\n```\n\n```rust\npub fn expect<'__mockall_lt>(&self) -> ExpectationGuard<'__mockall_lt>\n```\n\n---\n\nCreate a new expectation for this method."}}}
{"id":2703,"type":"edge","label":"textDocument/hover","inV":2702,"outV":511}
{"id":2704,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::__new::__mock_MockGameFn_GameFn::game::Context::expect","unique":"scheme","kind":"export"}
{"id":2705,"type":"edge","label":"packageInformation","inV":1709,"outV":2704}
{"id":2706,"type":"edge","label":"moniker","inV":2704,"outV":511}
{"id":2707,"type":"vertex","label":"definitionResult"}
{"id":2708,"type":"vertex","label":"range","start":{"line":11,"character":0},"end":{"line":11,"character":11}}
{"id":2709,"type":"edge","label":"contains","inVs":[2708],"outV":560}
{"id":2710,"type":"edge","label":"item","document":560,"inVs":[2708],"outV":2707}
{"id":2711,"type":"edge","label":"textDocument/definition","inV":2707,"outV":511}
{"id":2712,"type":"vertex","label":"referenceResult"}
{"id":2713,"type":"edge","label":"textDocument/references","inV":2712,"outV":511}
{"id":2714,"type":"edge","label":"item","document":108,"property":"references","inVs":[510],"outV":2712}
{"id":2715,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::game::__mock_MockGameFn_GameFn::__new::ExpectationGuard\n```\n\n```rust\nimpl<'__mockall_lt> ExpectationGuard<'__mockall_lt>\npub fn returning<MockallF>(&mut self, __mockall_f: MockallF) -> &mut Expectation\nwhere\n    MockallF: FnMut(Vec<String>, i32, i32) -> MockGameFn + Send + 'static,\n```\n\n---\n\nJust like\n[`Expectation::returning`](https://docs.rs/rust_racingcar/0.1.0/rust_racingcar/game/__mock_MockGameFn_GameFn/__new/struct.Expectation.html#method.returning)"}}}
{"id":2716,"type":"edge","label":"textDocument/hover","inV":2715,"outV":514}
{"id":2717,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::__new::__mock_MockGameFn_GameFn::game::ExpectationGuard::returning","unique":"scheme","kind":"export"}
{"id":2718,"type":"edge","label":"packageInformation","inV":1709,"outV":2717}
{"id":2719,"type":"edge","label":"moniker","inV":2717,"outV":514}
{"id":2720,"type":"vertex","label":"definitionResult"}
{"id":2721,"type":"vertex","label":"range","start":{"line":11,"character":0},"end":{"line":11,"character":11}}
{"id":2722,"type":"edge","label":"contains","inVs":[2721],"outV":560}
{"id":2723,"type":"edge","label":"item","document":560,"inVs":[2721],"outV":2720}
{"id":2724,"type":"edge","label":"textDocument/definition","inV":2720,"outV":514}
{"id":2725,"type":"vertex","label":"referenceResult"}
{"id":2726,"type":"edge","label":"textDocument/references","inV":2725,"outV":514}
{"id":2727,"type":"edge","label":"item","document":108,"property":"references","inVs":[513],"outV":2725}
{"id":2728,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::game::MockGameFn\n```\n\n```rust\nfn default() -> Self\n```\n\n---\n\nReturns the \"default value\" for a type.\n\nDefault values are often some kind of initial value, identity value, or anything else that\nmay make sense as a default.\n\n# Examples\n\nUsing built-in default values:\n\n```rust\nlet i: i8 = Default::default();\nlet (x, y): (Option<String>, f64) = Default::default();\nlet (a, b, (c, d)): (i32, u32, (bool, bool)) = Default::default();\n```\n\nMaking your own:\n\n```rust\nenum Kind {\n    A,\n    B,\n    C,\n}\n\nimpl Default for Kind {\n    fn default() -> Self { Kind::A }\n}\n```"}}}
{"id":2729,"type":"edge","label":"textDocument/hover","inV":2728,"outV":519}
{"id":2730,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::game::MockGameFn::Default::default","unique":"scheme","kind":"export"}
{"id":2731,"type":"edge","label":"packageInformation","inV":1709,"outV":2730}
{"id":2732,"type":"edge","label":"moniker","inV":2730,"outV":519}
{"id":2733,"type":"vertex","label":"definitionResult"}
{"id":2734,"type":"vertex","label":"range","start":{"line":11,"character":0},"end":{"line":11,"character":11}}
{"id":2735,"type":"edge","label":"contains","inVs":[2734],"outV":560}
{"id":2736,"type":"edge","label":"item","document":560,"inVs":[2734],"outV":2733}
{"id":2737,"type":"edge","label":"textDocument/definition","inV":2733,"outV":519}
{"id":2738,"type":"vertex","label":"referenceResult"}
{"id":2739,"type":"edge","label":"textDocument/references","inV":2738,"outV":519}
{"id":2740,"type":"edge","label":"item","document":108,"property":"references","inVs":[518,541],"outV":2738}
{"id":2741,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nlet mut mock_foo: MockGameFn\n```"}}}
{"id":2742,"type":"edge","label":"textDocument/hover","inV":2741,"outV":522}
{"id":2743,"type":"vertex","label":"definitionResult"}
{"id":2744,"type":"edge","label":"item","document":108,"inVs":[521],"outV":2743}
{"id":2745,"type":"edge","label":"textDocument/definition","inV":2743,"outV":522}
{"id":2746,"type":"vertex","label":"referenceResult"}
{"id":2747,"type":"edge","label":"textDocument/references","inV":2746,"outV":522}
{"id":2748,"type":"edge","label":"item","document":108,"property":"definitions","inVs":[521],"outV":2746}
{"id":2749,"type":"edge","label":"item","document":108,"property":"references","inVs":[531,543,551],"outV":2746}
{"id":2750,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::game::MockGameFn\n```\n\n```rust\nfn new(player_names: Vec<String>, the_number_of_cars: i32, the_number_of_attempts: i32) -> MockGameFn\n```"}}}
{"id":2751,"type":"edge","label":"textDocument/hover","inV":2750,"outV":527}
{"id":2752,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::game::MockGameFn::GameFn::new","unique":"scheme","kind":"export"}
{"id":2753,"type":"edge","label":"packageInformation","inV":1709,"outV":2752}
{"id":2754,"type":"edge","label":"moniker","inV":2752,"outV":527}
{"id":2755,"type":"vertex","label":"definitionResult"}
{"id":2756,"type":"edge","label":"item","document":560,"inVs":[609],"outV":2755}
{"id":2757,"type":"edge","label":"textDocument/definition","inV":2755,"outV":527}
{"id":2758,"type":"vertex","label":"referenceResult"}
{"id":2759,"type":"edge","label":"textDocument/references","inV":2758,"outV":527}
{"id":2760,"type":"edge","label":"item","document":108,"property":"references","inVs":[526],"outV":2758}
{"id":2761,"type":"edge","label":"item","document":560,"property":"definitions","inVs":[609],"outV":2758}
{"id":2762,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::game::MockGameFn\n```\n\n```rust\npub fn expect_initialize_players(&mut self) -> &mut __mock_MockGameFn_GameFn::__initialize_players::Expectation\n```\n\n---\n\nCreate an [`Expectation`](https://docs.rs/rust_racingcar/0.1.0/rust_racingcar/game/__mock_MockGameFn_GameFn/__initialize_players/struct.Expectation.html) for mocking the `initialize_players` method"}}}
{"id":2763,"type":"edge","label":"textDocument/hover","inV":2762,"outV":534}
{"id":2764,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::game::MockGameFn::expect_initialize_players","unique":"scheme","kind":"export"}
{"id":2765,"type":"edge","label":"packageInformation","inV":1709,"outV":2764}
{"id":2766,"type":"edge","label":"moniker","inV":2764,"outV":534}
{"id":2767,"type":"vertex","label":"definitionResult"}
{"id":2768,"type":"edge","label":"item","document":560,"inVs":[676],"outV":2767}
{"id":2769,"type":"edge","label":"textDocument/definition","inV":2767,"outV":534}
{"id":2770,"type":"vertex","label":"referenceResult"}
{"id":2771,"type":"edge","label":"textDocument/references","inV":2770,"outV":534}
{"id":2772,"type":"edge","label":"item","document":108,"property":"references","inVs":[533],"outV":2770}
{"id":2773,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::game::__mock_MockGameFn_GameFn::__initialize_players::Expectation\n```\n\n```rust\npub fn returning<MockallF>(&mut self, __mockall_f: MockallF) -> &mut Self\nwhere\n    MockallF: FnMut(&Vec<String>) -> MockGameFn + Send + 'static,\n```\n\n---\n\nSupply a closure that will provide the return value for this\n`Expectation`.  The method's arguments are passed to the\nclosure by value."}}}
{"id":2774,"type":"edge","label":"textDocument/hover","inV":2773,"outV":537}
{"id":2775,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::__initialize_players::__mock_MockGameFn_GameFn::game::Expectation::returning","unique":"scheme","kind":"export"}
{"id":2776,"type":"edge","label":"packageInformation","inV":1709,"outV":2775}
{"id":2777,"type":"edge","label":"moniker","inV":2775,"outV":537}
{"id":2778,"type":"vertex","label":"definitionResult"}
{"id":2779,"type":"vertex","label":"range","start":{"line":11,"character":0},"end":{"line":11,"character":11}}
{"id":2780,"type":"edge","label":"contains","inVs":[2779],"outV":560}
{"id":2781,"type":"edge","label":"item","document":560,"inVs":[2779],"outV":2778}
{"id":2782,"type":"edge","label":"textDocument/definition","inV":2778,"outV":537}
{"id":2783,"type":"vertex","label":"referenceResult"}
{"id":2784,"type":"edge","label":"textDocument/references","inV":2783,"outV":537}
{"id":2785,"type":"edge","label":"item","document":108,"property":"references","inVs":[536],"outV":2783}
{"id":2786,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::game::MockGameFn\n```\n\n```rust\npub fn expect_get_number_of_attempts(&mut self) -> &mut __mock_MockGameFn_GameFn::__get_number_of_attempts::Expectation\n```\n\n---\n\nCreate an [`Expectation`](https://docs.rs/rust_racingcar/0.1.0/rust_racingcar/game/__mock_MockGameFn_GameFn/__get_number_of_attempts/struct.Expectation.html) for mocking the `get_number_of_attempts` method"}}}
{"id":2787,"type":"edge","label":"textDocument/hover","inV":2786,"outV":546}
{"id":2788,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::game::MockGameFn::expect_get_number_of_attempts","unique":"scheme","kind":"export"}
{"id":2789,"type":"edge","label":"packageInformation","inV":1709,"outV":2788}
{"id":2790,"type":"edge","label":"moniker","inV":2788,"outV":546}
{"id":2791,"type":"vertex","label":"definitionResult"}
{"id":2792,"type":"edge","label":"item","document":560,"inVs":[668],"outV":2791}
{"id":2793,"type":"edge","label":"textDocument/definition","inV":2791,"outV":546}
{"id":2794,"type":"vertex","label":"referenceResult"}
{"id":2795,"type":"edge","label":"textDocument/references","inV":2794,"outV":546}
{"id":2796,"type":"edge","label":"item","document":108,"property":"references","inVs":[545],"outV":2794}
{"id":2797,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::game::__mock_MockGameFn_GameFn::__get_number_of_attempts::Expectation\n```\n\n```rust\npub fn returning<MockallF>(&mut self, __mockall_f: MockallF) -> &mut Self\nwhere\n    MockallF: FnMut() -> i32 + Send + 'static,\n```\n\n---\n\nSupply a closure that will provide the return value for this\n`Expectation`.  The method's arguments are passed to the\nclosure by value."}}}
{"id":2798,"type":"edge","label":"textDocument/hover","inV":2797,"outV":549}
{"id":2799,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::__get_number_of_attempts::__mock_MockGameFn_GameFn::game::Expectation::returning","unique":"scheme","kind":"export"}
{"id":2800,"type":"edge","label":"packageInformation","inV":1709,"outV":2799}
{"id":2801,"type":"edge","label":"moniker","inV":2799,"outV":549}
{"id":2802,"type":"vertex","label":"definitionResult"}
{"id":2803,"type":"vertex","label":"range","start":{"line":11,"character":0},"end":{"line":11,"character":11}}
{"id":2804,"type":"edge","label":"contains","inVs":[2803],"outV":560}
{"id":2805,"type":"edge","label":"item","document":560,"inVs":[2803],"outV":2802}
{"id":2806,"type":"edge","label":"textDocument/definition","inV":2802,"outV":549}
{"id":2807,"type":"vertex","label":"referenceResult"}
{"id":2808,"type":"edge","label":"textDocument/references","inV":2807,"outV":549}
{"id":2809,"type":"edge","label":"item","document":108,"property":"references","inVs":[548],"outV":2807}
{"id":2810,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::game::MockGameFn\n```\n\n```rust\npub fn expect_get_number_of_players(&mut self) -> &mut __mock_MockGameFn_GameFn::__get_number_of_players::Expectation\n```\n\n---\n\nCreate an [`Expectation`](https://docs.rs/rust_racingcar/0.1.0/rust_racingcar/game/__mock_MockGameFn_GameFn/__get_number_of_players/struct.Expectation.html) for mocking the `get_number_of_players` method"}}}
{"id":2811,"type":"edge","label":"textDocument/hover","inV":2810,"outV":554}
{"id":2812,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::game::MockGameFn::expect_get_number_of_players","unique":"scheme","kind":"export"}
{"id":2813,"type":"edge","label":"packageInformation","inV":1709,"outV":2812}
{"id":2814,"type":"edge","label":"moniker","inV":2812,"outV":554}
{"id":2815,"type":"vertex","label":"definitionResult"}
{"id":2816,"type":"edge","label":"item","document":560,"inVs":[660],"outV":2815}
{"id":2817,"type":"edge","label":"textDocument/definition","inV":2815,"outV":554}
{"id":2818,"type":"vertex","label":"referenceResult"}
{"id":2819,"type":"edge","label":"textDocument/references","inV":2818,"outV":554}
{"id":2820,"type":"edge","label":"item","document":108,"property":"references","inVs":[553],"outV":2818}
{"id":2821,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::game::__mock_MockGameFn_GameFn::__get_number_of_players::Expectation\n```\n\n```rust\npub fn returning<MockallF>(&mut self, __mockall_f: MockallF) -> &mut Self\nwhere\n    MockallF: FnMut() -> i32 + Send + 'static,\n```\n\n---\n\nSupply a closure that will provide the return value for this\n`Expectation`.  The method's arguments are passed to the\nclosure by value."}}}
{"id":2822,"type":"edge","label":"textDocument/hover","inV":2821,"outV":557}
{"id":2823,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::__get_number_of_players::__mock_MockGameFn_GameFn::game::Expectation::returning","unique":"scheme","kind":"export"}
{"id":2824,"type":"edge","label":"packageInformation","inV":1709,"outV":2823}
{"id":2825,"type":"edge","label":"moniker","inV":2823,"outV":557}
{"id":2826,"type":"vertex","label":"definitionResult"}
{"id":2827,"type":"vertex","label":"range","start":{"line":11,"character":0},"end":{"line":11,"character":11}}
{"id":2828,"type":"edge","label":"contains","inVs":[2827],"outV":560}
{"id":2829,"type":"edge","label":"item","document":560,"inVs":[2827],"outV":2826}
{"id":2830,"type":"edge","label":"textDocument/definition","inV":2826,"outV":557}
{"id":2831,"type":"vertex","label":"referenceResult"}
{"id":2832,"type":"edge","label":"textDocument/references","inV":2831,"outV":557}
{"id":2833,"type":"edge","label":"item","document":108,"property":"references","inVs":[556],"outV":2831}
{"id":2834,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nextern crate mockall\n```\n\n---\n\nA powerful mock object library for Rust.\n\nMockall provides tools to create mock versions of almost any trait\nor struct. They can be used in unit tests as a stand-in for the real\nobject.\n\n# Usage\n\nThere are two ways to use Mockall.  The easiest is to use\n[`#[automock]`](https://docs.rs/mockall/0.11.3/mockall/attr.automock.html).  It can mock most traits, or structs\nthat only have a single `impl` block.  For things it can't handle, there is\n[`mock!`](https://docs.rs/mockall/0.11.3/mockall/macro.mock.html).\n\nWhichever method is used, the basic idea is the same.\n\n* Create a mock struct.  It's name will be the same as the original, with\n  \"Mock\" prepended.\n* In your test, instantiate the mock struct with its `new` or `default`\n  method.\n* Set expectations on the mock struct.  Each expectation can have required\n  argument matchers, a required call count, and a required position in a\n  [`Sequence`].  Each expectation must also have a return value.\n* Supply the mock object to the code that you're testing.  It will return\n  the preprogrammed return values supplied in the previous step.  Any\n  accesses contrary to your expectations will cause a panic.\n\n# User Guide\n\n* [`Getting started`](https://docs.rs/mockall/0.11.3/mockall/index.html#getting-started)\n* [`Static Return values`](https://docs.rs/mockall/0.11.3/mockall/index.html#static-return-values)\n* [`Matching arguments`](https://docs.rs/mockall/0.11.3/mockall/index.html#matching-arguments)\n* [`Call counts`](https://docs.rs/mockall/0.11.3/mockall/index.html#call-counts)\n* [`Sequences`](https://docs.rs/mockall/0.11.3/mockall/index.html#sequences)\n* [`Checkpoints`](https://docs.rs/mockall/0.11.3/mockall/index.html#checkpoints)\n* [`Reference arguments`](https://docs.rs/mockall/0.11.3/mockall/index.html#reference-arguments)\n* [`Reference return values`](https://docs.rs/mockall/0.11.3/mockall/index.html#reference-return-values)\n* [`impl Trait`](https://docs.rs/mockall/0.11.3/mockall/index.html#impl-trait)\n* [`Mocking structs`](https://docs.rs/mockall/0.11.3/mockall/index.html#mocking-structs)\n* [`Generic methods`](https://docs.rs/mockall/0.11.3/mockall/index.html#generic-methods)\n* [`Methods with generic lifetimes`](https://docs.rs/mockall/0.11.3/mockall/index.html#methods-with-generic-lifetimes)\n* [`Generic traits and structs`](https://docs.rs/mockall/0.11.3/mockall/index.html#generic-traits-and-structs)\n* [`Associated types`](https://docs.rs/mockall/0.11.3/mockall/index.html#associated-types-1)\n* [`Multiple and inherited traits`](https://docs.rs/mockall/0.11.3/mockall/index.html#multiple-and-inherited-traits)\n* [`External traits`](https://docs.rs/mockall/0.11.3/mockall/index.html#external-traits)\n* [`Static methods`](https://docs.rs/mockall/0.11.3/mockall/index.html#static-methods)\n* [`Modules`](https://docs.rs/mockall/0.11.3/mockall/index.html#modules)\n* [`Foreign functions`](https://docs.rs/mockall/0.11.3/mockall/index.html#foreign-functions)\n* [`Debug`](https://docs.rs/mockall/0.11.3/mockall/index.html#debug)\n* [`Async Traits`](https://docs.rs/mockall/0.11.3/mockall/index.html#async-traits)\n* [`Crate features`](https://docs.rs/mockall/0.11.3/mockall/index.html#crate-features)\n* [`Examples`](https://docs.rs/mockall/0.11.3/mockall/index.html#examples)\n\n## Getting Started\n\n```rust\nuse mockall::*;\nuse mockall::predicate::*;\n#[automock]\ntrait MyTrait {\n    fn foo(&self, x: u32) -> u32;\n}\n\nfn call_with_four(x: &MyTrait) -> u32 {\n    x.foo(4)\n}\n\nlet mut mock = MockMyTrait::new();\nmock.expect_foo()\n    .with(predicate::eq(4))\n    .times(1)\n    .returning(|x| x + 1);\nassert_eq!(5, call_with_four(&mock));\n```\n\n## Static Return values\n\nEvery expectation must have an associated return value (though when the\n**nightly** feature is enabled expectations will automatically return the\ndefault values of their return types, if their return types implement\n`Default`.).  For methods that return a `static` value, the macros will\ngenerate an `Expectation` struct like\n[`this`](examples::__mock_MockFoo_Foo::__foo::Expectation).\nThere are two ways to set such an expectation's return value: with a\nconstant\n([`return_const`](examples::__mock_MockFoo_Foo::__foo::Expectation::return_const))\nor a closure\n([`returning`](examples::__mock_MockFoo_Foo::__foo::Expectation::returning)).\nA closure will take the method's arguments by value.\n\n```rust\n#[automock]\ntrait MyTrait {\n    fn foo(&self) -> u32;\n    fn bar(&self, x: u32, y: u32) -> u32;\n}\n\nlet mut mock = MockMyTrait::new();\nmock.expect_foo()\n    .return_const(42u32);\nmock.expect_bar()\n    .returning(|x, y| x + y);\n```\n\nAdditionally, constants that aren't `Clone` can be returned with the\n[`return_once`](examples::__mock_MockFoo_Foo::__foo::Expectation::return_once)\nmethod.\n\n```rust\nstruct NonClone();\n#[automock]\ntrait Foo {\n    fn foo(&self) -> NonClone;\n}\n\nlet mut mock = MockFoo::new();\nlet r = NonClone{};\nmock.expect_foo()\n    .return_once(move || r);\n```\n\n`return_once` can also be used for computing the return value with an\n`FnOnce` closure.  This is useful for returning a non-`Clone` value and also\ntriggering side effects at the same time.\n\n```rust\nfn do_something() {}\n\nstruct NonClone();\n\n#[automock]\ntrait Foo {\n    fn foo(&self) -> NonClone;\n}\n\nlet mut mock = MockFoo::new();\nlet r = NonClone{};\nmock.expect_foo()\n    .return_once(move || {\n        do_something();\n        r\n    });\n```\n\nMock objects are always `Send`.  If you need to use a return type that\nisn't, you can use the\n[`return_const_st`](examples::__mock_MockFoo_Foo::__foo::Expectation::return_const_st),\n[`returning_st`](examples::__mock_MockFoo_Foo::__foo::Expectation::returning_st),\nor\n[`return_once_st`](examples::__mock_MockFoo_Foo::__foo::Expectation::return_once_st),\nmethods. If you need to match arguments that are not `Send`, you can use the\n[`withf_st`](examples::__mock_MockFoo_Foo::__foo::Expectation::withf_st)\nThese take a non-`Send` object and add runtime access checks.  The wrapped\nobject will be `Send`, but accessing it from multiple threads will cause a\nruntime panic.\n\n```rust\n#[automock]\ntrait Foo {\n    fn foo(&self, x: Rc<u32>) -> Rc<u32>;   // Rc<u32> isn't Send\n}\n\nlet mut mock = MockFoo::new();\nlet x = Rc::new(5);\nlet argument = x.clone();\nmock.expect_foo()\n    .withf_st(move |x| *x == argument)\n    .returning_st(move |_| Rc::new(42u32));\nassert_eq!(42, *mock.foo(x));\n```\n\n## Matching arguments\n\nOptionally, expectations may have argument matchers set.  A matcher will\nverify that the expectation was called with the expected arguments, or panic\notherwise.  A matcher is anything that implements the [`Predicate`](https://docs.rs/mockall/0.11.3/mockall/trait.Predicate.html) trait.\nFor example:\n\n```rust\n#[automock]\ntrait Foo {\n    fn foo(&self, x: u32);\n}\n\nlet mut mock = MockFoo::new();\nmock.expect_foo()\n    .with(eq(42))\n    .return_const(());\n\nmock.foo(0);    // Panics!\n```\n\nSee [`predicate`](https://docs.rs/mockall/0.11.3/mockall/trait.Predicate.html) for a list of Mockall's builtin predicate functions.\nFor convenience,\n[`withf`](examples::__mock_MockFoo_Foo::__foo::Expectation::withf)\nis a shorthand for setting the commonly used\n[`function`](https://docs.rs/mockall/0.11.3/mockall/predicate/fn.function.html) predicate.  The arguments to the predicate function are the\nmethod's arguments, *by reference*.  For example:\n\n```rust\n#[automock]\ntrait Foo {\n    fn foo(&self, x: u32, y: u32);\n}\n\nlet mut mock = MockFoo::new();\nmock.expect_foo()\n    .withf(|x: &u32, y: &u32| x == y)\n    .return_const(());\n\nmock.foo(2 + 2, 5);    // Panics!\n```\n\n### Matching multiple calls\n\nMatchers can also be used to discriminate between different invocations of\nthe same function.  Used that way, they can provide different return values\nfor different arguments.  The way this works is that on a method call, all\nexpectations set on a given method are evaluated in FIFO order.  The first\nmatching expectation is used.  Only if none of the expectations match does\nMockall panic.  For example:\n\n```rust\n#[automock]\ntrait Foo {\n    fn foo(&self, x: u32) -> u32;\n}\n\nlet mut mock = MockFoo::new();\nmock.expect_foo()\n    .with(eq(5))\n    .return_const(50u32);\nmock.expect_foo()\n    .with(eq(6))\n    .return_const(60u32);\n```\n\nOne common pattern is to use multiple expectations in order of decreasing\nspecificity.  The last expectation can provide a default or fallback value,\nand earlier ones can be more specific.  For example:\n\n```rust\n#[automock]\ntrait Foo {\n    fn open(&self, path: String) -> Option<u32>;\n}\n\nlet mut mock = MockFoo::new();\nmock.expect_open()\n    .with(eq(String::from(\"something.txt\")))\n    .returning(|_| Some(5));\nmock.expect_open()\n    .return_const(None);\n```\n\n## Call counts\n\nBy default, every expectation is allowed to be called an unlimited number of\ntimes.  But Mockall can optionally verify that an expectation was called a\nfixed number of times, or any number of times within a given range.\n\n```rust\n#[automock]\ntrait Foo {\n    fn foo(&self, x: u32);\n}\n\nlet mut mock = MockFoo::new();\nmock.expect_foo()\n    .times(1)\n    .return_const(());\n\nmock.foo(0);    // Ok\nmock.foo(1);    // Panics!\n```\n\nSee also\n[`never`](examples::__mock_MockFoo_Foo::__foo::Expectation::never) and\n[`times`](examples::__mock_MockFoo_Foo::__foo::Expectation::times).\n\n## Sequences\n\nBy default expectations may be matched in any order.  But it's possible to\nspecify the order by using a [`Sequence`].  Any expectations may be added to\nthe same sequence.  They don't even need to come from the same object.\n\n```should_panic(expected = \"Method sequence violation\")\n# use mockall::*;\n#[automock]\ntrait Foo {\n    fn foo(&self);\n}\n\n# fn main() {\nlet mut seq = Sequence::new();\n\nlet mut mock1 = MockFoo::new();\nmock1.expect_foo()\n    .times(1)\n    .in_sequence(&mut seq)\n    .returning(|| ());\n\nlet mut mock2 = MockFoo::new();\nmock2.expect_foo()\n    .times(1)\n    .in_sequence(&mut seq)\n    .returning(|| ());\n\nmock2.foo();    // Panics!  mock1.foo should've been called first.\n# }\n```\n\n## Checkpoints\n\nSometimes its useful to validate all expectations mid-test, throw them away,\nand add new ones.  That's what checkpoints do.  Every mock object has a\n`checkpoint` method.  When called, it will immediately validate all methods'\nexpectations.  So any expectations that haven't satisfied their call count\nwill panic.  Afterwards, those expectations will be cleared so you can add\nnew expectations and keep testing.\n\n```rust\n#[automock]\ntrait Foo {\n    fn foo(&self);\n}\n\nlet mut mock = MockFoo::new();\nmock.expect_foo()\n    .times(2)\n    .returning(|| ());\n\nmock.foo();\nmock.checkpoint();  // Panics!  foo hasn't yet been called twice.\n```\n\n```rust\n#[automock]\ntrait Foo {\n    fn foo(&self);\n}\n\nlet mut mock = MockFoo::new();\nmock.expect_foo()\n    .times(1)\n    .returning(|| ());\n\nmock.foo();\nmock.checkpoint();\nmock.foo();         // Panics!  The expectation has been cleared.\n```\n\n## Reference arguments\n\nMockall can mock methods with reference arguments, too.  There's one catch:\nthe matcher [`Predicate`](https://docs.rs/mockall/0.11.3/mockall/trait.Predicate.html) will take reference arguments by value, not by\nreference.\n\n```rust\n#[automock]\ntrait Foo {\n    fn foo(&self, x: &u32) -> u32;\n}\n\nlet mut mock = MockFoo::new();\nlet e = mock.expect_foo()\n    // Note that x is a &u32, not a &&u32\n    .withf(|x: &u32| *x == 5)\n    .returning(|x: &u32| *x + 1);\n\nassert_eq!(6, mock.foo(&5));\n```\n\n## Reference return values\n\nMockall can also use reference return values.  There is one restriction: the\nlifetime of the returned reference must be either the same as the lifetime\nof the mock object, or `'static`.\n\nMockall creates different expectation types for methods that return\nreferences.  Their API is the same as the basic `Expectation`, except for\nsetting return values.\n\nMethods that return `'static` references work just like methods that return\nany other `'static` value.\n\n```rust\nstruct Thing(u32);\n\n#[automock]\ntrait Container {\n    fn get(&self, i: u32) -> &'static Thing;\n}\n\nconst THING: Thing = Thing(42);\nlet mut mock = MockContainer::new();\nmock.expect_get()\n    .return_const(&THING);\n\nassert_eq!(42, mock.get(0).0);\n```\n\nMethods that take a `&self` argument use an `Expectation` class like\n[this](examples::__mock_MockFoo_Foo::__bar::Expectation),\nwhich\ngets its return value from the\n[`return_const`](examples::__mock_MockFoo_Foo::__bar::Expectation::return_const) method.\n\n```rust\nstruct Thing(u32);\n\n#[automock]\ntrait Container {\n    fn get(&self, i: u32) -> &Thing;\n}\n\nlet thing = Thing(42);\nlet mut mock = MockContainer::new();\nmock.expect_get()\n    .return_const(thing);\n\nassert_eq!(42, mock.get(0).0);\n```\n\nMethods that take a `&mut self` argument use an `Expectation` class like\n[this](examples::__mock_MockFoo_Foo::__baz::Expectation),\nclass, regardless of whether the return value is actually mutable.  They can\ntake their return value either from the\n[`return_var`](examples::__mock_MockFoo_Foo::__baz::Expectation::return_var)\nor\n[`returning`](examples::__mock_MockFoo_Foo::__baz::Expectation::returning)\nmethods.\n\n```rust\nstruct Thing(u32);\n\n#[automock]\ntrait Container {\n    fn get_mut(&mut self, i: u32) -> &mut Thing;\n}\n\nlet thing = Thing(42);\nlet mut mock = MockContainer::new();\nmock.expect_get_mut()\n    .return_var(thing);\n\nmock.get_mut(0).0 = 43;\nassert_eq!(43, mock.get_mut(0).0);\n```\n\nUnsized types that are common targets for\n[`Deref`](https://doc.rust-lang.org/stable/core/ops/deref/trait.Deref.html)\nare special.  Mockall\nwill automatically use the type's owned form for the Expectation.\nCurrently, the\n[`CStr`](https://doc.rust-lang.org/stable/core/ffi/c_str/struct.CStr.html),\n[`OsStr`](https://doc.rust-lang.org/stable/std/ffi/os_str/struct.OsStr.html),\n[`Path`](https://doc.rust-lang.org/stable/std/path/struct.Path.html),\n[`Slice`](https://doc.rust-lang.org/stable/alloc/slice/index.html),\nand\n[`str`](https://doc.rust-lang.org/stable/alloc/str/index.html)\ntypes are supported.  Using this feature is automatic:\n\n```rust\n#[automock]\ntrait Foo {\n    fn name(&self) -> &str;\n}\n\nlet mut mock = MockFoo::new();\nmock.expect_name().return_const(\"abcd\".to_owned());\nassert_eq!(\"abcd\", mock.name());\n```\n\nSimilarly, Mockall will use a Boxed trait object for the Expectation of\nmethods that return references to trait objects.\n\n```rust\n#[automock]\ntrait Foo {\n    fn name(&self) -> &dyn Display;\n}\n\nlet mut mock = MockFoo::new();\nmock.expect_name().return_const(Box::new(\"abcd\"));\nassert_eq!(\"abcd\", format!(\"{}\", mock.name()));\n```\n\n## Impl Trait\n\nRust 1.26.0 introduced the `impl Trait` feature.  It allows functions to\nreturn concrete but unnamed types (and, less usefully, to take them as\narguments).  It's *almost* the same as `Box<dyn Trait>` but without the\nextra allocation.  Mockall supports deriving mocks for methods that return\n`impl Trait`, with limitations.  When you derive the mock for such a method,\nMockall internally transforms the Expectation's return type to `Box<dyn Trait>`, without changing the mock method's signature.  So you can use it\nlike this:\n\n```rust\nstruct Foo {}\n#[automock]\nimpl Foo {\n    fn foo(&self) -> impl Debug {\n        // ...\n    }\n}\n\nlet mut mock = MockFoo::new();\nmock.expect_foo()\n    .returning(|| Box::new(String::from(\"Hello, World!\")));\nprintln!(\"{:?}\", mock.foo());\n```\n\nHowever, `impl Trait` isn't *exactly* equivalent to `Box<dyn Trait>` but\nwith fewer allocations.  There are some things the former can do but the\nlatter can't.  For one thing, you can't build a trait object out of a\n`Sized` trait.  So this won't work:\n\n```rust\nstruct Foo {}\n#[automock]\nimpl Foo {\n    fn foo(&self) -> impl Clone {\n        // ...\n    }\n}\n```\n\nNor can you create a trait object that implements two or more non-auto\ntypes.  So this won't work either:\n\n```rust\nstruct Foo {}\n#[automock]\nimpl Foo {\n    fn foo(&self) -> impl Debug + Display {\n        // ...\n    }\n}\n```\n\nFor such cases, there is no magic bullet.  The best way to mock methods like\nthose would be to refactor them to return named (but possibly opaque) types\ninstead.\n\nSee Also [`impl-trait-for-returning-complex-types-with-ease.html`](https://rust-lang-nursery.github.io/edition-guide/rust-2018/trait-system/impl-trait-for-returning-complex-types-with-ease)\n\n### impl Future\n\nRust 1.36.0 added the `Future` trait.  Unlike virtually every trait that\npreceeded it, `Box<dyn Future>` is mostly useless.  Instead, you usually\nneed a `Pin<Box<dyn Future>>`.  So that's what Mockall will do when you mock\na method returning `impl Future` or the related `impl Stream`.  Just\nremember to use `pin` in your expectations, like this:\n\n```rust\nstruct Foo {}\n#[automock]\nimpl Foo {\n    fn foo(&self) -> impl Future<Output=i32> {\n        // ...\n    }\n}\n\nlet mut mock = MockFoo::new();\nmock.expect_foo()\n    .returning(|| Box::pin(future::ready(42)));\n```\n\n## Mocking structs\n\nMockall mocks structs as well as traits.  The problem here is a namespace\nproblem: it's hard to supply the mock object to your code under test,\nbecause it has a different name.  The solution is to alter import paths\nduring test.  The easiest way to do that is with the\n[`mockall_double`](https://docs.rs/mockall_double/latest) crate.\n\n[`#[automock]`](https://docs.rs/mockall/0.11.3/mockall/attr.automock.html)\nworks for structs that have a single `impl` block:\n\n```rust\nuse mockall_double::double;\nmod thing {\n    use mockall::automock;\n    pub struct Thing{}\n    #[automock]\n    impl Thing {\n        pub fn foo(&self) -> u32 {\n            // ...\n        }\n    }\n}\n\n#[double]\nuse thing::Thing;\n\nfn do_stuff(thing: &Thing) -> u32 {\n    thing.foo()\n}\n\n#[cfg(test)]\nmod t {\n    use super::*;\n\n    #[test]\n    fn test_foo() {\n        let mut mock = Thing::default();\n        mock.expect_foo().returning(|| 42);\n        do_stuff(&mock);\n    }\n}\n```\n\nFor structs with more than one `impl` block or that have unsupported\n`#[derive(X)]` attributes, e.g. `Clone`, see [`mock!`](https://docs.rs/mockall/0.11.3/mockall/macro.mock.html) instead.\n\n## Generic methods\n\nGeneric methods can be mocked, too.  Effectively each generic method is an\ninfinite set of regular methods, and each of those works just like any other\nregular method.  The expect\\_\\* method is generic, too, and usually must be\ncalled with a turbofish.  The only restrictions on mocking generic methods\nare that all generic parameters must be `'static`, and generic lifetime\nparameters are not allowed.\n\n```rust\n#[automock]\ntrait Foo {\n    fn foo<T: 'static>(&self, t: T) -> i32;\n}\n\nlet mut mock = MockFoo::new();\nmock.expect_foo::<i16>()\n    .returning(|t| i32::from(t));\nmock.expect_foo::<i8>()\n    .returning(|t| -i32::from(t));\n\nassert_eq!(5, mock.foo(5i16));\nassert_eq!(-5, mock.foo(5i8));\n```\n\n## Methods with generic lifetimes\n\nA method with a lifetime parameter is technically a generic method, but\nMockall treats it like a non-generic method that must work for all possible\nlifetimes.  Mocking such a method is similar to mocking a non-generic\nmethod, with a few additional restrictions.  One restriction is that you\ncan't match calls with `with`, you must use `withf` instead.  Another is\nthat the generic lifetime may not appear as part of the return type.\nFinally, no method may have both generic lifetime parameters *and* generic\ntype parameters.\n\n```rust\nstruct X<'a>(&'a i32);\n\n#[automock]\ntrait Foo {\n    fn foo<'a>(&self, x: X<'a>) -> i32;\n}\n\nlet mut mock = MockFoo::new();\nmock.expect_foo()\n    .withf(|f| *f.0 == 5)\n    .return_const(42);\nlet x = X(&5);\nassert_eq!(42, mock.foo(x));\n```\n\n## Generic traits and structs\n\nMocking generic structs and generic traits is not a problem.  The mock\nstruct will be generic, too.  The same restrictions apply as with mocking\ngeneric methods: each generic parameter must be `'static`, and generic\nlifetime parameters are not allowed.\n\n```rust\n#[automock]\ntrait Foo<T: 'static> {\n    fn foo(&self, t: T) -> i32;\n}\n\nlet mut mock = MockFoo::<i16>::new();\nmock.expect_foo()\n    .returning(|t| i32::from(t));\nassert_eq!(5, mock.foo(5i16));\n```\n\n## Associated types\n\nTraits with associated types can be mocked too.  Unlike generic traits, the\nmock struct will not be generic.  Instead, you must specify the associated\ntypes when defining the mock struct.  They're specified as metaitems to the\n[`#[automock]`](https://docs.rs/mockall/0.11.3/mockall/attr.automock.html) attribute.\n\n```rust\n#[automock(type Key=u16; type Value=i32;)]\npub trait A {\n    type Key;\n    type Value;\n    fn foo(&self, k: Self::Key) -> Self::Value;\n}\n\nlet mut mock = MockA::new();\nmock.expect_foo()\n    .returning(|x: u16| i32::from(x));\nassert_eq!(4, mock.foo(4));\n```\n\n## Multiple and inherited traits\n\nCreating a mock struct that implements multiple traits, whether inherited or\nnot, requires using the [`mock!`](https://docs.rs/mockall/0.11.3/mockall/macro.mock.html) macro.  But once created,\nusing it is just the same as using any other mock object:\n\n```rust\npub trait A {\n    fn foo(&self);\n}\n\npub trait B: A {\n    fn bar(&self);\n}\n\nmock! {\n    // Structure to mock\n    C {}\n    // First trait to implement on C\n    impl A for C {\n        fn foo(&self);\n    }\n    // Second trait to implement on C\n    impl B for C {\n        fn bar(&self);\n    }\n}\nlet mut mock = MockC::new();\nmock.expect_foo().returning(|| ());\nmock.expect_bar().returning(|| ());\nmock.foo();\nmock.bar();\n```\n\n## External traits\n\nMockall can mock traits and structs defined in external crates that are\nbeyond your control, but you must use [`mock!`](https://docs.rs/mockall/0.11.3/mockall/macro.mock.html) instead of\n[`#[automock]`](https://docs.rs/mockall/0.11.3/mockall/attr.automock.html).  Mock an external trait like this:\n\n```rust\nmock! {\n    MyStruct {}     // Name of the mock struct, less the \"Mock\" prefix\n    impl Clone for MyStruct {   // specification of the trait to mock\n        fn clone(&self) -> Self;\n    }\n}\n\nlet mut mock1 = MockMyStruct::new();\nlet mock2 = MockMyStruct::new();\nmock1.expect_clone()\n    .return_once(move || mock2);\nlet cloned = mock1.clone();\n```\n\n## Static methods\n\nMockall can also mock static methods.  But be careful!  The expectations are\nglobal.  If you want to use a static method in multiple tests, you must\nprovide your own synchronization. See the [`synchronization example`](https://github.com/asomers/mockall/blob/master/mockall/examples/synchronization.rs)\nfor a basic implementation. For ordinary methods, expectations are\nset on the mock object.  But static methods don't have any mock object.\nInstead, you must create a `Context` object just to set their expectations.\n\n```rust\n#[automock]\npub trait A {\n    fn foo() -> u32;\n}\n\nlet ctx = MockA::foo_context();\nctx.expect().returning(|| 99);\nassert_eq!(99, MockA::foo());\n```\n\nA common pattern is mocking a trait with a constructor method.  In this case,\nyou can easily set the mock constructor method to return a mock object.\n\n```rust\nstruct Foo{}\n#[automock]\nimpl Foo {\n    fn from_i32(x: i32) -> Self {\n        // ...\n    }\n    fn foo(&self) -> i32 {\n        // ...\n    }\n}\n\nlet ctx = MockFoo::from_i32_context();\nctx.expect()\n    .returning(|x| {\n        let mut mock = MockFoo::default();\n        mock.expect_foo()\n            .return_const(x);\n        mock\n    });\nlet foo = MockFoo::from_i32(42);\nassert_eq!(42, foo.foo());\n```\n\n### Generic static methods\n\nMocking static methods of generic structs or traits, whether or not the\nmethods themselves are generic, should work seamlessly.\n\n```rust\n#[automock]\ntrait Foo<T: 'static> {\n    fn new(t: T) -> MockFoo<T>;\n}\n\nlet ctx = MockFoo::<u32>::new_context();\nctx.expect()\n    .returning(|_| MockFoo::default());\nlet mock = MockFoo::<u32>::new(42u32);\n```\n\n### Context checkpoints\n\nThe context object cleans up all expectations when it leaves scope.  It also\nhas a `checkpoint` method that functions just like a mock object's\n`checkpoint` method.\n\n```rust\n#[automock]\npub trait A {\n    fn foo() -> u32;\n}\n\nlet ctx = MockA::foo_context();\nctx.expect()\n    .times(1)\n    .returning(|| 99);\nctx.checkpoint();   // Panics!\n```\n\nA mock object's checkpoint method does *not* checkpoint static methods.\nThis behavior is useful when using multiple mock objects at once.  For\nexample:\n\n```rust\n#[automock]\npub trait A {\n    fn build() -> Self;\n    fn bar(&self) -> i32;\n}\n\nlet ctx = MockA::build_context();\nctx.expect()\n    .times(2)\n    .returning(|| MockA::default());\nlet mut mock0 = MockA::build();\nmock0.expect_bar().return_const(4);\nmock0.bar();\nmock0.checkpoint();     // Does not checkpoint the build method\nlet mock1 = MockA::build();\n```\n\nOne more thing: Mockall normally creates a zero-argument `new` method for\nevery mock struct.  But it *won't* do that when mocking a struct that\nalready has a method named `new`.  The `default` method will still be\npresent.\n\n## Modules\n\nIn addition to mocking types, Mockall can also derive mocks for\nentire modules of Rust functions.  Mockall will generate a new module named\n\"mock_xxx\", if \"xxx\" is the original module's name.  You can also use\n`#[double]` to selectively import the mock module.\n\nBe careful!  Module functions are static and so have the same caveats as\n[static methods](https://docs.rs/mockall/0.11.3/mockall/index.html#static-methods) described above.\n\n```rust\nmod outer {\n    use mockall::automock;\n    #[automock()]\n    pub(super) mod inner {\n        pub fn bar(x: u32) -> i64 {\n            // ...\n        }\n    }\n}\n\n#[double]\nuse outer::inner;\n\n#[cfg(test)]\nmod t {\n    use super::*;\n\n    #[test]\n    fn test_foo_bar() {\n        let ctx = inner::bar_context();\n        ctx.expect()\n            .returning(|x| i64::from(x + 1));\n        assert_eq!(5, inner::bar(4));\n    }\n}\n```\n\n### Foreign functions\n\nOne reason to mock modules is when working with foreign functions.  Modules\nmay contain foreign functions, even though structs and traits may not.  Like\nstatic methods, the expectations are global.\n\n```rust\nmod outer {\n    #[automock]\n    pub mod ffi {\n        extern \"C\" {\n            pub fn foo(x: u32) -> i64;\n        }\n    }\n}\n\n#[double]\nuse outer::ffi;\n\nfn do_stuff() -> i64 {\n    unsafe{ ffi::foo(42) }\n}\n\n#[cfg(test)]\nmod t {\n    use super::*;\n\n    #[test]\n    fn test_foo() {\n        let ctx = ffi::foo_context();\n        ctx.expect()\n            .returning(|x| i64::from(x + 1));\n        assert_eq!(43, do_stuff());\n    }\n}\n```\n\n## Debug\n\n`#[automock]` will automatically generate `Debug` impls when mocking traits\nand struct impls.  `mock!` will too, if you add a `#[derive(Debug)]`, like\nthis:\n\n```rust\nmock! {\n    #[derive(Debug)]\n    pub Foo {}\n}\n```\n\n## Async Traits\n\nAsync traits aren't yet (as of 1.47.0) a part of the Rust language.  But\nthey're available from the\n[`async_trait`](https://docs.rs/async-trait/0.1.38/async_trait/) crate.\nMockall is compatible with this crate, with two important limitations:\n\n* The `#[automock]` attribute must appear *before* the `#[async_trait]`\n  attribute.\n\n* The `#[async_trait]` macro must be imported with its canonical name.\n\n```rust\n// async_trait works with both #[automock]\n#[automock]\n#[async_trait]\npub trait Foo {\n   async fn foo(&self) -> u32;\n}\n// and mock!\nmock! {\n    pub Bar {}\n    #[async_trait]\n    impl Foo for Bar {\n        async fn foo(&self) -> u32;\n    }\n}\n```\n\n## Crate features\n\nMockall has a **nightly** feature.  Currently this feature has two\neffects:\n\n* The compiler will produce better error messages.\n\n* Expectations for methods whose return type implements `Default` needn't\n  have their return values explicitly set.  Instead, they will automatically\n  return the default value.\n\nWith **nightly** enabled, you can omit the return value like this:\n\n```rust\n #[automock]\n trait Foo {\n     fn foo(&self) -> Vec<u32>;\n }\n\n let mut mock = MockFoo::new();\n mock.expect_foo();\n assert!(mock.foo().is_empty());\n```\n\n## Examples\n\nFor additional examples of Mockall in action, including detailed\ndocumentation on the autogenerated methods, see\n[`examples`](examples)."}}}
{"id":2835,"type":"edge","label":"textDocument/hover","inV":2834,"outV":570}
{"id":2836,"type":"vertex","label":"definitionResult"}
{"id":2837,"type":"vertex","label":"document","uri":"file:///Users/sigridjineth/.cargo/registry/src/index.crates.io-6f17d22bba15001f/mockall-0.11.3/src/lib.rs","languageId":"rust"}
{"id":2838,"type":"vertex","label":"range","start":{"line":0,"character":0},"end":{"line":1678,"character":0}}
{"id":2839,"type":"edge","label":"contains","inVs":[2838],"outV":2837}
{"id":2840,"type":"edge","label":"item","document":2837,"inVs":[2838],"outV":2836}
{"id":2841,"type":"edge","label":"textDocument/definition","inV":2836,"outV":570}
{"id":2842,"type":"vertex","label":"referenceResult"}
{"id":2843,"type":"edge","label":"textDocument/references","inV":2842,"outV":570}
{"id":2844,"type":"edge","label":"item","document":560,"property":"references","inVs":[569],"outV":2842}
{"id":2845,"type":"edge","label":"item","document":1369,"property":"references","inVs":[1382],"outV":2842}
{"id":2846,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nmockall_derive\n```\n\n```rust\nproc_macro automock\n```"}}}
{"id":2847,"type":"edge","label":"textDocument/hover","inV":2846,"outV":573}
{"id":2848,"type":"vertex","label":"packageInformation","name":"mockall_derive","manager":"cargo","repository":{"type":"git","url":"https://github.com/asomers/mockall"},"version":"0.11.3"}
{"id":2849,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"mockall_derive::automock","unique":"scheme","kind":"import"}
{"id":2850,"type":"edge","label":"packageInformation","inV":2848,"outV":2849}
{"id":2851,"type":"edge","label":"moniker","inV":2849,"outV":573}
{"id":2852,"type":"vertex","label":"definitionResult"}
{"id":2853,"type":"vertex","label":"document","uri":"file:///Users/sigridjineth/.cargo/registry/src/index.crates.io-6f17d22bba15001f/mockall_derive-0.11.3/src/lib.rs","languageId":"rust"}
{"id":2854,"type":"vertex","label":"range","start":{"line":1103,"character":7},"end":{"line":1103,"character":15}}
{"id":2855,"type":"edge","label":"contains","inVs":[2854],"outV":2853}
{"id":2856,"type":"edge","label":"item","document":2853,"inVs":[2854],"outV":2852}
{"id":2857,"type":"edge","label":"textDocument/definition","inV":2852,"outV":573}
{"id":2858,"type":"vertex","label":"referenceResult"}
{"id":2859,"type":"edge","label":"textDocument/references","inV":2858,"outV":573}
{"id":2860,"type":"edge","label":"item","document":560,"property":"references","inVs":[572,605],"outV":2858}
{"id":2861,"type":"edge","label":"item","document":1369,"property":"references","inVs":[1384,1392],"outV":2858}
{"id":2862,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\ncore::macros::builtin\n```\n\n```rust\nmacro derive\n```\n\n---\n\nAttribute macro used to apply derive macros.\n\nSee [the reference](https://doc.rust-lang.org/stable/reference/attributes/derive.html) for more info."}}}
{"id":2863,"type":"edge","label":"textDocument/hover","inV":2862,"outV":576}
{"id":2864,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"core::builtin::macros::derive","unique":"scheme","kind":"import"}
{"id":2865,"type":"edge","label":"packageInformation","inV":2072,"outV":2864}
{"id":2866,"type":"edge","label":"moniker","inV":2864,"outV":576}
{"id":2867,"type":"vertex","label":"definitionResult"}
{"id":2868,"type":"vertex","label":"range","start":{"line":1616,"character":14},"end":{"line":1616,"character":20}}
{"id":2869,"type":"edge","label":"contains","inVs":[2868],"outV":2249}
{"id":2870,"type":"edge","label":"item","document":2249,"inVs":[2868],"outV":2867}
{"id":2871,"type":"edge","label":"textDocument/definition","inV":2867,"outV":576}
{"id":2872,"type":"vertex","label":"referenceResult"}
{"id":2873,"type":"edge","label":"textDocument/references","inV":2872,"outV":576}
{"id":2874,"type":"edge","label":"item","document":560,"property":"references","inVs":[575],"outV":2872}
{"id":2875,"type":"edge","label":"item","document":945,"property":"references","inVs":[954,958],"outV":2872}
{"id":2876,"type":"edge","label":"item","document":1153,"property":"references","inVs":[1167,1171],"outV":2872}
{"id":2877,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\ncore::fmt::macros\n```\n\n```rust\nmacro Debug\n```\n\n---\n\nDerive macro generating an impl of the trait `Debug`."}}}
{"id":2878,"type":"edge","label":"textDocument/hover","inV":2877,"outV":579}
{"id":2879,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"core::macros::fmt::Debug","unique":"scheme","kind":"import"}
{"id":2880,"type":"edge","label":"packageInformation","inV":2072,"outV":2879}
{"id":2881,"type":"edge","label":"moniker","inV":2879,"outV":579}
{"id":2882,"type":"vertex","label":"definitionResult"}
{"id":2883,"type":"vertex","label":"document","uri":"file:///opt/homebrew/Cellar/rust/1.81.0/lib/rustlib/src/rust/library/core/src/fmt/mod.rs","languageId":"rust"}
{"id":2884,"type":"vertex","label":"range","start":{"line":650,"character":14},"end":{"line":650,"character":19}}
{"id":2885,"type":"edge","label":"contains","inVs":[2884],"outV":2883}
{"id":2886,"type":"edge","label":"item","document":2883,"inVs":[2884],"outV":2882}
{"id":2887,"type":"edge","label":"textDocument/definition","inV":2882,"outV":579}
{"id":2888,"type":"vertex","label":"referenceResult"}
{"id":2889,"type":"edge","label":"textDocument/references","inV":2888,"outV":579}
{"id":2890,"type":"edge","label":"item","document":560,"property":"references","inVs":[578],"outV":2888}
{"id":2891,"type":"edge","label":"item","document":945,"property":"references","inVs":[956],"outV":2888}
{"id":2892,"type":"edge","label":"item","document":1153,"property":"references","inVs":[1169],"outV":2888}
{"id":2893,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::game::Game\n```\n\n```rust\npub number_of_players: i32\n```"}}}
{"id":2894,"type":"edge","label":"textDocument/hover","inV":2893,"outV":584}
{"id":2895,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::game::Game::number_of_players","unique":"scheme","kind":"export"}
{"id":2896,"type":"edge","label":"packageInformation","inV":1709,"outV":2895}
{"id":2897,"type":"edge","label":"moniker","inV":2895,"outV":584}
{"id":2898,"type":"vertex","label":"definitionResult"}
{"id":2899,"type":"edge","label":"item","document":560,"inVs":[583],"outV":2898}
{"id":2900,"type":"edge","label":"textDocument/definition","inV":2898,"outV":584}
{"id":2901,"type":"vertex","label":"referenceResult"}
{"id":2902,"type":"edge","label":"textDocument/references","inV":2901,"outV":584}
{"id":2903,"type":"edge","label":"item","document":560,"property":"definitions","inVs":[583],"outV":2901}
{"id":2904,"type":"edge","label":"item","document":560,"property":"references","inVs":[853],"outV":2901}
{"id":2905,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::game::Game\n```\n\n```rust\npub number_of_attempts: i32\n```"}}}
{"id":2906,"type":"edge","label":"textDocument/hover","inV":2905,"outV":589}
{"id":2907,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::game::Game::number_of_attempts","unique":"scheme","kind":"export"}
{"id":2908,"type":"edge","label":"packageInformation","inV":1709,"outV":2907}
{"id":2909,"type":"edge","label":"moniker","inV":2907,"outV":589}
{"id":2910,"type":"vertex","label":"definitionResult"}
{"id":2911,"type":"edge","label":"item","document":560,"inVs":[588],"outV":2910}
{"id":2912,"type":"edge","label":"textDocument/definition","inV":2910,"outV":589}
{"id":2913,"type":"vertex","label":"referenceResult"}
{"id":2914,"type":"edge","label":"textDocument/references","inV":2913,"outV":589}
{"id":2915,"type":"edge","label":"item","document":560,"property":"definitions","inVs":[588],"outV":2913}
{"id":2916,"type":"edge","label":"item","document":560,"property":"references","inVs":[767,864,902],"outV":2913}
{"id":2917,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::game::Game\n```\n\n```rust\npub(crate) players: Vec<Player, Global>\n```"}}}
{"id":2918,"type":"edge","label":"textDocument/hover","inV":2917,"outV":596}
{"id":2919,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::game::Game::players","unique":"scheme","kind":"export"}
{"id":2920,"type":"edge","label":"packageInformation","inV":1709,"outV":2919}
{"id":2921,"type":"edge","label":"moniker","inV":2919,"outV":596}
{"id":2922,"type":"vertex","label":"definitionResult"}
{"id":2923,"type":"edge","label":"item","document":560,"inVs":[595],"outV":2922}
{"id":2924,"type":"edge","label":"textDocument/definition","inV":2922,"outV":596}
{"id":2925,"type":"vertex","label":"referenceResult"}
{"id":2926,"type":"edge","label":"textDocument/references","inV":2925,"outV":596}
{"id":2927,"type":"edge","label":"item","document":560,"property":"definitions","inVs":[595],"outV":2925}
{"id":2928,"type":"edge","label":"item","document":560,"property":"references","inVs":[730,791,816,842,906,932],"outV":2925}
{"id":2929,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::game::player\n```\n\n```rust\npub struct Player {\n    pub(crate) name: String,\n    pub(crate) steps: Vec<Step>,\n}\n```"}}}
{"id":2930,"type":"edge","label":"textDocument/hover","inV":2929,"outV":603}
{"id":2931,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::player::game::Player","unique":"scheme","kind":"export"}
{"id":2932,"type":"edge","label":"packageInformation","inV":1709,"outV":2931}
{"id":2933,"type":"edge","label":"moniker","inV":2931,"outV":603}
{"id":2934,"type":"vertex","label":"definitionResult"}
{"id":2935,"type":"edge","label":"item","document":945,"inVs":[963],"outV":2934}
{"id":2936,"type":"edge","label":"textDocument/definition","inV":2934,"outV":603}
{"id":2937,"type":"vertex","label":"referenceResult"}
{"id":2938,"type":"edge","label":"textDocument/references","inV":2937,"outV":603}
{"id":2939,"type":"edge","label":"item","document":560,"property":"references","inVs":[602,658,838,890],"outV":2937}
{"id":2940,"type":"edge","label":"item","document":945,"property":"definitions","inVs":[963],"outV":2937}
{"id":2941,"type":"edge","label":"item","document":945,"property":"references","inVs":[983],"outV":2937}
{"id":2942,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nplayer_names: Vec<String>\n```"}}}
{"id":2943,"type":"edge","label":"textDocument/hover","inV":2942,"outV":612}
{"id":2944,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::game::new::player_names","unique":"scheme","kind":"export"}
{"id":2945,"type":"edge","label":"packageInformation","inV":1709,"outV":2944}
{"id":2946,"type":"edge","label":"moniker","inV":2944,"outV":612}
{"id":2947,"type":"vertex","label":"definitionResult"}
{"id":2948,"type":"edge","label":"item","document":560,"inVs":[611],"outV":2947}
{"id":2949,"type":"edge","label":"textDocument/definition","inV":2947,"outV":612}
{"id":2950,"type":"vertex","label":"referenceResult"}
{"id":2951,"type":"edge","label":"textDocument/references","inV":2950,"outV":612}
{"id":2952,"type":"edge","label":"item","document":560,"property":"definitions","inVs":[611],"outV":2950}
{"id":2953,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nthe_number_of_cars: i32\n```"}}}
{"id":2954,"type":"edge","label":"textDocument/hover","inV":2953,"outV":619}
{"id":2955,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::game::new::the_number_of_cars","unique":"scheme","kind":"export"}
{"id":2956,"type":"edge","label":"packageInformation","inV":1709,"outV":2955}
{"id":2957,"type":"edge","label":"moniker","inV":2955,"outV":619}
{"id":2958,"type":"vertex","label":"definitionResult"}
{"id":2959,"type":"edge","label":"item","document":560,"inVs":[618],"outV":2958}
{"id":2960,"type":"edge","label":"textDocument/definition","inV":2958,"outV":619}
{"id":2961,"type":"vertex","label":"referenceResult"}
{"id":2962,"type":"edge","label":"textDocument/references","inV":2961,"outV":619}
{"id":2963,"type":"edge","label":"item","document":560,"property":"definitions","inVs":[618],"outV":2961}
{"id":2964,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nthe_number_of_attempts: i32\n```"}}}
{"id":2965,"type":"edge","label":"textDocument/hover","inV":2964,"outV":624}
{"id":2966,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::game::new::the_number_of_attempts","unique":"scheme","kind":"export"}
{"id":2967,"type":"edge","label":"packageInformation","inV":1709,"outV":2966}
{"id":2968,"type":"edge","label":"moniker","inV":2966,"outV":624}
{"id":2969,"type":"vertex","label":"definitionResult"}
{"id":2970,"type":"edge","label":"item","document":560,"inVs":[623],"outV":2969}
{"id":2971,"type":"edge","label":"textDocument/definition","inV":2969,"outV":624}
{"id":2972,"type":"vertex","label":"referenceResult"}
{"id":2973,"type":"edge","label":"textDocument/references","inV":2972,"outV":624}
{"id":2974,"type":"edge","label":"item","document":560,"property":"definitions","inVs":[623],"outV":2972}
{"id":2975,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nSelf: ?Sized\n```"}}}
{"id":2976,"type":"edge","label":"textDocument/hover","inV":2975,"outV":629}
{"id":2977,"type":"vertex","label":"definitionResult"}
{"id":2978,"type":"edge","label":"item","document":560,"inVs":[607],"outV":2977}
{"id":2979,"type":"edge","label":"textDocument/definition","inV":2977,"outV":629}
{"id":2980,"type":"vertex","label":"referenceResult"}
{"id":2981,"type":"edge","label":"textDocument/references","inV":2980,"outV":629}
{"id":2982,"type":"edge","label":"item","document":560,"property":"references","inVs":[628,689,697],"outV":2980}
{"id":2983,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::game::MockGameFn_GameFn\n```\n\n```rust\nprint_the_dash_by_the_amount_of_is_moved_on_steps: Expectations\n```"}}}
{"id":2984,"type":"edge","label":"textDocument/hover","inV":2983,"outV":632}
{"id":2985,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::game::MockGameFn_GameFn::print_the_dash_by_the_amount_of_is_moved_on_steps","unique":"scheme","kind":"export"}
{"id":2986,"type":"edge","label":"packageInformation","inV":1709,"outV":2985}
{"id":2987,"type":"edge","label":"moniker","inV":2985,"outV":632}
{"id":2988,"type":"vertex","label":"definitionResult"}
{"id":2989,"type":"edge","label":"item","document":560,"inVs":[631],"outV":2988}
{"id":2990,"type":"edge","label":"textDocument/definition","inV":2988,"outV":632}
{"id":2991,"type":"vertex","label":"referenceResult"}
{"id":2992,"type":"edge","label":"textDocument/references","inV":2991,"outV":632}
{"id":2993,"type":"edge","label":"item","document":560,"property":"definitions","inVs":[631],"outV":2991}
{"id":2994,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nself: &MockGameFn\n```"}}}
{"id":2995,"type":"edge","label":"textDocument/hover","inV":2994,"outV":635}
{"id":2996,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::game::print_the_dash_by_the_amount_of_is_moved_on_steps::self","unique":"scheme","kind":"export"}
{"id":2997,"type":"edge","label":"packageInformation","inV":1709,"outV":2996}
{"id":2998,"type":"edge","label":"moniker","inV":2996,"outV":635}
{"id":2999,"type":"vertex","label":"definitionResult"}
{"id":3000,"type":"edge","label":"item","document":560,"inVs":[634],"outV":2999}
{"id":3001,"type":"edge","label":"textDocument/definition","inV":2999,"outV":635}
{"id":3002,"type":"vertex","label":"referenceResult"}
{"id":3003,"type":"edge","label":"textDocument/references","inV":3002,"outV":635}
{"id":3004,"type":"edge","label":"item","document":560,"property":"definitions","inVs":[634],"outV":3002}
{"id":3005,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::game::MockGameFn_GameFn\n```\n\n```rust\nprint_the_dash_by_the_amount_of_steps_on_this_step: Expectations\n```"}}}
{"id":3006,"type":"edge","label":"textDocument/hover","inV":3005,"outV":638}
{"id":3007,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::game::MockGameFn_GameFn::print_the_dash_by_the_amount_of_steps_on_this_step","unique":"scheme","kind":"export"}
{"id":3008,"type":"edge","label":"packageInformation","inV":1709,"outV":3007}
{"id":3009,"type":"edge","label":"moniker","inV":3007,"outV":638}
{"id":3010,"type":"vertex","label":"definitionResult"}
{"id":3011,"type":"edge","label":"item","document":560,"inVs":[637],"outV":3010}
{"id":3012,"type":"edge","label":"textDocument/definition","inV":3010,"outV":638}
{"id":3013,"type":"vertex","label":"referenceResult"}
{"id":3014,"type":"edge","label":"textDocument/references","inV":3013,"outV":638}
{"id":3015,"type":"edge","label":"item","document":560,"property":"definitions","inVs":[637],"outV":3013}
{"id":3016,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nself: &MockGameFn\n```"}}}
{"id":3017,"type":"edge","label":"textDocument/hover","inV":3016,"outV":641}
{"id":3018,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::game::print_the_dash_by_the_amount_of_steps_on_this_step::self","unique":"scheme","kind":"export"}
{"id":3019,"type":"edge","label":"packageInformation","inV":1709,"outV":3018}
{"id":3020,"type":"edge","label":"moniker","inV":3018,"outV":641}
{"id":3021,"type":"vertex","label":"definitionResult"}
{"id":3022,"type":"edge","label":"item","document":560,"inVs":[640],"outV":3021}
{"id":3023,"type":"edge","label":"textDocument/definition","inV":3021,"outV":641}
{"id":3024,"type":"vertex","label":"referenceResult"}
{"id":3025,"type":"edge","label":"textDocument/references","inV":3024,"outV":641}
{"id":3026,"type":"edge","label":"item","document":560,"property":"definitions","inVs":[640],"outV":3024}
{"id":3027,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nstep_number: i32\n```"}}}
{"id":3028,"type":"edge","label":"textDocument/hover","inV":3027,"outV":644}
{"id":3029,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::game::print_the_dash_by_the_amount_of_steps_on_this_step::step_number","unique":"scheme","kind":"export"}
{"id":3030,"type":"edge","label":"packageInformation","inV":1709,"outV":3029}
{"id":3031,"type":"edge","label":"moniker","inV":3029,"outV":644}
{"id":3032,"type":"vertex","label":"definitionResult"}
{"id":3033,"type":"edge","label":"item","document":560,"inVs":[643],"outV":3032}
{"id":3034,"type":"edge","label":"textDocument/definition","inV":3032,"outV":644}
{"id":3035,"type":"vertex","label":"referenceResult"}
{"id":3036,"type":"edge","label":"textDocument/references","inV":3035,"outV":644}
{"id":3037,"type":"edge","label":"item","document":560,"property":"definitions","inVs":[643],"outV":3035}
{"id":3038,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::game::MockGameFn_GameFn\n```\n\n```rust\nget_players: Expectations\n```"}}}
{"id":3039,"type":"edge","label":"textDocument/hover","inV":3038,"outV":649}
{"id":3040,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::game::MockGameFn_GameFn::get_players","unique":"scheme","kind":"export"}
{"id":3041,"type":"edge","label":"packageInformation","inV":1709,"outV":3040}
{"id":3042,"type":"edge","label":"moniker","inV":3040,"outV":649}
{"id":3043,"type":"vertex","label":"definitionResult"}
{"id":3044,"type":"edge","label":"item","document":560,"inVs":[648],"outV":3043}
{"id":3045,"type":"edge","label":"textDocument/definition","inV":3043,"outV":649}
{"id":3046,"type":"vertex","label":"referenceResult"}
{"id":3047,"type":"edge","label":"textDocument/references","inV":3046,"outV":649}
{"id":3048,"type":"edge","label":"item","document":560,"property":"definitions","inVs":[648],"outV":3046}
{"id":3049,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nself: &MockGameFn\n```"}}}
{"id":3050,"type":"edge","label":"textDocument/hover","inV":3049,"outV":652}
{"id":3051,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::game::get_players::self","unique":"scheme","kind":"export"}
{"id":3052,"type":"edge","label":"packageInformation","inV":1709,"outV":3051}
{"id":3053,"type":"edge","label":"moniker","inV":3051,"outV":652}
{"id":3054,"type":"vertex","label":"definitionResult"}
{"id":3055,"type":"edge","label":"item","document":560,"inVs":[651],"outV":3054}
{"id":3056,"type":"edge","label":"textDocument/definition","inV":3054,"outV":652}
{"id":3057,"type":"vertex","label":"referenceResult"}
{"id":3058,"type":"edge","label":"textDocument/references","inV":3057,"outV":652}
{"id":3059,"type":"edge","label":"item","document":560,"property":"definitions","inVs":[651],"outV":3057}
{"id":3060,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::game::MockGameFn_GameFn\n```\n\n```rust\nget_number_of_players: Expectations\n```"}}}
{"id":3061,"type":"edge","label":"textDocument/hover","inV":3060,"outV":661}
{"id":3062,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::game::MockGameFn_GameFn::get_number_of_players","unique":"scheme","kind":"export"}
{"id":3063,"type":"edge","label":"packageInformation","inV":1709,"outV":3062}
{"id":3064,"type":"edge","label":"moniker","inV":3062,"outV":661}
{"id":3065,"type":"vertex","label":"definitionResult"}
{"id":3066,"type":"edge","label":"item","document":560,"inVs":[660],"outV":3065}
{"id":3067,"type":"edge","label":"textDocument/definition","inV":3065,"outV":661}
{"id":3068,"type":"vertex","label":"referenceResult"}
{"id":3069,"type":"edge","label":"textDocument/references","inV":3068,"outV":661}
{"id":3070,"type":"edge","label":"item","document":560,"property":"definitions","inVs":[660],"outV":3068}
{"id":3071,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nself: &MockGameFn\n```"}}}
{"id":3072,"type":"edge","label":"textDocument/hover","inV":3071,"outV":664}
{"id":3073,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::game::get_number_of_players::self","unique":"scheme","kind":"export"}
{"id":3074,"type":"edge","label":"packageInformation","inV":1709,"outV":3073}
{"id":3075,"type":"edge","label":"moniker","inV":3073,"outV":664}
{"id":3076,"type":"vertex","label":"definitionResult"}
{"id":3077,"type":"edge","label":"item","document":560,"inVs":[663],"outV":3076}
{"id":3078,"type":"edge","label":"textDocument/definition","inV":3076,"outV":664}
{"id":3079,"type":"vertex","label":"referenceResult"}
{"id":3080,"type":"edge","label":"textDocument/references","inV":3079,"outV":664}
{"id":3081,"type":"edge","label":"item","document":560,"property":"definitions","inVs":[663],"outV":3079}
{"id":3082,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::game::MockGameFn_GameFn\n```\n\n```rust\nget_number_of_attempts: Expectations\n```"}}}
{"id":3083,"type":"edge","label":"textDocument/hover","inV":3082,"outV":669}
{"id":3084,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::game::MockGameFn_GameFn::get_number_of_attempts","unique":"scheme","kind":"export"}
{"id":3085,"type":"edge","label":"packageInformation","inV":1709,"outV":3084}
{"id":3086,"type":"edge","label":"moniker","inV":3084,"outV":669}
{"id":3087,"type":"vertex","label":"definitionResult"}
{"id":3088,"type":"edge","label":"item","document":560,"inVs":[668],"outV":3087}
{"id":3089,"type":"edge","label":"textDocument/definition","inV":3087,"outV":669}
{"id":3090,"type":"vertex","label":"referenceResult"}
{"id":3091,"type":"edge","label":"textDocument/references","inV":3090,"outV":669}
{"id":3092,"type":"edge","label":"item","document":560,"property":"definitions","inVs":[668],"outV":3090}
{"id":3093,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nself: &MockGameFn\n```"}}}
{"id":3094,"type":"edge","label":"textDocument/hover","inV":3093,"outV":672}
{"id":3095,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::game::get_number_of_attempts::self","unique":"scheme","kind":"export"}
{"id":3096,"type":"edge","label":"packageInformation","inV":1709,"outV":3095}
{"id":3097,"type":"edge","label":"moniker","inV":3095,"outV":672}
{"id":3098,"type":"vertex","label":"definitionResult"}
{"id":3099,"type":"edge","label":"item","document":560,"inVs":[671],"outV":3098}
{"id":3100,"type":"edge","label":"textDocument/definition","inV":3098,"outV":672}
{"id":3101,"type":"vertex","label":"referenceResult"}
{"id":3102,"type":"edge","label":"textDocument/references","inV":3101,"outV":672}
{"id":3103,"type":"edge","label":"item","document":560,"property":"definitions","inVs":[671],"outV":3101}
{"id":3104,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::game::MockGameFn_GameFn\n```\n\n```rust\ninitialize_players: Expectations\n```"}}}
{"id":3105,"type":"edge","label":"textDocument/hover","inV":3104,"outV":677}
{"id":3106,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::game::MockGameFn_GameFn::initialize_players","unique":"scheme","kind":"export"}
{"id":3107,"type":"edge","label":"packageInformation","inV":1709,"outV":3106}
{"id":3108,"type":"edge","label":"moniker","inV":3106,"outV":677}
{"id":3109,"type":"vertex","label":"definitionResult"}
{"id":3110,"type":"edge","label":"item","document":560,"inVs":[676],"outV":3109}
{"id":3111,"type":"edge","label":"textDocument/definition","inV":3109,"outV":677}
{"id":3112,"type":"vertex","label":"referenceResult"}
{"id":3113,"type":"edge","label":"textDocument/references","inV":3112,"outV":677}
{"id":3114,"type":"edge","label":"item","document":560,"property":"definitions","inVs":[676],"outV":3112}
{"id":3115,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nself: MockGameFn\n```"}}}
{"id":3116,"type":"edge","label":"textDocument/hover","inV":3115,"outV":680}
{"id":3117,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::game::initialize_players::self","unique":"scheme","kind":"export"}
{"id":3118,"type":"edge","label":"packageInformation","inV":1709,"outV":3117}
{"id":3119,"type":"edge","label":"moniker","inV":3117,"outV":680}
{"id":3120,"type":"vertex","label":"definitionResult"}
{"id":3121,"type":"edge","label":"item","document":560,"inVs":[679],"outV":3120}
{"id":3122,"type":"edge","label":"textDocument/definition","inV":3120,"outV":680}
{"id":3123,"type":"vertex","label":"referenceResult"}
{"id":3124,"type":"edge","label":"textDocument/references","inV":3123,"outV":680}
{"id":3125,"type":"edge","label":"item","document":560,"property":"definitions","inVs":[679],"outV":3123}
{"id":3126,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nplayer_names: &Vec<String>\n```"}}}
{"id":3127,"type":"edge","label":"textDocument/hover","inV":3126,"outV":683}
{"id":3128,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::game::initialize_players::player_names","unique":"scheme","kind":"export"}
{"id":3129,"type":"edge","label":"packageInformation","inV":1709,"outV":3128}
{"id":3130,"type":"edge","label":"moniker","inV":3128,"outV":683}
{"id":3131,"type":"vertex","label":"definitionResult"}
{"id":3132,"type":"edge","label":"item","document":560,"inVs":[682],"outV":3131}
{"id":3133,"type":"edge","label":"textDocument/definition","inV":3131,"outV":683}
{"id":3134,"type":"vertex","label":"referenceResult"}
{"id":3135,"type":"edge","label":"textDocument/references","inV":3134,"outV":683}
{"id":3136,"type":"edge","label":"item","document":560,"property":"definitions","inVs":[682],"outV":3134}
{"id":3137,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::game::MockGameFn_GameFn\n```\n\n```rust\nplay_steps: Expectations\n```"}}}
{"id":3138,"type":"edge","label":"textDocument/hover","inV":3137,"outV":692}
{"id":3139,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::game::MockGameFn_GameFn::play_steps","unique":"scheme","kind":"export"}
{"id":3140,"type":"edge","label":"packageInformation","inV":1709,"outV":3139}
{"id":3141,"type":"edge","label":"moniker","inV":3139,"outV":692}
{"id":3142,"type":"vertex","label":"definitionResult"}
{"id":3143,"type":"edge","label":"item","document":560,"inVs":[691],"outV":3142}
{"id":3144,"type":"edge","label":"textDocument/definition","inV":3142,"outV":692}
{"id":3145,"type":"vertex","label":"referenceResult"}
{"id":3146,"type":"edge","label":"textDocument/references","inV":3145,"outV":692}
{"id":3147,"type":"edge","label":"item","document":560,"property":"definitions","inVs":[691],"outV":3145}
{"id":3148,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nself: MockGameFn\n```"}}}
{"id":3149,"type":"edge","label":"textDocument/hover","inV":3148,"outV":695}
{"id":3150,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::game::play_steps::self","unique":"scheme","kind":"export"}
{"id":3151,"type":"edge","label":"packageInformation","inV":1709,"outV":3150}
{"id":3152,"type":"edge","label":"moniker","inV":3150,"outV":695}
{"id":3153,"type":"vertex","label":"definitionResult"}
{"id":3154,"type":"edge","label":"item","document":560,"inVs":[694],"outV":3153}
{"id":3155,"type":"edge","label":"textDocument/definition","inV":3153,"outV":695}
{"id":3156,"type":"vertex","label":"referenceResult"}
{"id":3157,"type":"edge","label":"textDocument/references","inV":3156,"outV":695}
{"id":3158,"type":"edge","label":"item","document":560,"property":"definitions","inVs":[694],"outV":3156}
{"id":3159,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nname_of_players: Vec<String>\n```"}}}
{"id":3160,"type":"edge","label":"textDocument/hover","inV":3159,"outV":706}
{"id":3161,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::game::new::name_of_players","unique":"scheme","kind":"export"}
{"id":3162,"type":"edge","label":"packageInformation","inV":1709,"outV":3161}
{"id":3163,"type":"edge","label":"moniker","inV":3161,"outV":706}
{"id":3164,"type":"vertex","label":"definitionResult"}
{"id":3165,"type":"edge","label":"item","document":560,"inVs":[705],"outV":3164}
{"id":3166,"type":"edge","label":"textDocument/definition","inV":3164,"outV":706}
{"id":3167,"type":"vertex","label":"referenceResult"}
{"id":3168,"type":"edge","label":"textDocument/references","inV":3167,"outV":706}
{"id":3169,"type":"edge","label":"item","document":560,"property":"definitions","inVs":[705],"outV":3167}
{"id":3170,"type":"edge","label":"item","document":560,"property":"references","inVs":[750],"outV":3167}
{"id":3171,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nnumber_of_players: i32\n```"}}}
{"id":3172,"type":"edge","label":"textDocument/hover","inV":3171,"outV":713}
{"id":3173,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::game::new::number_of_players","unique":"scheme","kind":"export"}
{"id":3174,"type":"edge","label":"packageInformation","inV":1709,"outV":3173}
{"id":3175,"type":"edge","label":"moniker","inV":3173,"outV":713}
{"id":3176,"type":"vertex","label":"definitionResult"}
{"id":3177,"type":"edge","label":"item","document":560,"inVs":[712],"outV":3176}
{"id":3178,"type":"edge","label":"textDocument/definition","inV":3176,"outV":713}
{"id":3179,"type":"vertex","label":"referenceResult"}
{"id":3180,"type":"edge","label":"textDocument/references","inV":3179,"outV":713}
{"id":3181,"type":"edge","label":"item","document":560,"property":"definitions","inVs":[712],"outV":3179}
{"id":3182,"type":"edge","label":"item","document":560,"property":"references","inVs":[736],"outV":3179}
{"id":3183,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nnumber_of_attempts: i32\n```"}}}
{"id":3184,"type":"edge","label":"textDocument/hover","inV":3183,"outV":718}
{"id":3185,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::game::new::number_of_attempts","unique":"scheme","kind":"export"}
{"id":3186,"type":"edge","label":"packageInformation","inV":1709,"outV":3185}
{"id":3187,"type":"edge","label":"moniker","inV":3185,"outV":718}
{"id":3188,"type":"vertex","label":"definitionResult"}
{"id":3189,"type":"edge","label":"item","document":560,"inVs":[717],"outV":3188}
{"id":3190,"type":"edge","label":"textDocument/definition","inV":3188,"outV":718}
{"id":3191,"type":"vertex","label":"referenceResult"}
{"id":3192,"type":"edge","label":"textDocument/references","inV":3191,"outV":718}
{"id":3193,"type":"edge","label":"item","document":560,"property":"definitions","inVs":[717],"outV":3191}
{"id":3194,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::game\n```\n\n```rust\npub struct Game {\n    pub number_of_players: i32,\n    pub number_of_attempts: i32,\n    pub(crate) players: Vec<Player>,\n}\n```"}}}
{"id":3195,"type":"edge","label":"textDocument/hover","inV":3194,"outV":723}
{"id":3196,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::game::Game","unique":"scheme","kind":"export"}
{"id":3197,"type":"edge","label":"packageInformation","inV":1709,"outV":3196}
{"id":3198,"type":"edge","label":"moniker","inV":3196,"outV":723}
{"id":3199,"type":"vertex","label":"definitionResult"}
{"id":3200,"type":"edge","label":"item","document":560,"inVs":[701],"outV":3199}
{"id":3201,"type":"edge","label":"textDocument/definition","inV":3199,"outV":723}
{"id":3202,"type":"vertex","label":"referenceResult"}
{"id":3203,"type":"edge","label":"textDocument/references","inV":3202,"outV":723}
{"id":3204,"type":"edge","label":"item","document":560,"property":"references","inVs":[722,728,743,755,769,878,920],"outV":3202}
{"id":3205,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nlet new_game: Game\n```"}}}
{"id":3206,"type":"edge","label":"textDocument/hover","inV":3205,"outV":726}
{"id":3207,"type":"vertex","label":"definitionResult"}
{"id":3208,"type":"edge","label":"item","document":560,"inVs":[725],"outV":3207}
{"id":3209,"type":"edge","label":"textDocument/definition","inV":3207,"outV":726}
{"id":3210,"type":"vertex","label":"referenceResult"}
{"id":3211,"type":"edge","label":"textDocument/references","inV":3210,"outV":726}
{"id":3212,"type":"edge","label":"item","document":560,"property":"definitions","inVs":[725],"outV":3210}
{"id":3213,"type":"edge","label":"item","document":560,"property":"references","inVs":[748],"outV":3210}
{"id":3214,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nlet new_game: Game\n```"}}}
{"id":3215,"type":"edge","label":"textDocument/hover","inV":3214,"outV":741}
{"id":3216,"type":"vertex","label":"definitionResult"}
{"id":3217,"type":"edge","label":"item","document":560,"inVs":[740],"outV":3216}
{"id":3218,"type":"edge","label":"textDocument/definition","inV":3216,"outV":741}
{"id":3219,"type":"vertex","label":"referenceResult"}
{"id":3220,"type":"edge","label":"textDocument/references","inV":3219,"outV":741}
{"id":3221,"type":"edge","label":"item","document":560,"property":"definitions","inVs":[740],"outV":3219}
{"id":3222,"type":"edge","label":"item","document":560,"property":"references","inVs":[760],"outV":3219}
{"id":3223,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::game::Game\n```\n\n```rust\nfn initialize_players(self, name_of_players: &Vec<String>) -> Self\n```"}}}
{"id":3224,"type":"edge","label":"textDocument/hover","inV":3223,"outV":746}
{"id":3225,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::game::Game::GameFn::initialize_players","unique":"scheme","kind":"export"}
{"id":3226,"type":"edge","label":"packageInformation","inV":1709,"outV":3225}
{"id":3227,"type":"edge","label":"moniker","inV":3225,"outV":746}
{"id":3228,"type":"vertex","label":"definitionResult"}
{"id":3229,"type":"edge","label":"item","document":560,"inVs":[866],"outV":3228}
{"id":3230,"type":"edge","label":"textDocument/definition","inV":3228,"outV":746}
{"id":3231,"type":"vertex","label":"referenceResult"}
{"id":3232,"type":"edge","label":"textDocument/references","inV":3231,"outV":746}
{"id":3233,"type":"edge","label":"item","document":560,"property":"references","inVs":[745],"outV":3231}
{"id":3234,"type":"edge","label":"item","document":560,"property":"definitions","inVs":[866],"outV":3231}
{"id":3235,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nlet new_game: Game\n```"}}}
{"id":3236,"type":"edge","label":"textDocument/hover","inV":3235,"outV":753}
{"id":3237,"type":"vertex","label":"definitionResult"}
{"id":3238,"type":"edge","label":"item","document":560,"inVs":[752],"outV":3237}
{"id":3239,"type":"edge","label":"textDocument/definition","inV":3237,"outV":753}
{"id":3240,"type":"vertex","label":"referenceResult"}
{"id":3241,"type":"edge","label":"textDocument/references","inV":3240,"outV":753}
{"id":3242,"type":"edge","label":"item","document":560,"property":"definitions","inVs":[752],"outV":3240}
{"id":3243,"type":"edge","label":"item","document":560,"property":"references","inVs":[765,774,778],"outV":3240}
{"id":3244,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::game::Game\n```\n\n```rust\nfn play_steps(self) -> Self\n```"}}}
{"id":3245,"type":"edge","label":"textDocument/hover","inV":3244,"outV":758}
{"id":3246,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::game::Game::GameFn::play_steps","unique":"scheme","kind":"export"}
{"id":3247,"type":"edge","label":"packageInformation","inV":1709,"outV":3246}
{"id":3248,"type":"edge","label":"moniker","inV":3246,"outV":758}
{"id":3249,"type":"vertex","label":"definitionResult"}
{"id":3250,"type":"edge","label":"item","document":560,"inVs":[915],"outV":3249}
{"id":3251,"type":"edge","label":"textDocument/definition","inV":3249,"outV":758}
{"id":3252,"type":"vertex","label":"referenceResult"}
{"id":3253,"type":"edge","label":"textDocument/references","inV":3252,"outV":758}
{"id":3254,"type":"edge","label":"item","document":560,"property":"references","inVs":[757],"outV":3252}
{"id":3255,"type":"edge","label":"item","document":560,"property":"definitions","inVs":[915],"outV":3252}
{"id":3256,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nlet step_number: i32\n```"}}}
{"id":3257,"type":"edge","label":"textDocument/hover","inV":3256,"outV":763}
{"id":3258,"type":"vertex","label":"definitionResult"}
{"id":3259,"type":"edge","label":"item","document":560,"inVs":[762],"outV":3258}
{"id":3260,"type":"edge","label":"textDocument/definition","inV":3258,"outV":763}
{"id":3261,"type":"vertex","label":"referenceResult"}
{"id":3262,"type":"edge","label":"textDocument/references","inV":3261,"outV":763}
{"id":3263,"type":"edge","label":"item","document":560,"property":"definitions","inVs":[762],"outV":3261}
{"id":3264,"type":"edge","label":"item","document":560,"property":"references","inVs":[776],"outV":3261}
{"id":3265,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::game::Game\n```\n\n```rust\nfn print_the_dash_by_the_amount_of_steps_on_this_step(&self, step_number: i32)\n```"}}}
{"id":3266,"type":"edge","label":"textDocument/hover","inV":3265,"outV":772}
{"id":3267,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::game::Game::GameFn::print_the_dash_by_the_amount_of_steps_on_this_step","unique":"scheme","kind":"export"}
{"id":3268,"type":"edge","label":"packageInformation","inV":1709,"outV":3267}
{"id":3269,"type":"edge","label":"moniker","inV":3267,"outV":772}
{"id":3270,"type":"vertex","label":"definitionResult"}
{"id":3271,"type":"edge","label":"item","document":560,"inVs":[801],"outV":3270}
{"id":3272,"type":"edge","label":"textDocument/definition","inV":3270,"outV":772}
{"id":3273,"type":"vertex","label":"referenceResult"}
{"id":3274,"type":"edge","label":"textDocument/references","inV":3273,"outV":772}
{"id":3275,"type":"edge","label":"item","document":560,"property":"references","inVs":[771],"outV":3273}
{"id":3276,"type":"edge","label":"item","document":560,"property":"definitions","inVs":[801],"outV":3273}
{"id":3277,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::game::Game\n```\n\n```rust\nfn print_the_dash_by_the_amount_of_is_moved_on_steps(&self)\n```"}}}
{"id":3278,"type":"edge","label":"textDocument/hover","inV":3277,"outV":781}
{"id":3279,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::game::Game::GameFn::print_the_dash_by_the_amount_of_is_moved_on_steps","unique":"scheme","kind":"export"}
{"id":3280,"type":"edge","label":"packageInformation","inV":1709,"outV":3279}
{"id":3281,"type":"edge","label":"moniker","inV":3279,"outV":781}
{"id":3282,"type":"vertex","label":"definitionResult"}
{"id":3283,"type":"edge","label":"item","document":560,"inVs":[780],"outV":3282}
{"id":3284,"type":"edge","label":"textDocument/definition","inV":3282,"outV":781}
{"id":3285,"type":"vertex","label":"referenceResult"}
{"id":3286,"type":"edge","label":"textDocument/references","inV":3285,"outV":781}
{"id":3287,"type":"edge","label":"item","document":560,"property":"definitions","inVs":[780],"outV":3285}
{"id":3288,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nself: &Game\n```"}}}
{"id":3289,"type":"edge","label":"textDocument/hover","inV":3288,"outV":784}
{"id":3290,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::game::print_the_dash_by_the_amount_of_is_moved_on_steps::self","unique":"scheme","kind":"export"}
{"id":3291,"type":"edge","label":"packageInformation","inV":1709,"outV":3290}
{"id":3292,"type":"edge","label":"moniker","inV":3290,"outV":784}
{"id":3293,"type":"vertex","label":"definitionResult"}
{"id":3294,"type":"edge","label":"item","document":560,"inVs":[783],"outV":3293}
{"id":3295,"type":"edge","label":"textDocument/definition","inV":3293,"outV":784}
{"id":3296,"type":"vertex","label":"referenceResult"}
{"id":3297,"type":"edge","label":"textDocument/references","inV":3296,"outV":784}
{"id":3298,"type":"edge","label":"item","document":560,"property":"definitions","inVs":[783],"outV":3296}
{"id":3299,"type":"edge","label":"item","document":560,"property":"references","inVs":[789],"outV":3296}
{"id":3300,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nlet player: &Player\n```"}}}
{"id":3301,"type":"edge","label":"textDocument/hover","inV":3300,"outV":787}
{"id":3302,"type":"vertex","label":"definitionResult"}
{"id":3303,"type":"edge","label":"item","document":560,"inVs":[786],"outV":3302}
{"id":3304,"type":"edge","label":"textDocument/definition","inV":3302,"outV":787}
{"id":3305,"type":"vertex","label":"referenceResult"}
{"id":3306,"type":"edge","label":"textDocument/references","inV":3305,"outV":787}
{"id":3307,"type":"edge","label":"item","document":560,"property":"definitions","inVs":[786],"outV":3305}
{"id":3308,"type":"edge","label":"item","document":560,"property":"references","inVs":[796],"outV":3305}
{"id":3309,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\ncore::slice\n```\n\n```rust\nimpl<T> [T]\npub fn iter(&self) -> Iter<'_, T>\n```\n\n---\n\nReturns an iterator over the slice.\n\nThe iterator yields all items from start to end.\n\n# Examples\n\n```rust\nlet x = &[1, 2, 4];\nlet mut iterator = x.iter();\n\nassert_eq!(iterator.next(), Some(&1));\nassert_eq!(iterator.next(), Some(&2));\nassert_eq!(iterator.next(), Some(&4));\nassert_eq!(iterator.next(), None);\n```"}}}
{"id":3310,"type":"edge","label":"textDocument/hover","inV":3309,"outV":794}
{"id":3311,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"core::slice::iter","unique":"scheme","kind":"import"}
{"id":3312,"type":"edge","label":"packageInformation","inV":2072,"outV":3311}
{"id":3313,"type":"edge","label":"moniker","inV":3311,"outV":794}
{"id":3314,"type":"vertex","label":"definitionResult"}
{"id":3315,"type":"vertex","label":"range","start":{"line":1029,"character":11},"end":{"line":1029,"character":15}}
{"id":3316,"type":"edge","label":"contains","inVs":[3315],"outV":2428}
{"id":3317,"type":"edge","label":"item","document":2428,"inVs":[3315],"outV":3314}
{"id":3318,"type":"edge","label":"textDocument/definition","inV":3314,"outV":794}
{"id":3319,"type":"vertex","label":"referenceResult"}
{"id":3320,"type":"edge","label":"textDocument/references","inV":3319,"outV":794}
{"id":3321,"type":"edge","label":"item","document":560,"property":"references","inVs":[793,818],"outV":3319}
{"id":3322,"type":"edge","label":"item","document":945,"property":"references","inVs":[1099,1122],"outV":3319}
{"id":3323,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::game::player::Player\n```\n\n```rust\npub fn print_the_dash_by_the_amount_of_is_moved_on_steps(&self)\n```"}}}
{"id":3324,"type":"edge","label":"textDocument/hover","inV":3323,"outV":799}
{"id":3325,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::player::game::Player::print_the_dash_by_the_amount_of_is_moved_on_steps","unique":"scheme","kind":"export"}
{"id":3326,"type":"edge","label":"packageInformation","inV":1709,"outV":3325}
{"id":3327,"type":"edge","label":"moniker","inV":3325,"outV":799}
{"id":3328,"type":"vertex","label":"definitionResult"}
{"id":3329,"type":"edge","label":"item","document":945,"inVs":[1081],"outV":3328}
{"id":3330,"type":"edge","label":"textDocument/definition","inV":3328,"outV":799}
{"id":3331,"type":"vertex","label":"referenceResult"}
{"id":3332,"type":"edge","label":"textDocument/references","inV":3331,"outV":799}
{"id":3333,"type":"edge","label":"item","document":560,"property":"references","inVs":[798],"outV":3331}
{"id":3334,"type":"edge","label":"item","document":945,"property":"definitions","inVs":[1081],"outV":3331}
{"id":3335,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nself: &Game\n```"}}}
{"id":3336,"type":"edge","label":"textDocument/hover","inV":3335,"outV":804}
{"id":3337,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::game::print_the_dash_by_the_amount_of_steps_on_this_step::self","unique":"scheme","kind":"export"}
{"id":3338,"type":"edge","label":"packageInformation","inV":1709,"outV":3337}
{"id":3339,"type":"edge","label":"moniker","inV":3337,"outV":804}
{"id":3340,"type":"vertex","label":"definitionResult"}
{"id":3341,"type":"edge","label":"item","document":560,"inVs":[803],"outV":3340}
{"id":3342,"type":"edge","label":"textDocument/definition","inV":3340,"outV":804}
{"id":3343,"type":"vertex","label":"referenceResult"}
{"id":3344,"type":"edge","label":"textDocument/references","inV":3343,"outV":804}
{"id":3345,"type":"edge","label":"item","document":560,"property":"definitions","inVs":[803],"outV":3343}
{"id":3346,"type":"edge","label":"item","document":560,"property":"references","inVs":[814],"outV":3343}
{"id":3347,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nstep_number: i32\n```"}}}
{"id":3348,"type":"edge","label":"textDocument/hover","inV":3347,"outV":807}
{"id":3349,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::game::print_the_dash_by_the_amount_of_steps_on_this_step::step_number","unique":"scheme","kind":"export"}
{"id":3350,"type":"edge","label":"packageInformation","inV":1709,"outV":3349}
{"id":3351,"type":"edge","label":"moniker","inV":3349,"outV":807}
{"id":3352,"type":"vertex","label":"definitionResult"}
{"id":3353,"type":"edge","label":"item","document":560,"inVs":[806],"outV":3352}
{"id":3354,"type":"edge","label":"textDocument/definition","inV":3352,"outV":807}
{"id":3355,"type":"vertex","label":"referenceResult"}
{"id":3356,"type":"edge","label":"textDocument/references","inV":3355,"outV":807}
{"id":3357,"type":"edge","label":"item","document":560,"property":"definitions","inVs":[806],"outV":3355}
{"id":3358,"type":"edge","label":"item","document":560,"property":"references","inVs":[825],"outV":3355}
{"id":3359,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nlet player: &Player\n```"}}}
{"id":3360,"type":"edge","label":"textDocument/hover","inV":3359,"outV":812}
{"id":3361,"type":"vertex","label":"definitionResult"}
{"id":3362,"type":"edge","label":"item","document":560,"inVs":[811],"outV":3361}
{"id":3363,"type":"edge","label":"textDocument/definition","inV":3361,"outV":812}
{"id":3364,"type":"vertex","label":"referenceResult"}
{"id":3365,"type":"edge","label":"textDocument/references","inV":3364,"outV":812}
{"id":3366,"type":"edge","label":"item","document":560,"property":"definitions","inVs":[811],"outV":3364}
{"id":3367,"type":"edge","label":"item","document":560,"property":"references","inVs":[820],"outV":3364}
{"id":3368,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::game::player::Player\n```\n\n```rust\npub fn print_the_dash_by_the_amount_of_steps_on_this_step(&self, step_number: i32)\n```"}}}
{"id":3369,"type":"edge","label":"textDocument/hover","inV":3368,"outV":823}
{"id":3370,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::player::game::Player::print_the_dash_by_the_amount_of_steps_on_this_step","unique":"scheme","kind":"export"}
{"id":3371,"type":"edge","label":"packageInformation","inV":1709,"outV":3370}
{"id":3372,"type":"edge","label":"moniker","inV":3370,"outV":823}
{"id":3373,"type":"vertex","label":"definitionResult"}
{"id":3374,"type":"edge","label":"item","document":945,"inVs":[1105],"outV":3373}
{"id":3375,"type":"edge","label":"textDocument/definition","inV":3373,"outV":823}
{"id":3376,"type":"vertex","label":"referenceResult"}
{"id":3377,"type":"edge","label":"textDocument/references","inV":3376,"outV":823}
{"id":3378,"type":"edge","label":"item","document":560,"property":"references","inVs":[822],"outV":3376}
{"id":3379,"type":"edge","label":"item","document":945,"property":"definitions","inVs":[1105],"outV":3376}
{"id":3380,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nself: &Game\n```"}}}
{"id":3381,"type":"edge","label":"textDocument/hover","inV":3380,"outV":832}
{"id":3382,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::game::get_players::self","unique":"scheme","kind":"export"}
{"id":3383,"type":"edge","label":"packageInformation","inV":1709,"outV":3382}
{"id":3384,"type":"edge","label":"moniker","inV":3382,"outV":832}
{"id":3385,"type":"vertex","label":"definitionResult"}
{"id":3386,"type":"edge","label":"item","document":560,"inVs":[831],"outV":3385}
{"id":3387,"type":"edge","label":"textDocument/definition","inV":3385,"outV":832}
{"id":3388,"type":"vertex","label":"referenceResult"}
{"id":3389,"type":"edge","label":"textDocument/references","inV":3388,"outV":832}
{"id":3390,"type":"edge","label":"item","document":560,"property":"definitions","inVs":[831],"outV":3388}
{"id":3391,"type":"edge","label":"item","document":560,"property":"references","inVs":[840],"outV":3388}
{"id":3392,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nself: &Game\n```"}}}
{"id":3393,"type":"edge","label":"textDocument/hover","inV":3392,"outV":847}
{"id":3394,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::game::get_number_of_players::self","unique":"scheme","kind":"export"}
{"id":3395,"type":"edge","label":"packageInformation","inV":1709,"outV":3394}
{"id":3396,"type":"edge","label":"moniker","inV":3394,"outV":847}
{"id":3397,"type":"vertex","label":"definitionResult"}
{"id":3398,"type":"edge","label":"item","document":560,"inVs":[846],"outV":3397}
{"id":3399,"type":"edge","label":"textDocument/definition","inV":3397,"outV":847}
{"id":3400,"type":"vertex","label":"referenceResult"}
{"id":3401,"type":"edge","label":"textDocument/references","inV":3400,"outV":847}
{"id":3402,"type":"edge","label":"item","document":560,"property":"definitions","inVs":[846],"outV":3400}
{"id":3403,"type":"edge","label":"item","document":560,"property":"references","inVs":[851],"outV":3400}
{"id":3404,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nself: &Game\n```"}}}
{"id":3405,"type":"edge","label":"textDocument/hover","inV":3404,"outV":858}
{"id":3406,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::game::get_number_of_attempts::self","unique":"scheme","kind":"export"}
{"id":3407,"type":"edge","label":"packageInformation","inV":1709,"outV":3406}
{"id":3408,"type":"edge","label":"moniker","inV":3406,"outV":858}
{"id":3409,"type":"vertex","label":"definitionResult"}
{"id":3410,"type":"edge","label":"item","document":560,"inVs":[857],"outV":3409}
{"id":3411,"type":"edge","label":"textDocument/definition","inV":3409,"outV":858}
{"id":3412,"type":"vertex","label":"referenceResult"}
{"id":3413,"type":"edge","label":"textDocument/references","inV":3412,"outV":858}
{"id":3414,"type":"edge","label":"item","document":560,"property":"definitions","inVs":[857],"outV":3412}
{"id":3415,"type":"edge","label":"item","document":560,"property":"references","inVs":[862],"outV":3412}
{"id":3416,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nmut self: Game\n```"}}}
{"id":3417,"type":"edge","label":"textDocument/hover","inV":3416,"outV":869}
{"id":3418,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::game::initialize_players::self","unique":"scheme","kind":"export"}
{"id":3419,"type":"edge","label":"packageInformation","inV":1709,"outV":3418}
{"id":3420,"type":"edge","label":"moniker","inV":3418,"outV":869}
{"id":3421,"type":"vertex","label":"definitionResult"}
{"id":3422,"type":"edge","label":"item","document":560,"inVs":[868],"outV":3421}
{"id":3423,"type":"edge","label":"textDocument/definition","inV":3421,"outV":869}
{"id":3424,"type":"vertex","label":"referenceResult"}
{"id":3425,"type":"edge","label":"textDocument/references","inV":3424,"outV":869}
{"id":3426,"type":"edge","label":"item","document":560,"property":"definitions","inVs":[868],"outV":3424}
{"id":3427,"type":"edge","label":"item","document":560,"property":"references","inVs":[900,904,913],"outV":3424}
{"id":3428,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nname_of_players: &Vec<String>\n```"}}}
{"id":3429,"type":"edge","label":"textDocument/hover","inV":3428,"outV":872}
{"id":3430,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::game::initialize_players::name_of_players","unique":"scheme","kind":"export"}
{"id":3431,"type":"edge","label":"packageInformation","inV":1709,"outV":3430}
{"id":3432,"type":"edge","label":"moniker","inV":3430,"outV":872}
{"id":3433,"type":"vertex","label":"definitionResult"}
{"id":3434,"type":"edge","label":"item","document":560,"inVs":[871],"outV":3433}
{"id":3435,"type":"edge","label":"textDocument/definition","inV":3433,"outV":872}
{"id":3436,"type":"vertex","label":"referenceResult"}
{"id":3437,"type":"edge","label":"textDocument/references","inV":3436,"outV":872}
{"id":3438,"type":"edge","label":"item","document":560,"property":"definitions","inVs":[871],"outV":3436}
{"id":3439,"type":"edge","label":"item","document":560,"property":"references","inVs":[883],"outV":3436}
{"id":3440,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nlet name: &String\n```"}}}
{"id":3441,"type":"edge","label":"textDocument/hover","inV":3440,"outV":881}
{"id":3442,"type":"vertex","label":"definitionResult"}
{"id":3443,"type":"edge","label":"item","document":560,"inVs":[880],"outV":3442}
{"id":3444,"type":"edge","label":"textDocument/definition","inV":3442,"outV":881}
{"id":3445,"type":"vertex","label":"referenceResult"}
{"id":3446,"type":"edge","label":"textDocument/references","inV":3445,"outV":881}
{"id":3447,"type":"edge","label":"item","document":560,"property":"definitions","inVs":[880],"outV":3445}
{"id":3448,"type":"edge","label":"item","document":560,"property":"references","inVs":[895],"outV":3445}
{"id":3449,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nlet new_player: Player\n```"}}}
{"id":3450,"type":"edge","label":"textDocument/hover","inV":3449,"outV":886}
{"id":3451,"type":"vertex","label":"definitionResult"}
{"id":3452,"type":"edge","label":"item","document":560,"inVs":[885],"outV":3451}
{"id":3453,"type":"edge","label":"textDocument/definition","inV":3451,"outV":886}
{"id":3454,"type":"vertex","label":"referenceResult"}
{"id":3455,"type":"edge","label":"textDocument/references","inV":3454,"outV":886}
{"id":3456,"type":"edge","label":"item","document":560,"property":"definitions","inVs":[885],"outV":3454}
{"id":3457,"type":"edge","label":"item","document":560,"property":"references","inVs":[911],"outV":3454}
{"id":3458,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::game::player::Player\n```\n\n```rust\npub fn new(name: String, number_of_attempts: i32) -> Self\n```"}}}
{"id":3459,"type":"edge","label":"textDocument/hover","inV":3458,"outV":893}
{"id":3460,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::player::game::Player::new","unique":"scheme","kind":"export"}
{"id":3461,"type":"edge","label":"packageInformation","inV":1709,"outV":3460}
{"id":3462,"type":"edge","label":"moniker","inV":3460,"outV":893}
{"id":3463,"type":"vertex","label":"definitionResult"}
{"id":3464,"type":"edge","label":"item","document":945,"inVs":[985],"outV":3463}
{"id":3465,"type":"edge","label":"textDocument/definition","inV":3463,"outV":893}
{"id":3466,"type":"vertex","label":"referenceResult"}
{"id":3467,"type":"edge","label":"textDocument/references","inV":3466,"outV":893}
{"id":3468,"type":"edge","label":"item","document":560,"property":"references","inVs":[892],"outV":3466}
{"id":3469,"type":"edge","label":"item","document":945,"property":"definitions","inVs":[985],"outV":3466}
{"id":3470,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nalloc::string::String\n```\n\n```rust\nfn to_string(&self) -> String\n```\n\n---\n\nConverts the given value to a `String`.\n\n# Examples\n\n```rust\nlet i = 5;\nlet five = String::from(\"5\");\n\nassert_eq!(five, i.to_string());\n```"}}}
{"id":3471,"type":"edge","label":"textDocument/hover","inV":3470,"outV":898}
{"id":3472,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"alloc::string::String::ToString::to_string","unique":"scheme","kind":"import"}
{"id":3473,"type":"edge","label":"packageInformation","inV":1870,"outV":3472}
{"id":3474,"type":"edge","label":"moniker","inV":3472,"outV":898}
{"id":3475,"type":"vertex","label":"definitionResult"}
{"id":3476,"type":"vertex","label":"range","start":{"line":2670,"character":7},"end":{"line":2670,"character":16}}
{"id":3477,"type":"edge","label":"contains","inVs":[3476],"outV":1893}
{"id":3478,"type":"edge","label":"item","document":1893,"inVs":[3476],"outV":3475}
{"id":3479,"type":"edge","label":"textDocument/definition","inV":3475,"outV":898}
{"id":3480,"type":"vertex","label":"referenceResult"}
{"id":3481,"type":"edge","label":"textDocument/references","inV":3480,"outV":898}
{"id":3482,"type":"edge","label":"item","document":560,"property":"references","inVs":[897],"outV":3480}
{"id":3483,"type":"edge","label":"item","document":945,"property":"references","inVs":[1150],"outV":3480}
{"id":3484,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nalloc::vec::Vec\n```\n\n```rust\nimpl<T, A> Vec<T, A>\npub fn push(&mut self, value: T)\nwhere\n    // Bounds from impl:\n    A: Allocator,\n```\n\n---\n\nAppends an element to the back of a collection.\n\n# Panics\n\nPanics if the new capacity exceeds `isize::MAX` *bytes*.\n\n# Examples\n\n```rust\nlet mut vec = vec![1, 2];\nvec.push(3);\nassert_eq!(vec, [1, 2, 3]);\n```\n\n# Time complexity\n\nTakes amortized *O*(1) time. If the vector's length would exceed its\ncapacity after the push, *O*(*capacity*) time is taken to copy the\nvector's elements to a larger allocation. This expensive operation is\noffset by the *capacity* *O*(1) insertions it allows."}}}
{"id":3485,"type":"edge","label":"textDocument/hover","inV":3484,"outV":909}
{"id":3486,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"alloc::vec::Vec::push","unique":"scheme","kind":"import"}
{"id":3487,"type":"edge","label":"packageInformation","inV":1870,"outV":3486}
{"id":3488,"type":"edge","label":"moniker","inV":3486,"outV":909}
{"id":3489,"type":"vertex","label":"definitionResult"}
{"id":3490,"type":"vertex","label":"range","start":{"line":1996,"character":11},"end":{"line":1996,"character":15}}
{"id":3491,"type":"edge","label":"contains","inVs":[3490],"outV":1875}
{"id":3492,"type":"edge","label":"item","document":1875,"inVs":[3490],"outV":3489}
{"id":3493,"type":"edge","label":"textDocument/definition","inV":3489,"outV":909}
{"id":3494,"type":"vertex","label":"referenceResult"}
{"id":3495,"type":"edge","label":"textDocument/references","inV":3494,"outV":909}
{"id":3496,"type":"edge","label":"item","document":560,"property":"references","inVs":[908],"outV":3494}
{"id":3497,"type":"edge","label":"item","document":945,"property":"references","inVs":[1062],"outV":3494}
{"id":3498,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nself: Game\n```"}}}
{"id":3499,"type":"edge","label":"textDocument/hover","inV":3498,"outV":918}
{"id":3500,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::game::play_steps::self","unique":"scheme","kind":"export"}
{"id":3501,"type":"edge","label":"packageInformation","inV":1709,"outV":3500}
{"id":3502,"type":"edge","label":"moniker","inV":3500,"outV":918}
{"id":3503,"type":"vertex","label":"definitionResult"}
{"id":3504,"type":"edge","label":"item","document":560,"inVs":[917],"outV":3503}
{"id":3505,"type":"edge","label":"textDocument/definition","inV":3503,"outV":918}
{"id":3506,"type":"vertex","label":"referenceResult"}
{"id":3507,"type":"edge","label":"textDocument/references","inV":3506,"outV":918}
{"id":3508,"type":"edge","label":"item","document":560,"property":"definitions","inVs":[917],"outV":3506}
{"id":3509,"type":"edge","label":"item","document":560,"property":"references","inVs":[925],"outV":3506}
{"id":3510,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nlet mut this: Game\n```"}}}
{"id":3511,"type":"edge","label":"textDocument/hover","inV":3510,"outV":923}
{"id":3512,"type":"vertex","label":"definitionResult"}
{"id":3513,"type":"edge","label":"item","document":560,"inVs":[922],"outV":3512}
{"id":3514,"type":"edge","label":"textDocument/definition","inV":3512,"outV":923}
{"id":3515,"type":"vertex","label":"referenceResult"}
{"id":3516,"type":"edge","label":"textDocument/references","inV":3515,"outV":923}
{"id":3517,"type":"edge","label":"item","document":560,"property":"definitions","inVs":[922],"outV":3515}
{"id":3518,"type":"edge","label":"item","document":560,"property":"references","inVs":[930,942],"outV":3515}
{"id":3519,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nlet player: &mut Player\n```"}}}
{"id":3520,"type":"edge","label":"textDocument/hover","inV":3519,"outV":928}
{"id":3521,"type":"vertex","label":"definitionResult"}
{"id":3522,"type":"edge","label":"item","document":560,"inVs":[927],"outV":3521}
{"id":3523,"type":"edge","label":"textDocument/definition","inV":3521,"outV":928}
{"id":3524,"type":"vertex","label":"referenceResult"}
{"id":3525,"type":"edge","label":"textDocument/references","inV":3524,"outV":928}
{"id":3526,"type":"edge","label":"item","document":560,"property":"definitions","inVs":[927],"outV":3524}
{"id":3527,"type":"edge","label":"item","document":560,"property":"references","inVs":[937],"outV":3524}
{"id":3528,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\ncore::slice\n```\n\n```rust\nimpl<T> [T]\npub fn iter_mut(&mut self) -> IterMut<'_, T>\n```\n\n---\n\nReturns an iterator that allows modifying each value.\n\nThe iterator yields all items from start to end.\n\n# Examples\n\n```rust\nlet x = &mut [1, 2, 4];\nfor elem in x.iter_mut() {\n    *elem += 2;\n}\nassert_eq!(x, &[3, 4, 6]);\n```"}}}
{"id":3529,"type":"edge","label":"textDocument/hover","inV":3528,"outV":935}
{"id":3530,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"core::slice::iter_mut","unique":"scheme","kind":"import"}
{"id":3531,"type":"edge","label":"packageInformation","inV":2072,"outV":3530}
{"id":3532,"type":"edge","label":"moniker","inV":3530,"outV":935}
{"id":3533,"type":"vertex","label":"definitionResult"}
{"id":3534,"type":"vertex","label":"range","start":{"line":1048,"character":11},"end":{"line":1048,"character":19}}
{"id":3535,"type":"edge","label":"contains","inVs":[3534],"outV":2428}
{"id":3536,"type":"edge","label":"item","document":2428,"inVs":[3534],"outV":3533}
{"id":3537,"type":"edge","label":"textDocument/definition","inV":3533,"outV":935}
{"id":3538,"type":"vertex","label":"referenceResult"}
{"id":3539,"type":"edge","label":"textDocument/references","inV":3538,"outV":935}
{"id":3540,"type":"edge","label":"item","document":560,"property":"references","inVs":[934],"outV":3538}
{"id":3541,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::game::player::Player\n```\n\n```rust\npub fn play_steps(&mut self)\n```"}}}
{"id":3542,"type":"edge","label":"textDocument/hover","inV":3541,"outV":940}
{"id":3543,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::player::game::Player::play_steps","unique":"scheme","kind":"export"}
{"id":3544,"type":"edge","label":"packageInformation","inV":1709,"outV":3543}
{"id":3545,"type":"edge","label":"moniker","inV":3543,"outV":940}
{"id":3546,"type":"vertex","label":"definitionResult"}
{"id":3547,"type":"edge","label":"item","document":945,"inVs":[1012],"outV":3546}
{"id":3548,"type":"edge","label":"textDocument/definition","inV":3546,"outV":940}
{"id":3549,"type":"vertex","label":"referenceResult"}
{"id":3550,"type":"edge","label":"textDocument/references","inV":3549,"outV":940}
{"id":3551,"type":"edge","label":"item","document":560,"property":"references","inVs":[939],"outV":3549}
{"id":3552,"type":"edge","label":"item","document":945,"property":"definitions","inVs":[1012],"outV":3549}
{"id":3553,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\ncore::clone\n```\n\n```rust\nmacro Clone\n```\n\n---\n\nDerive macro generating an impl of the trait `Clone`."}}}
{"id":3554,"type":"edge","label":"textDocument/hover","inV":3553,"outV":961}
{"id":3555,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"core::clone::Clone","unique":"scheme","kind":"import"}
{"id":3556,"type":"edge","label":"packageInformation","inV":2072,"outV":3555}
{"id":3557,"type":"edge","label":"moniker","inV":3555,"outV":961}
{"id":3558,"type":"vertex","label":"definitionResult"}
{"id":3559,"type":"vertex","label":"document","uri":"file:///opt/homebrew/Cellar/rust/1.81.0/lib/rustlib/src/rust/library/core/src/clone.rs","languageId":"rust"}
{"id":3560,"type":"vertex","label":"range","start":{"line":180,"character":10},"end":{"line":180,"character":15}}
{"id":3561,"type":"edge","label":"contains","inVs":[3560],"outV":3559}
{"id":3562,"type":"edge","label":"item","document":3559,"inVs":[3560],"outV":3558}
{"id":3563,"type":"edge","label":"textDocument/definition","inV":3558,"outV":961}
{"id":3564,"type":"vertex","label":"referenceResult"}
{"id":3565,"type":"edge","label":"textDocument/references","inV":3564,"outV":961}
{"id":3566,"type":"edge","label":"item","document":945,"property":"references","inVs":[960],"outV":3564}
{"id":3567,"type":"edge","label":"item","document":1153,"property":"references","inVs":[1173],"outV":3564}
{"id":3568,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::game::player::Player\n```\n\n```rust\npub(crate) name: String\n```"}}}
{"id":3569,"type":"edge","label":"textDocument/hover","inV":3568,"outV":968}
{"id":3570,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::player::game::Player::name","unique":"scheme","kind":"export"}
{"id":3571,"type":"edge","label":"packageInformation","inV":1709,"outV":3570}
{"id":3572,"type":"edge","label":"moniker","inV":3570,"outV":968}
{"id":3573,"type":"vertex","label":"definitionResult"}
{"id":3574,"type":"edge","label":"item","document":945,"inVs":[967],"outV":3573}
{"id":3575,"type":"edge","label":"textDocument/definition","inV":3573,"outV":968}
{"id":3576,"type":"vertex","label":"referenceResult"}
{"id":3577,"type":"edge","label":"textDocument/references","inV":3576,"outV":968}
{"id":3578,"type":"edge","label":"item","document":945,"property":"definitions","inVs":[967],"outV":3576}
{"id":3579,"type":"edge","label":"item","document":945,"property":"references","inVs":[1090,1134,1148],"outV":3576}
{"id":3580,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::game::player::Player\n```\n\n```rust\npub(crate) steps: Vec<Step, Global>\n```"}}}
{"id":3581,"type":"edge","label":"textDocument/hover","inV":3580,"outV":975}
{"id":3582,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::player::game::Player::steps","unique":"scheme","kind":"export"}
{"id":3583,"type":"edge","label":"packageInformation","inV":1709,"outV":3582}
{"id":3584,"type":"edge","label":"moniker","inV":3582,"outV":975}
{"id":3585,"type":"vertex","label":"definitionResult"}
{"id":3586,"type":"edge","label":"item","document":945,"inVs":[974],"outV":3585}
{"id":3587,"type":"edge","label":"textDocument/definition","inV":3585,"outV":975}
{"id":3588,"type":"vertex","label":"referenceResult"}
{"id":3589,"type":"edge","label":"textDocument/references","inV":3588,"outV":975}
{"id":3590,"type":"edge","label":"item","document":945,"property":"definitions","inVs":[974],"outV":3588}
{"id":3591,"type":"edge","label":"item","document":945,"property":"references","inVs":[1002,1022,1032,1060,1079,1097,1120],"outV":3588}
{"id":3592,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nname: String\n```"}}}
{"id":3593,"type":"edge","label":"textDocument/hover","inV":3592,"outV":988}
{"id":3594,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::player::game::new::name","unique":"scheme","kind":"export"}
{"id":3595,"type":"edge","label":"packageInformation","inV":1709,"outV":3594}
{"id":3596,"type":"edge","label":"moniker","inV":3594,"outV":988}
{"id":3597,"type":"vertex","label":"definitionResult"}
{"id":3598,"type":"edge","label":"item","document":945,"inVs":[987],"outV":3597}
{"id":3599,"type":"edge","label":"textDocument/definition","inV":3597,"outV":988}
{"id":3600,"type":"vertex","label":"referenceResult"}
{"id":3601,"type":"edge","label":"textDocument/references","inV":3600,"outV":988}
{"id":3602,"type":"edge","label":"item","document":945,"property":"definitions","inVs":[987],"outV":3600}
{"id":3603,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nnumber_of_attempts: i32\n```"}}}
{"id":3604,"type":"edge","label":"textDocument/hover","inV":3603,"outV":993}
{"id":3605,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::player::game::new::number_of_attempts","unique":"scheme","kind":"export"}
{"id":3606,"type":"edge","label":"packageInformation","inV":1709,"outV":3605}
{"id":3607,"type":"edge","label":"moniker","inV":3605,"outV":993}
{"id":3608,"type":"vertex","label":"definitionResult"}
{"id":3609,"type":"edge","label":"item","document":945,"inVs":[992],"outV":3608}
{"id":3610,"type":"edge","label":"textDocument/definition","inV":3608,"outV":993}
{"id":3611,"type":"vertex","label":"referenceResult"}
{"id":3612,"type":"edge","label":"textDocument/references","inV":3611,"outV":993}
{"id":3613,"type":"edge","label":"item","document":945,"property":"definitions","inVs":[992],"outV":3611}
{"id":3614,"type":"edge","label":"item","document":945,"property":"references","inVs":[1008],"outV":3611}
{"id":3615,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::game::player\n```\n\n```rust\npub struct Player {\n    pub(crate) name: String,\n    pub(crate) steps: Vec<Step>,\n}\n```"}}}
{"id":3616,"type":"edge","label":"textDocument/hover","inV":3615,"outV":998}
{"id":3617,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::player::game::Player","unique":"scheme","kind":"export"}
{"id":3618,"type":"edge","label":"packageInformation","inV":1709,"outV":3617}
{"id":3619,"type":"edge","label":"moniker","inV":3617,"outV":998}
{"id":3620,"type":"vertex","label":"definitionResult"}
{"id":3621,"type":"edge","label":"item","document":945,"inVs":[983],"outV":3620}
{"id":3622,"type":"edge","label":"textDocument/definition","inV":3620,"outV":998}
{"id":3623,"type":"vertex","label":"referenceResult"}
{"id":3624,"type":"edge","label":"textDocument/references","inV":3623,"outV":998}
{"id":3625,"type":"edge","label":"item","document":945,"property":"references","inVs":[997,1000],"outV":3623}
{"id":3626,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nself: &mut Player\n```"}}}
{"id":3627,"type":"edge","label":"textDocument/hover","inV":3626,"outV":1015}
{"id":3628,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::player::game::play_steps::self","unique":"scheme","kind":"export"}
{"id":3629,"type":"edge","label":"packageInformation","inV":1709,"outV":3628}
{"id":3630,"type":"edge","label":"moniker","inV":3628,"outV":1015}
{"id":3631,"type":"vertex","label":"definitionResult"}
{"id":3632,"type":"edge","label":"item","document":945,"inVs":[1014],"outV":3631}
{"id":3633,"type":"edge","label":"textDocument/definition","inV":3631,"outV":1015}
{"id":3634,"type":"vertex","label":"referenceResult"}
{"id":3635,"type":"edge","label":"textDocument/references","inV":3634,"outV":1015}
{"id":3636,"type":"edge","label":"item","document":945,"property":"definitions","inVs":[1014],"outV":3634}
{"id":3637,"type":"edge","label":"item","document":945,"property":"references","inVs":[1020,1030,1058],"outV":3634}
{"id":3638,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nlet step_number: usize\n```"}}}
{"id":3639,"type":"edge","label":"textDocument/hover","inV":3638,"outV":1018}
{"id":3640,"type":"vertex","label":"definitionResult"}
{"id":3641,"type":"edge","label":"item","document":945,"inVs":[1017],"outV":3640}
{"id":3642,"type":"edge","label":"textDocument/definition","inV":3640,"outV":1018}
{"id":3643,"type":"vertex","label":"referenceResult"}
{"id":3644,"type":"edge","label":"textDocument/references","inV":3643,"outV":1018}
{"id":3645,"type":"edge","label":"item","document":945,"property":"definitions","inVs":[1017],"outV":3643}
{"id":3646,"type":"edge","label":"item","document":945,"property":"references","inVs":[1040],"outV":3643}
{"id":3647,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nalloc::vec::Vec\n```\n\n```rust\nimpl<T, A> Vec<T, A>\npub fn capacity(&self) -> usize\nwhere\n    // Bounds from impl:\n    A: Allocator,\n```\n\n---\n\nReturns the total number of elements the vector can hold without\nreallocating.\n\n# Examples\n\n```rust\nlet mut vec: Vec<i32> = Vec::with_capacity(10);\nvec.push(42);\nassert!(vec.capacity() >= 10);\n```"}}}
{"id":3648,"type":"edge","label":"textDocument/hover","inV":3647,"outV":1025}
{"id":3649,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"alloc::vec::Vec::capacity","unique":"scheme","kind":"import"}
{"id":3650,"type":"edge","label":"packageInformation","inV":1870,"outV":3649}
{"id":3651,"type":"edge","label":"moniker","inV":3649,"outV":1025}
{"id":3652,"type":"vertex","label":"definitionResult"}
{"id":3653,"type":"vertex","label":"range","start":{"line":947,"character":11},"end":{"line":947,"character":19}}
{"id":3654,"type":"edge","label":"contains","inVs":[3653],"outV":1875}
{"id":3655,"type":"edge","label":"item","document":1875,"inVs":[3653],"outV":3652}
{"id":3656,"type":"edge","label":"textDocument/definition","inV":3652,"outV":1025}
{"id":3657,"type":"vertex","label":"referenceResult"}
{"id":3658,"type":"edge","label":"textDocument/references","inV":3657,"outV":1025}
{"id":3659,"type":"edge","label":"item","document":945,"property":"references","inVs":[1024],"outV":3657}
{"id":3660,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nlet last_step: Option<&Step>\n```"}}}
{"id":3661,"type":"edge","label":"textDocument/hover","inV":3660,"outV":1028}
{"id":3662,"type":"vertex","label":"definitionResult"}
{"id":3663,"type":"edge","label":"item","document":945,"inVs":[1027],"outV":3662}
{"id":3664,"type":"edge","label":"textDocument/definition","inV":3662,"outV":1028}
{"id":3665,"type":"vertex","label":"referenceResult"}
{"id":3666,"type":"edge","label":"textDocument/references","inV":3665,"outV":1028}
{"id":3667,"type":"edge","label":"item","document":945,"property":"definitions","inVs":[1027],"outV":3665}
{"id":3668,"type":"edge","label":"item","document":945,"property":"references","inVs":[1056],"outV":3665}
{"id":3669,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\ncore::slice\n```\n\n```rust\nimpl<T> [T]\npub const fn last(&self) -> Option<&T>\n```\n\n---\n\nReturns the last element of the slice, or `None` if it is empty.\n\n# Examples\n\n```rust\nlet v = [10, 40, 30];\nassert_eq!(Some(&30), v.last());\n\nlet w: &[i32] = &[];\nassert_eq!(None, w.last());\n```"}}}
{"id":3670,"type":"edge","label":"textDocument/hover","inV":3669,"outV":1035}
{"id":3671,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"core::slice::last","unique":"scheme","kind":"import"}
{"id":3672,"type":"edge","label":"packageInformation","inV":2072,"outV":3671}
{"id":3673,"type":"edge","label":"moniker","inV":3671,"outV":1035}
{"id":3674,"type":"vertex","label":"definitionResult"}
{"id":3675,"type":"vertex","label":"range","start":{"line":297,"character":17},"end":{"line":297,"character":21}}
{"id":3676,"type":"edge","label":"contains","inVs":[3675],"outV":2428}
{"id":3677,"type":"edge","label":"item","document":2428,"inVs":[3675],"outV":3674}
{"id":3678,"type":"edge","label":"textDocument/definition","inV":3674,"outV":1035}
{"id":3679,"type":"vertex","label":"referenceResult"}
{"id":3680,"type":"edge","label":"textDocument/references","inV":3679,"outV":1035}
{"id":3681,"type":"edge","label":"item","document":945,"property":"references","inVs":[1034],"outV":3679}
{"id":3682,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nlet now_step_number: usize\n```"}}}
{"id":3683,"type":"edge","label":"textDocument/hover","inV":3682,"outV":1038}
{"id":3684,"type":"vertex","label":"definitionResult"}
{"id":3685,"type":"edge","label":"item","document":945,"inVs":[1037],"outV":3684}
{"id":3686,"type":"edge","label":"textDocument/definition","inV":3684,"outV":1038}
{"id":3687,"type":"vertex","label":"referenceResult"}
{"id":3688,"type":"edge","label":"textDocument/references","inV":3687,"outV":1038}
{"id":3689,"type":"edge","label":"item","document":945,"property":"definitions","inVs":[1037],"outV":3687}
{"id":3690,"type":"edge","label":"item","document":945,"property":"references","inVs":[1052],"outV":3687}
{"id":3691,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nlet step: Step\n```"}}}
{"id":3692,"type":"edge","label":"textDocument/hover","inV":3691,"outV":1043}
{"id":3693,"type":"vertex","label":"definitionResult"}
{"id":3694,"type":"edge","label":"item","document":945,"inVs":[1042],"outV":3693}
{"id":3695,"type":"edge","label":"textDocument/definition","inV":3693,"outV":1043}
{"id":3696,"type":"vertex","label":"referenceResult"}
{"id":3697,"type":"edge","label":"textDocument/references","inV":3696,"outV":1043}
{"id":3698,"type":"edge","label":"item","document":945,"property":"definitions","inVs":[1042],"outV":3696}
{"id":3699,"type":"edge","label":"item","document":945,"property":"references","inVs":[1064],"outV":3696}
{"id":3700,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::game::player::step::Step\n```\n\n```rust\npub fn new(step_number: i32, last_step: Option<&Step>) -> Self\n```"}}}
{"id":3701,"type":"edge","label":"textDocument/hover","inV":3700,"outV":1050}
{"id":3702,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::step::player::game::Step::new","unique":"scheme","kind":"export"}
{"id":3703,"type":"edge","label":"packageInformation","inV":1709,"outV":3702}
{"id":3704,"type":"edge","label":"moniker","inV":3702,"outV":1050}
{"id":3705,"type":"vertex","label":"definitionResult"}
{"id":3706,"type":"edge","label":"item","document":1153,"inVs":[1187],"outV":3705}
{"id":3707,"type":"edge","label":"textDocument/definition","inV":3705,"outV":1050}
{"id":3708,"type":"vertex","label":"referenceResult"}
{"id":3709,"type":"edge","label":"textDocument/references","inV":3708,"outV":1050}
{"id":3710,"type":"edge","label":"item","document":945,"property":"references","inVs":[1049],"outV":3708}
{"id":3711,"type":"edge","label":"item","document":1153,"property":"definitions","inVs":[1187],"outV":3708}
{"id":3712,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nself: &Player\n```"}}}
{"id":3713,"type":"edge","label":"textDocument/hover","inV":3712,"outV":1069}
{"id":3714,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::player::game::get_steps::self","unique":"scheme","kind":"export"}
{"id":3715,"type":"edge","label":"packageInformation","inV":1709,"outV":3714}
{"id":3716,"type":"edge","label":"moniker","inV":3714,"outV":1069}
{"id":3717,"type":"vertex","label":"definitionResult"}
{"id":3718,"type":"edge","label":"item","document":945,"inVs":[1068],"outV":3717}
{"id":3719,"type":"edge","label":"textDocument/definition","inV":3717,"outV":1069}
{"id":3720,"type":"vertex","label":"referenceResult"}
{"id":3721,"type":"edge","label":"textDocument/references","inV":3720,"outV":1069}
{"id":3722,"type":"edge","label":"item","document":945,"property":"definitions","inVs":[1068],"outV":3720}
{"id":3723,"type":"edge","label":"item","document":945,"property":"references","inVs":[1077],"outV":3720}
{"id":3724,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nself: &Player\n```"}}}
{"id":3725,"type":"edge","label":"textDocument/hover","inV":3724,"outV":1084}
{"id":3726,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::player::game::print_the_dash_by_the_amount_of_is_moved_on_steps::self","unique":"scheme","kind":"export"}
{"id":3727,"type":"edge","label":"packageInformation","inV":1709,"outV":3726}
{"id":3728,"type":"edge","label":"moniker","inV":3726,"outV":1084}
{"id":3729,"type":"vertex","label":"definitionResult"}
{"id":3730,"type":"edge","label":"item","document":945,"inVs":[1083],"outV":3729}
{"id":3731,"type":"edge","label":"textDocument/definition","inV":3729,"outV":1084}
{"id":3732,"type":"vertex","label":"referenceResult"}
{"id":3733,"type":"edge","label":"textDocument/references","inV":3732,"outV":1084}
{"id":3734,"type":"edge","label":"item","document":945,"property":"definitions","inVs":[1083],"outV":3732}
{"id":3735,"type":"edge","label":"item","document":945,"property":"references","inVs":[1088,1095],"outV":3732}
{"id":3736,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nlet step: &Step\n```"}}}
{"id":3737,"type":"edge","label":"textDocument/hover","inV":3736,"outV":1093}
{"id":3738,"type":"vertex","label":"definitionResult"}
{"id":3739,"type":"edge","label":"item","document":945,"inVs":[1092],"outV":3738}
{"id":3740,"type":"edge","label":"textDocument/definition","inV":3738,"outV":1093}
{"id":3741,"type":"vertex","label":"referenceResult"}
{"id":3742,"type":"edge","label":"textDocument/references","inV":3741,"outV":1093}
{"id":3743,"type":"edge","label":"item","document":945,"property":"definitions","inVs":[1092],"outV":3741}
{"id":3744,"type":"edge","label":"item","document":945,"property":"references","inVs":[1103],"outV":3741}
{"id":3745,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nself: &Player\n```"}}}
{"id":3746,"type":"edge","label":"textDocument/hover","inV":3745,"outV":1108}
{"id":3747,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::player::game::print_the_dash_by_the_amount_of_steps_on_this_step::self","unique":"scheme","kind":"export"}
{"id":3748,"type":"edge","label":"packageInformation","inV":1709,"outV":3747}
{"id":3749,"type":"edge","label":"moniker","inV":3747,"outV":1108}
{"id":3750,"type":"vertex","label":"definitionResult"}
{"id":3751,"type":"edge","label":"item","document":945,"inVs":[1107],"outV":3750}
{"id":3752,"type":"edge","label":"textDocument/definition","inV":3750,"outV":1108}
{"id":3753,"type":"vertex","label":"referenceResult"}
{"id":3754,"type":"edge","label":"textDocument/references","inV":3753,"outV":1108}
{"id":3755,"type":"edge","label":"item","document":945,"property":"definitions","inVs":[1107],"outV":3753}
{"id":3756,"type":"edge","label":"item","document":945,"property":"references","inVs":[1118,1132],"outV":3753}
{"id":3757,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nstep_number: i32\n```"}}}
{"id":3758,"type":"edge","label":"textDocument/hover","inV":3757,"outV":1111}
{"id":3759,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::player::game::print_the_dash_by_the_amount_of_steps_on_this_step::step_number","unique":"scheme","kind":"export"}
{"id":3760,"type":"edge","label":"packageInformation","inV":1709,"outV":3759}
{"id":3761,"type":"edge","label":"moniker","inV":3759,"outV":1111}
{"id":3762,"type":"vertex","label":"definitionResult"}
{"id":3763,"type":"edge","label":"item","document":945,"inVs":[1110],"outV":3762}
{"id":3764,"type":"edge","label":"textDocument/definition","inV":3762,"outV":1111}
{"id":3765,"type":"vertex","label":"referenceResult"}
{"id":3766,"type":"edge","label":"textDocument/references","inV":3765,"outV":1111}
{"id":3767,"type":"edge","label":"item","document":945,"property":"definitions","inVs":[1110],"outV":3765}
{"id":3768,"type":"edge","label":"item","document":945,"property":"references","inVs":[1128],"outV":3765}
{"id":3769,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nlet step: &Step\n```"}}}
{"id":3770,"type":"edge","label":"textDocument/hover","inV":3769,"outV":1116}
{"id":3771,"type":"vertex","label":"definitionResult"}
{"id":3772,"type":"edge","label":"item","document":945,"inVs":[1115],"outV":3771}
{"id":3773,"type":"edge","label":"textDocument/definition","inV":3771,"outV":1116}
{"id":3774,"type":"vertex","label":"referenceResult"}
{"id":3775,"type":"edge","label":"textDocument/references","inV":3774,"outV":1116}
{"id":3776,"type":"edge","label":"item","document":945,"property":"definitions","inVs":[1115],"outV":3774}
{"id":3777,"type":"edge","label":"item","document":945,"property":"references","inVs":[1124,1136],"outV":3774}
{"id":3778,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::game::player::Player\n```\n\n```rust\npub fn get_player_name(&self) -> String\n```"}}}
{"id":3779,"type":"edge","label":"textDocument/hover","inV":3778,"outV":1139}
{"id":3780,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::player::game::Player::get_player_name","unique":"scheme","kind":"export"}
{"id":3781,"type":"edge","label":"packageInformation","inV":1709,"outV":3780}
{"id":3782,"type":"edge","label":"moniker","inV":3780,"outV":1139}
{"id":3783,"type":"vertex","label":"definitionResult"}
{"id":3784,"type":"edge","label":"item","document":945,"inVs":[1138],"outV":3783}
{"id":3785,"type":"edge","label":"textDocument/definition","inV":3783,"outV":1139}
{"id":3786,"type":"vertex","label":"referenceResult"}
{"id":3787,"type":"edge","label":"textDocument/references","inV":3786,"outV":1139}
{"id":3788,"type":"edge","label":"item","document":945,"property":"definitions","inVs":[1138],"outV":3786}
{"id":3789,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nself: &Player\n```"}}}
{"id":3790,"type":"edge","label":"textDocument/hover","inV":3789,"outV":1142}
{"id":3791,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::player::game::get_player_name::self","unique":"scheme","kind":"export"}
{"id":3792,"type":"edge","label":"packageInformation","inV":1709,"outV":3791}
{"id":3793,"type":"edge","label":"moniker","inV":3791,"outV":1142}
{"id":3794,"type":"vertex","label":"definitionResult"}
{"id":3795,"type":"edge","label":"item","document":945,"inVs":[1141],"outV":3794}
{"id":3796,"type":"edge","label":"textDocument/definition","inV":3794,"outV":1142}
{"id":3797,"type":"vertex","label":"referenceResult"}
{"id":3798,"type":"edge","label":"textDocument/references","inV":3797,"outV":1142}
{"id":3799,"type":"edge","label":"item","document":945,"property":"definitions","inVs":[1141],"outV":3797}
{"id":3800,"type":"edge","label":"item","document":945,"property":"references","inVs":[1146],"outV":3797}
{"id":3801,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nextern crate rand\n```\n\n---\n\nUtilities for random number generation\n\nThis release is a compatibility wrapper around `rand` version 0.4. Please\nupgrade."}}}
{"id":3802,"type":"edge","label":"textDocument/hover","inV":3801,"outV":1157}
{"id":3803,"type":"vertex","label":"definitionResult"}
{"id":3804,"type":"vertex","label":"document","uri":"file:///Users/sigridjineth/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rand-0.3.23/src/lib.rs","languageId":"rust"}
{"id":3805,"type":"vertex","label":"range","start":{"line":0,"character":0},"end":{"line":297,"character":0}}
{"id":3806,"type":"edge","label":"contains","inVs":[3805],"outV":3804}
{"id":3807,"type":"edge","label":"item","document":3804,"inVs":[3805],"outV":3803}
{"id":3808,"type":"edge","label":"textDocument/definition","inV":3803,"outV":1157}
{"id":3809,"type":"vertex","label":"referenceResult"}
{"id":3810,"type":"edge","label":"textDocument/references","inV":3809,"outV":1157}
{"id":3811,"type":"edge","label":"item","document":1153,"property":"references","inVs":[1156,1301],"outV":3809}
{"id":3812,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrand\n```\n\n```rust\npub trait Rng\n```\n\n---\n\nA random number generator."}}}
{"id":3813,"type":"edge","label":"textDocument/hover","inV":3812,"outV":1160}
{"id":3814,"type":"vertex","label":"packageInformation","name":"rand","manager":"cargo","repository":{"type":"git","url":"https://github.com/rust-lang-nursery/rand"},"version":"0.4.6"}
{"id":3815,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rand::Rng","unique":"scheme","kind":"import"}
{"id":3816,"type":"edge","label":"packageInformation","inV":3814,"outV":3815}
{"id":3817,"type":"edge","label":"moniker","inV":3815,"outV":1160}
{"id":3818,"type":"vertex","label":"definitionResult"}
{"id":3819,"type":"vertex","label":"document","uri":"file:///Users/sigridjineth/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rand-0.4.6/src/lib.rs","languageId":"rust"}
{"id":3820,"type":"vertex","label":"range","start":{"line":344,"character":10},"end":{"line":344,"character":13}}
{"id":3821,"type":"edge","label":"contains","inVs":[3820],"outV":3819}
{"id":3822,"type":"edge","label":"item","document":3819,"inVs":[3820],"outV":3818}
{"id":3823,"type":"edge","label":"textDocument/definition","inV":3818,"outV":1160}
{"id":3824,"type":"vertex","label":"referenceResult"}
{"id":3825,"type":"edge","label":"textDocument/references","inV":3824,"outV":1160}
{"id":3826,"type":"edge","label":"item","document":1153,"property":"references","inVs":[1159],"outV":3824}
{"id":3827,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nalloc\n```\n\n```rust\nmod fmt\n```\n\n---\n\nUtilities for formatting and printing `String`s.\n\nThis module contains the runtime support for the [`format`](https://doc.rust-lang.org/stable/alloc/macros/macro.format.html) syntax extension.\nThis macro is implemented in the compiler to emit calls to this module in\norder to format arguments at runtime into strings.\n\n# Usage\n\nThe [`format`](https://doc.rust-lang.org/stable/alloc/macros/macro.format.html) macro is intended to be familiar to those coming from C's\n`printf`/`fprintf` functions or Python's `str.format` function.\n\nSome examples of the [`format`](https://doc.rust-lang.org/stable/alloc/macros/macro.format.html) extension are:\n\n```rust\nformat!(\"Hello\");                 // => \"Hello\"\nformat!(\"Hello, {}!\", \"world\");   // => \"Hello, world!\"\nformat!(\"The number is {}\", 1);   // => \"The number is 1\"\nformat!(\"{:?}\", (3, 4));          // => \"(3, 4)\"\nformat!(\"{value}\", value=4);      // => \"4\"\nlet people = \"Rustaceans\";\nformat!(\"Hello {people}!\");       // => \"Hello Rustaceans!\"\nformat!(\"{} {}\", 1, 2);           // => \"1 2\"\nformat!(\"{:04}\", 42);             // => \"0042\" with leading zeros\nformat!(\"{:#?}\", (100, 200));     // => \"(\n                                  //       100,\n                                  //       200,\n                                  //     )\"\n```\n\nFrom these, you can see that the first argument is a format string. It is\nrequired by the compiler for this to be a string literal; it cannot be a\nvariable passed in (in order to perform validity checking). The compiler\nwill then parse the format string and determine if the list of arguments\nprovided is suitable to pass to this format string.\n\nTo convert a single value to a string, use the [`to_string`] method. This\nwill use the [`Display`](https://doc.rust-lang.org/stable/core/fmt/trait.Display.html) formatting trait.\n\n## Positional parameters\n\nEach formatting argument is allowed to specify which value argument it's\nreferencing, and if omitted it is assumed to be \"the next argument\". For\nexample, the format string `{} {} {}` would take three parameters, and they\nwould be formatted in the same order as they're given. The format string\n`{2} {1} {0}`, however, would format arguments in reverse order.\n\nThings can get a little tricky once you start intermingling the two types of\npositional specifiers. The \"next argument\" specifier can be thought of as an\niterator over the argument. Each time a \"next argument\" specifier is seen,\nthe iterator advances. This leads to behavior like this:\n\n```rust\nformat!(\"{1} {} {0} {}\", 1, 2); // => \"2 1 1 2\"\n```\n\nThe internal iterator over the argument has not been advanced by the time\nthe first `{}` is seen, so it prints the first argument. Then upon reaching\nthe second `{}`, the iterator has advanced forward to the second argument.\nEssentially, parameters that explicitly name their argument do not affect\nparameters that do not name an argument in terms of positional specifiers.\n\nA format string is required to use all of its arguments, otherwise it is a\ncompile-time error. You may refer to the same argument more than once in the\nformat string.\n\n## Named parameters\n\nRust itself does not have a Python-like equivalent of named parameters to a\nfunction, but the [`format`](https://doc.rust-lang.org/stable/alloc/macros/macro.format.html) macro is a syntax extension that allows it to\nleverage named parameters. Named parameters are listed at the end of the\nargument list and have the syntax:\n\n```text\nidentifier '=' expression\n```\n\nFor example, the following [`format`](https://doc.rust-lang.org/stable/alloc/macros/macro.format.html) expressions all use named arguments:\n\n```rust\nformat!(\"{argument}\", argument = \"test\");   // => \"test\"\nformat!(\"{name} {}\", 1, name = 2);          // => \"2 1\"\nformat!(\"{a} {c} {b}\", a=\"a\", b='b', c=3);  // => \"a 3 b\"\n```\n\nIf a named parameter does not appear in the argument list, `format!` will\nreference a variable with that name in the current scope.\n\n```rust\nlet argument = 2 + 2;\nformat!(\"{argument}\");   // => \"4\"\n\nfn make_string(a: u32, b: &str) -> String {\n    format!(\"{b} {a}\")\n}\nmake_string(927, \"label\"); // => \"label 927\"\n```\n\nIt is not valid to put positional parameters (those without names) after\narguments that have names. Like with positional parameters, it is not\nvalid to provide named parameters that are unused by the format string.\n\n# Formatting Parameters\n\nEach argument being formatted can be transformed by a number of formatting\nparameters (corresponding to `format_spec` in [the syntax](https://doc.rust-lang.org/stable/alloc/fmt/index.html#syntax)). These\nparameters affect the string representation of what's being formatted.\n\n## Width\n\n```rust\n// All of these print \"Hello x    !\"\nprintln!(\"Hello {:5}!\", \"x\");\nprintln!(\"Hello {:1$}!\", \"x\", 5);\nprintln!(\"Hello {1:0$}!\", 5, \"x\");\nprintln!(\"Hello {:width$}!\", \"x\", width = 5);\nlet width = 5;\nprintln!(\"Hello {:width$}!\", \"x\");\n```\n\nThis is a parameter for the \"minimum width\" that the format should take up.\nIf the value's string does not fill up this many characters, then the\npadding specified by fill/alignment will be used to take up the required\nspace (see below).\n\nThe value for the width can also be provided as a [`usize`](https://doc.rust-lang.org/nightly/core/primitive.usize.html) in the list of\nparameters by adding a postfix `$`, indicating that the second argument is\na [`usize`](https://doc.rust-lang.org/nightly/core/primitive.usize.html) specifying the width.\n\nReferring to an argument with the dollar syntax does not affect the \"next\nargument\" counter, so it's usually a good idea to refer to arguments by\nposition, or use named arguments.\n\n## Fill/Alignment\n\n```rust\nassert_eq!(format!(\"Hello {:<5}!\", \"x\"),  \"Hello x    !\");\nassert_eq!(format!(\"Hello {:-<5}!\", \"x\"), \"Hello x----!\");\nassert_eq!(format!(\"Hello {:^5}!\", \"x\"),  \"Hello   x  !\");\nassert_eq!(format!(\"Hello {:>5}!\", \"x\"),  \"Hello     x!\");\n```\n\nThe optional fill character and alignment is provided normally in conjunction with the\n[`width`](https://doc.rust-lang.org/stable/alloc/fmt/index.html#width) parameter. It must be defined before `width`, right after the `:`.\nThis indicates that if the value being formatted is smaller than\n`width` some extra characters will be printed around it.\nFilling comes in the following variants for different alignments:\n\n* `[fill]<` - the argument is left-aligned in `width` columns\n* `[fill]^` - the argument is center-aligned in `width` columns\n* `[fill]>` - the argument is right-aligned in `width` columns\n\nThe default [fill/alignment](https://doc.rust-lang.org/stable/alloc/fmt/index.html#fillalignment) for non-numerics is a space and\nleft-aligned. The\ndefault for numeric formatters is also a space character but with right-alignment. If\nthe `0` flag (see below) is specified for numerics, then the implicit fill character is\n`0`.\n\nNote that alignment might not be implemented by some types. In particular, it\nis not generally implemented for the `Debug` trait.  A good way to ensure\npadding is applied is to format your input, then pad this resulting string\nto obtain your output:\n\n```rust\nprintln!(\"Hello {:^15}!\", format!(\"{:?}\", Some(\"hi\"))); // => \"Hello   Some(\"hi\")   !\"\n```\n\n## Sign/`#`/`0`\n\n```rust\nassert_eq!(format!(\"Hello {:+}!\", 5), \"Hello +5!\");\nassert_eq!(format!(\"{:#x}!\", 27), \"0x1b!\");\nassert_eq!(format!(\"Hello {:05}!\", 5),  \"Hello 00005!\");\nassert_eq!(format!(\"Hello {:05}!\", -5), \"Hello -0005!\");\nassert_eq!(format!(\"{:#010x}!\", 27), \"0x0000001b!\");\n```\n\nThese are all flags altering the behavior of the formatter.\n\n* `+` - This is intended for numeric types and indicates that the sign\n  should always be printed. By default only the negative sign of signed values\n  is printed, and the sign of positive or unsigned values is omitted.\n  This flag indicates that the correct sign (`+` or `-`) should always be printed.\n\n* `-` - Currently not used\n\n* `#` - This flag indicates that the \"alternate\" form of printing should\n  be used. The alternate forms are:\n  \n  * `#?` - pretty-print the [`Debug`](https://doc.rust-lang.org/stable/core/fmt/trait.Debug.html) formatting (adds linebreaks and indentation)\n  * `#x` - precedes the argument with a `0x`\n  * `#X` - precedes the argument with a `0x`\n  * `#b` - precedes the argument with a `0b`\n  * `#o` - precedes the argument with a `0o`\n  See [Formatting traits](https://doc.rust-lang.org/stable/alloc/fmt/index.html#formatting-traits) for a description of what the `?`, `x`, `X`,\n  `b`, and `o` flags do.\n\n* `0` - This is used to indicate for integer formats that the padding to `width` should\n  both be done with a `0` character as well as be sign-aware. A format\n  like `{:08}` would yield `00000001` for the integer `1`, while the\n  same format would yield `-0000001` for the integer `-1`. Notice that\n  the negative version has one fewer zero than the positive version.\n  Note that padding zeros are always placed after the sign (if any)\n  and before the digits. When used together with the `#` flag, a similar\n  rule applies: padding zeros are inserted after the prefix but before\n  the digits. The prefix is included in the total width.\n  This flag overrides the [fill character and alignment flag](https://doc.rust-lang.org/stable/alloc/fmt/index.html#fillalignment).\n\n## Precision\n\nFor non-numeric types, this can be considered a \"maximum width\". If the resulting string is\nlonger than this width, then it is truncated down to this many characters and that truncated\nvalue is emitted with proper `fill`, `alignment` and `width` if those parameters are set.\n\nFor integral types, this is ignored.\n\nFor floating-point types, this indicates how many digits after the decimal point should be\nprinted.\n\nThere are three possible ways to specify the desired `precision`:\n\n1. An integer `.N`:\n   \n   the integer `N` itself is the precision.\n\n1. An integer or name followed by dollar sign `.N$`:\n   \n   use format *argument* `N` (which must be a `usize`) as the precision.\n\n1. An asterisk `.*`:\n   \n   `.*` means that this `{...}` is associated with *two* format inputs rather than one:\n   \n   * If a format string in the fashion of `{:<spec>.*}` is used, then the first input holds\n     the `usize` precision, and the second holds the value to print.\n   * If a format string in the fashion of `{<arg>:<spec>.*}` is used, then the `<arg>` part\n     refers to the value to print, and the `precision` is taken like it was specified with an\n     omitted positional parameter (`{}` instead of `{<arg>:}`).\n\nFor example, the following calls all print the same thing `Hello x is 0.01000`:\n\n```rust\n// Hello {arg 0 (\"x\")} is {arg 1 (0.01) with precision specified inline (5)}\nprintln!(\"Hello {0} is {1:.5}\", \"x\", 0.01);\n\n// Hello {arg 1 (\"x\")} is {arg 2 (0.01) with precision specified in arg 0 (5)}\nprintln!(\"Hello {1} is {2:.0$}\", 5, \"x\", 0.01);\n\n// Hello {arg 0 (\"x\")} is {arg 2 (0.01) with precision specified in arg 1 (5)}\nprintln!(\"Hello {0} is {2:.1$}\", \"x\", 5, 0.01);\n\n// Hello {next arg -> arg 0 (\"x\")} is {second of next two args -> arg 2 (0.01) with precision\n//                          specified in first of next two args -> arg 1 (5)}\nprintln!(\"Hello {} is {:.*}\",    \"x\", 5, 0.01);\n\n// Hello {arg 1 (\"x\")} is {arg 2 (0.01) with precision\n//                          specified in next arg -> arg 0 (5)}\nprintln!(\"Hello {1} is {2:.*}\",  5, \"x\", 0.01);\n\n// Hello {next arg -> arg 0 (\"x\")} is {arg 2 (0.01) with precision\n//                          specified in next arg -> arg 1 (5)}\nprintln!(\"Hello {} is {2:.*}\",   \"x\", 5, 0.01);\n\n// Hello {next arg -> arg 0 (\"x\")} is {arg \"number\" (0.01) with precision specified\n//                          in arg \"prec\" (5)}\nprintln!(\"Hello {} is {number:.prec$}\", \"x\", prec = 5, number = 0.01);\n```\n\nWhile these:\n\n```rust\nprintln!(\"{}, `{name:.*}` has 3 fractional digits\", \"Hello\", 3, name=1234.56);\nprintln!(\"{}, `{name:.*}` has 3 characters\", \"Hello\", 3, name=\"1234.56\");\nprintln!(\"{}, `{name:>8.*}` has 3 right-aligned characters\", \"Hello\", 3, name=\"1234.56\");\n```\n\nprint three significantly different things:\n\n```text\nHello, `1234.560` has 3 fractional digits\nHello, `123` has 3 characters\nHello, `     123` has 3 right-aligned characters\n```\n\nWhen truncating these values, Rust uses [round half-to-even](https://en.wikipedia.org/wiki/Rounding#Rounding_half_to_even),\nwhich is the default rounding mode in IEEE 754.\nFor example,\n\n```rust\nprint!(\"{0:.1$e}\", 12345, 3);\nprint!(\"{0:.1$e}\", 12355, 3);\n```\n\nWould return:\n\n```text\n1.234e4\n1.236e4\n```\n\n## Localization\n\nIn some programming languages, the behavior of string formatting functions\ndepends on the operating system's locale setting. The format functions\nprovided by Rust's standard library do not have any concept of locale and\nwill produce the same results on all systems regardless of user\nconfiguration.\n\nFor example, the following code will always print `1.5` even if the system\nlocale uses a decimal separator other than a dot.\n\n```rust\nprintln!(\"The value is {}\", 1.5);\n```\n\n# Escaping\n\nThe literal characters `{` and `}` may be included in a string by preceding\nthem with the same character. For example, the `{` character is escaped with\n`{{` and the `}` character is escaped with `}}`.\n\n```rust\nassert_eq!(format!(\"Hello {{}}\"), \"Hello {}\");\nassert_eq!(format!(\"{{ Hello\"), \"{ Hello\");\n```\n\n# Syntax\n\nTo summarize, here you can find the full grammar of format strings.\nThe syntax for the formatting language used is drawn from other languages,\nso it should not be too alien. Arguments are formatted with Python-like\nsyntax, meaning that arguments are surrounded by `{}` instead of the C-like\n`%`. The actual grammar for the formatting syntax is:\n\n```text\nformat_string := text [ maybe_format text ] *\nmaybe_format := '{' '{' | '}' '}' | format\nformat := '{' [ argument ] [ ':' format_spec ] [ ws ] * '}'\nargument := integer | identifier\n\nformat_spec := [[fill]align][sign]['#']['0'][width]['.' precision]type\nfill := character\nalign := '<' | '^' | '>'\nsign := '+' | '-'\nwidth := count\nprecision := count | '*'\ntype := '' | '?' | 'x?' | 'X?' | identifier\ncount := parameter | integer\nparameter := argument '$'\n```\n\nIn the above grammar,\n\n* `text` must not contain any `'{'` or `'}'` characters,\n* `ws` is any character for which [`char::is_whitespace`](`char::is_whitespace`) returns `true`, has no semantic\n  meaning and is completely optional,\n* `integer` is a decimal integer that may contain leading zeroes and must fit into an `usize` and\n* `identifier` is an `IDENTIFIER_OR_KEYWORD` (not an `IDENTIFIER`) as defined by the [Rust language reference](https://doc.rust-lang.org/reference/identifiers.html).\n\n# Formatting traits\n\nWhen requesting that an argument be formatted with a particular type, you\nare actually requesting that an argument ascribes to a particular trait.\nThis allows multiple actual types to be formatted via `{:x}` (like [`i8`](https://doc.rust-lang.org/nightly/core/primitive.i8.html) as\nwell as [`isize`](https://doc.rust-lang.org/nightly/core/primitive.isize.html)). The current mapping of types to traits is:\n\n* *nothing* ⇒ [`Display`](https://doc.rust-lang.org/stable/core/fmt/trait.Display.html)\n* `?` ⇒ [`Debug`](https://doc.rust-lang.org/stable/core/fmt/trait.Debug.html)\n* `x?` ⇒ [`Debug`](https://doc.rust-lang.org/stable/core/fmt/trait.Debug.html) with lower-case hexadecimal integers\n* `X?` ⇒ [`Debug`](https://doc.rust-lang.org/stable/core/fmt/trait.Debug.html) with upper-case hexadecimal integers\n* `o` ⇒ [`Octal`](https://doc.rust-lang.org/stable/core/fmt/trait.Octal.html)\n* `x` ⇒ [`LowerHex`](https://doc.rust-lang.org/stable/core/fmt/trait.LowerHex.html)\n* `X` ⇒ [`UpperHex`](https://doc.rust-lang.org/stable/core/fmt/trait.UpperHex.html)\n* `p` ⇒ [`Pointer`](https://doc.rust-lang.org/stable/core/fmt/trait.Pointer.html)\n* `b` ⇒ [`Binary`](https://doc.rust-lang.org/stable/core/fmt/trait.Binary.html)\n* `e` ⇒ [`LowerExp`](https://doc.rust-lang.org/stable/core/fmt/trait.LowerExp.html)\n* `E` ⇒ [`UpperExp`](https://doc.rust-lang.org/stable/core/fmt/trait.UpperExp.html)\n\nWhat this means is that any type of argument which implements the\n[`fmt::Binary`](https://doc.rust-lang.org/stable/core/fmt/trait.Binary.html) trait can then be formatted with `{:b}`. Implementations\nare provided for these traits for a number of primitive types by the\nstandard library as well. If no format is specified (as in `{}` or `{:6}`),\nthen the format trait used is the [`Display`](https://doc.rust-lang.org/stable/core/fmt/trait.Display.html) trait.\n\nWhen implementing a format trait for your own type, you will have to\nimplement a method of the signature:\n\n```rust\nfn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n```\n\nYour type will be passed as `self` by-reference, and then the function\nshould emit output into the Formatter `f` which implements `fmt::Write`. It is up to each\nformat trait implementation to correctly adhere to the requested formatting parameters.\nThe values of these parameters can be accessed with methods of the\n[`Formatter`](https://doc.rust-lang.org/stable/core/fmt/struct.Formatter.html) struct. In order to help with this, the [`Formatter`](https://doc.rust-lang.org/stable/core/fmt/struct.Formatter.html) struct also\nprovides some helper methods.\n\nAdditionally, the return value of this function is [`fmt::Result`] which is a\ntype alias of <code>\n[Result]\\<(), [std::fmt::Error]\\></code>. Formatting implementations\nshould ensure that they propagate errors from the [`Formatter`](https://doc.rust-lang.org/stable/core/fmt/struct.Formatter.html) (e.g., when\ncalling [`write`](https://doc.rust-lang.org/stable/core/macros/macro.write.html)). However, they should never return errors spuriously. That\nis, a formatting implementation must and may only return an error if the\npassed-in [`Formatter`](https://doc.rust-lang.org/stable/core/fmt/struct.Formatter.html) returns an error. This is because, contrary to what\nthe function signature might suggest, string formatting is an infallible\noperation. This function only returns a [`Result`](https://doc.rust-lang.org/stable/core/fmt/type.Result.html) because writing to the\nunderlying stream might fail and it must provide a way to propagate the fact\nthat an error has occurred back up the stack.\n\nAn example of implementing the formatting traits would look\nlike:\n\n```rust\nuse std::fmt;\n\n#[derive(Debug)]\nstruct Vector2D {\n    x: isize,\n    y: isize,\n}\n\nimpl fmt::Display for Vector2D {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        // The `f` value implements the `Write` trait, which is what the\n        // write! macro is expecting. Note that this formatting ignores the\n        // various flags provided to format strings.\n        write!(f, \"({}, {})\", self.x, self.y)\n    }\n}\n\n// Different traits allow different forms of output of a type. The meaning\n// of this format is to print the magnitude of a vector.\nimpl fmt::Binary for Vector2D {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        let magnitude = (self.x * self.x + self.y * self.y) as f64;\n        let magnitude = magnitude.sqrt();\n\n        // Respect the formatting flags by using the helper method\n        // `pad_integral` on the Formatter object. See the method\n        // documentation for details, and the function `pad` can be used\n        // to pad strings.\n        let decimals = f.precision().unwrap_or(3);\n        let string = format!(\"{magnitude:.decimals$}\");\n        f.pad_integral(true, \"\", &string)\n    }\n}\n\nfn main() {\n    let myvector = Vector2D { x: 3, y: 4 };\n\n    println!(\"{myvector}\");       // => \"(3, 4)\"\n    println!(\"{myvector:?}\");     // => \"Vector2D {x: 3, y:4}\"\n    println!(\"{myvector:10.3b}\"); // => \"     5.000\"\n}\n```\n\n### `fmt::Display` vs `fmt::Debug`\n\nThese two formatting traits have distinct purposes:\n\n* [`fmt::Display`](https://doc.rust-lang.org/stable/core/fmt/trait.Display.html) implementations assert that the type can be faithfully\n  represented as a UTF-8 string at all times. It is **not** expected that\n  all types implement the [`Display`](https://doc.rust-lang.org/stable/core/fmt/trait.Display.html) trait.\n* [`fmt::Debug`](https://doc.rust-lang.org/stable/core/fmt/trait.Debug.html) implementations should be implemented for **all** public types.\n  Output will typically represent the internal state as faithfully as possible.\n  The purpose of the [`Debug`](https://doc.rust-lang.org/stable/core/fmt/trait.Debug.html) trait is to facilitate debugging Rust code. In\n  most cases, using `#[derive(Debug)]` is sufficient and recommended.\n\nSome examples of the output from both traits:\n\n```rust\nassert_eq!(format!(\"{} {:?}\", 3, 4), \"3 4\");\nassert_eq!(format!(\"{} {:?}\", 'a', 'b'), \"a 'b'\");\nassert_eq!(format!(\"{} {:?}\", \"foo\\n\", \"bar\\n\"), \"foo\\n \\\"bar\\\\n\\\"\");\n```\n\n# Related macros\n\nThere are a number of related macros in the [`format`](https://doc.rust-lang.org/stable/alloc/macros/macro.format.html) family. The ones that\nare currently implemented are:\n\n```rust\nformat!      // described above\nwrite!       // first argument is either a &mut io::Write or a &mut fmt::Write, the destination\nwriteln!     // same as write but appends a newline\nprint!       // the format string is printed to the standard output\nprintln!     // same as print but appends a newline\neprint!      // the format string is printed to the standard error\neprintln!    // same as eprint but appends a newline\nformat_args! // described below.\n```\n\n### `write!`\n\n[`write`](https://doc.rust-lang.org/stable/core/macros/macro.write.html) and [`writeln`](https://doc.rust-lang.org/stable/core/macros/macro.writeln.html) are two macros which are used to emit the format string\nto a specified stream. This is used to prevent intermediate allocations of\nformat strings and instead directly write the output. Under the hood, this\nfunction is actually invoking the [`write_fmt`](https://doc.rust-lang.org/stable/std/io/trait.Write.html#method.write_fmt) function defined on the\n[`std::io::Write`](https://doc.rust-lang.org/stable/std/io/trait.Write.html) and the [`std::fmt::Write`](https://doc.rust-lang.org/stable/std/fmt/trait.Write.html) trait. Example usage is:\n\n```rust\nuse std::io::Write;\nlet mut w = Vec::new();\nwrite!(&mut w, \"Hello {}!\", \"world\");\n```\n\n### `print!`\n\nThis and [`println!`](https://doc.rust-lang.org/stable/std/macro.println.html) emit their output to stdout. Similarly to the [`write`](https://doc.rust-lang.org/stable/core/macros/macro.write.html)\nmacro, the goal of these macros is to avoid intermediate allocations when\nprinting output. Example usage is:\n\n```rust\nprint!(\"Hello {}!\", \"world\");\nprintln!(\"I have a newline {}\", \"character at the end\");\n```\n\n### `eprint!`\n\nThe [`eprint!`](https://doc.rust-lang.org/stable/std/macro.eprint.html) and [`eprintln!`](https://doc.rust-lang.org/stable/std/macro.eprintln.html) macros are identical to\n[`print!`](https://doc.rust-lang.org/stable/std/macro.print.html) and [`println!`](https://doc.rust-lang.org/stable/std/macro.println.html), respectively, except they emit their\noutput to stderr.\n\n### `format_args!`\n\n[`format_args!`](https://doc.rust-lang.org/stable/std/macro.format_args.html) is a curious macro used to safely pass around\nan opaque object describing the format string. This object\ndoes not require any heap allocations to create, and it only\nreferences information on the stack. Under the hood, all of\nthe related macros are implemented in terms of this. First\noff, some example usage is:\n\n```rust\nuse std::fmt;\nuse std::io::{self, Write};\n\nlet mut some_writer = io::stdout();\nwrite!(&mut some_writer, \"{}\", format_args!(\"print with a {}\", \"macro\"));\n\nfn my_fmt_fn(args: fmt::Arguments<'_>) {\n    write!(&mut io::stdout(), \"{args}\");\n}\nmy_fmt_fn(format_args!(\", or a {} too\", \"function\"));\n```\n\nThe result of the [`format_args!`](https://doc.rust-lang.org/stable/std/macro.format_args.html) macro is a value of type [`fmt::Arguments`].\nThis structure can then be passed to the [`write`] and [`format`] functions\ninside this module in order to process the format string.\nThe goal of this macro is to even further prevent intermediate allocations\nwhen dealing with formatting strings.\n\nFor example, a logging library could use the standard formatting syntax, but\nit would internally pass around this structure until it has been determined\nwhere output should go to."}}}
{"id":3828,"type":"edge","label":"textDocument/hover","inV":3827,"outV":1165}
{"id":3829,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"alloc::fmt","unique":"scheme","kind":"import"}
{"id":3830,"type":"edge","label":"packageInformation","inV":1870,"outV":3829}
{"id":3831,"type":"edge","label":"moniker","inV":3829,"outV":1165}
{"id":3832,"type":"vertex","label":"definitionResult"}
{"id":3833,"type":"vertex","label":"document","uri":"file:///opt/homebrew/Cellar/rust/1.81.0/lib/rustlib/src/rust/library/alloc/src/fmt.rs","languageId":"rust"}
{"id":3834,"type":"vertex","label":"range","start":{"line":0,"character":0},"end":{"line":644,"character":0}}
{"id":3835,"type":"edge","label":"contains","inVs":[3834],"outV":3833}
{"id":3836,"type":"edge","label":"item","document":3833,"inVs":[3834],"outV":3832}
{"id":3837,"type":"edge","label":"textDocument/definition","inV":3832,"outV":1165}
{"id":3838,"type":"vertex","label":"referenceResult"}
{"id":3839,"type":"edge","label":"textDocument/references","inV":3838,"outV":1165}
{"id":3840,"type":"edge","label":"item","document":1153,"property":"references","inVs":[1164,1336,1349,1354],"outV":3838}
{"id":3841,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nstep_number: i32\n```"}}}
{"id":3842,"type":"edge","label":"textDocument/hover","inV":3841,"outV":1190}
{"id":3843,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::step::player::game::new::step_number","unique":"scheme","kind":"export"}
{"id":3844,"type":"edge","label":"packageInformation","inV":1709,"outV":3843}
{"id":3845,"type":"edge","label":"moniker","inV":3843,"outV":1190}
{"id":3846,"type":"vertex","label":"definitionResult"}
{"id":3847,"type":"edge","label":"item","document":1153,"inVs":[1189],"outV":3846}
{"id":3848,"type":"edge","label":"textDocument/definition","inV":3846,"outV":1190}
{"id":3849,"type":"vertex","label":"referenceResult"}
{"id":3850,"type":"edge","label":"textDocument/references","inV":3849,"outV":1190}
{"id":3851,"type":"edge","label":"item","document":1153,"property":"definitions","inVs":[1189],"outV":3849}
{"id":3852,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nlast_step: Option<&Step>\n```"}}}
{"id":3853,"type":"edge","label":"textDocument/hover","inV":3852,"outV":1195}
{"id":3854,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::step::player::game::new::last_step","unique":"scheme","kind":"export"}
{"id":3855,"type":"edge","label":"packageInformation","inV":1709,"outV":3854}
{"id":3856,"type":"edge","label":"moniker","inV":3854,"outV":1195}
{"id":3857,"type":"vertex","label":"definitionResult"}
{"id":3858,"type":"edge","label":"item","document":1153,"inVs":[1194],"outV":3857}
{"id":3859,"type":"edge","label":"textDocument/definition","inV":3857,"outV":1195}
{"id":3860,"type":"vertex","label":"referenceResult"}
{"id":3861,"type":"edge","label":"textDocument/references","inV":3860,"outV":1195}
{"id":3862,"type":"edge","label":"item","document":1153,"property":"definitions","inVs":[1194],"outV":3860}
{"id":3863,"type":"edge","label":"item","document":1153,"property":"references","inVs":[1232],"outV":3860}
{"id":3864,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\ncore::option\n```\n\n```rust\npub enum Option<T> {\n    None,\n    Some( /* … */ ),\n}\n```\n\n---\n\nThe `Option` type. See [the module level documentation](https://doc.rust-lang.org/stable/core/option/index.html) for more."}}}
{"id":3865,"type":"edge","label":"textDocument/hover","inV":3864,"outV":1198}
{"id":3866,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"core::option::Option","unique":"scheme","kind":"import"}
{"id":3867,"type":"edge","label":"packageInformation","inV":2072,"outV":3866}
{"id":3868,"type":"edge","label":"moniker","inV":3866,"outV":1198}
{"id":3869,"type":"vertex","label":"definitionResult"}
{"id":3870,"type":"vertex","label":"range","start":{"line":573,"character":9},"end":{"line":573,"character":15}}
{"id":3871,"type":"edge","label":"contains","inVs":[3870],"outV":2442}
{"id":3872,"type":"edge","label":"item","document":2442,"inVs":[3870],"outV":3869}
{"id":3873,"type":"edge","label":"textDocument/definition","inV":3869,"outV":1198}
{"id":3874,"type":"vertex","label":"referenceResult"}
{"id":3875,"type":"edge","label":"textDocument/references","inV":3874,"outV":1198}
{"id":3876,"type":"edge","label":"item","document":1153,"property":"references","inVs":[1197,1249],"outV":3874}
{"id":3877,"type":"edge","label":"item","document":1369,"property":"references","inVs":[1575],"outV":3874}
{"id":3878,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::game::player::step\n```\n\n```rust\npub struct Step {\n    pub is_moved: i32,\n    pub step_number: i32,\n}\n```"}}}
{"id":3879,"type":"edge","label":"textDocument/hover","inV":3878,"outV":1203}
{"id":3880,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::step::player::game::Step","unique":"scheme","kind":"export"}
{"id":3881,"type":"edge","label":"packageInformation","inV":1709,"outV":3880}
{"id":3882,"type":"edge","label":"moniker","inV":3880,"outV":1203}
{"id":3883,"type":"vertex","label":"definitionResult"}
{"id":3884,"type":"edge","label":"item","document":1153,"inVs":[1185],"outV":3883}
{"id":3885,"type":"edge","label":"textDocument/definition","inV":3883,"outV":1203}
{"id":3886,"type":"vertex","label":"referenceResult"}
{"id":3887,"type":"edge","label":"textDocument/references","inV":3886,"outV":1203}
{"id":3888,"type":"edge","label":"item","document":1153,"property":"references","inVs":[1202,1208,1217,1224,1262,1280],"outV":3886}
{"id":3889,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nlet mut this: Step\n```"}}}
{"id":3890,"type":"edge","label":"textDocument/hover","inV":3889,"outV":1206}
{"id":3891,"type":"vertex","label":"definitionResult"}
{"id":3892,"type":"edge","label":"item","document":1153,"inVs":[1205],"outV":3891}
{"id":3893,"type":"edge","label":"textDocument/definition","inV":3891,"outV":1206}
{"id":3894,"type":"vertex","label":"referenceResult"}
{"id":3895,"type":"edge","label":"textDocument/references","inV":3894,"outV":1206}
{"id":3896,"type":"edge","label":"item","document":1153,"property":"definitions","inVs":[1205],"outV":3894}
{"id":3897,"type":"edge","label":"item","document":1153,"property":"references","inVs":[1222,1228,1234],"outV":3894}
{"id":3898,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nlet this_step_move_number: i32\n```"}}}
{"id":3899,"type":"edge","label":"textDocument/hover","inV":3898,"outV":1213}
{"id":3900,"type":"vertex","label":"definitionResult"}
{"id":3901,"type":"edge","label":"item","document":1153,"inVs":[1212],"outV":3900}
{"id":3902,"type":"edge","label":"textDocument/definition","inV":3900,"outV":1213}
{"id":3903,"type":"vertex","label":"referenceResult"}
{"id":3904,"type":"edge","label":"textDocument/references","inV":3903,"outV":1213}
{"id":3905,"type":"edge","label":"item","document":1153,"property":"definitions","inVs":[1212],"outV":3903}
{"id":3906,"type":"edge","label":"item","document":1153,"property":"references","inVs":[1230],"outV":3903}
{"id":3907,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::game::player::step::Step\n```\n\n```rust\npub fn get_this_step_move_number_by_random() -> i32\n```"}}}
{"id":3908,"type":"edge","label":"textDocument/hover","inV":3907,"outV":1220}
{"id":3909,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::step::player::game::Step::get_this_step_move_number_by_random","unique":"scheme","kind":"export"}
{"id":3910,"type":"edge","label":"packageInformation","inV":1709,"outV":3909}
{"id":3911,"type":"edge","label":"moniker","inV":3909,"outV":1220}
{"id":3912,"type":"vertex","label":"definitionResult"}
{"id":3913,"type":"edge","label":"item","document":1153,"inVs":[1294],"outV":3912}
{"id":3914,"type":"edge","label":"textDocument/definition","inV":3912,"outV":1220}
{"id":3915,"type":"vertex","label":"referenceResult"}
{"id":3916,"type":"edge","label":"textDocument/references","inV":3915,"outV":1220}
{"id":3917,"type":"edge","label":"item","document":1153,"property":"references","inVs":[1219],"outV":3915}
{"id":3918,"type":"edge","label":"item","document":1153,"property":"definitions","inVs":[1294],"outV":3915}
{"id":3919,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nself: &mut Step\n```"}}}
{"id":3920,"type":"edge","label":"textDocument/hover","inV":3919,"outV":1239}
{"id":3921,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::step::player::game::update_this_step_move_number::self","unique":"scheme","kind":"export"}
{"id":3922,"type":"edge","label":"packageInformation","inV":1709,"outV":3921}
{"id":3923,"type":"edge","label":"moniker","inV":3921,"outV":1239}
{"id":3924,"type":"vertex","label":"definitionResult"}
{"id":3925,"type":"edge","label":"item","document":1153,"inVs":[1238],"outV":3924}
{"id":3926,"type":"edge","label":"textDocument/definition","inV":3924,"outV":1239}
{"id":3927,"type":"vertex","label":"referenceResult"}
{"id":3928,"type":"edge","label":"textDocument/references","inV":3927,"outV":1239}
{"id":3929,"type":"edge","label":"item","document":1153,"property":"definitions","inVs":[1238],"outV":3927}
{"id":3930,"type":"edge","label":"item","document":1153,"property":"references","inVs":[1276,1290],"outV":3927}
{"id":3931,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nthis_step_move_number: i32\n```"}}}
{"id":3932,"type":"edge","label":"textDocument/hover","inV":3931,"outV":1242}
{"id":3933,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::step::player::game::update_this_step_move_number::this_step_move_number","unique":"scheme","kind":"export"}
{"id":3934,"type":"edge","label":"packageInformation","inV":1709,"outV":3933}
{"id":3935,"type":"edge","label":"moniker","inV":3933,"outV":1242}
{"id":3936,"type":"vertex","label":"definitionResult"}
{"id":3937,"type":"edge","label":"item","document":1153,"inVs":[1241],"outV":3936}
{"id":3938,"type":"edge","label":"textDocument/definition","inV":3936,"outV":1242}
{"id":3939,"type":"vertex","label":"referenceResult"}
{"id":3940,"type":"edge","label":"textDocument/references","inV":3939,"outV":1242}
{"id":3941,"type":"edge","label":"item","document":1153,"property":"definitions","inVs":[1241],"outV":3939}
{"id":3942,"type":"edge","label":"item","document":1153,"property":"references","inVs":[1270,1284],"outV":3939}
{"id":3943,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nlast_step: Option<&Step>\n```"}}}
{"id":3944,"type":"edge","label":"textDocument/hover","inV":3943,"outV":1247}
{"id":3945,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::step::player::game::update_this_step_move_number::last_step","unique":"scheme","kind":"export"}
{"id":3946,"type":"edge","label":"packageInformation","inV":1709,"outV":3945}
{"id":3947,"type":"edge","label":"moniker","inV":3945,"outV":1247}
{"id":3948,"type":"vertex","label":"definitionResult"}
{"id":3949,"type":"edge","label":"item","document":1153,"inVs":[1246],"outV":3948}
{"id":3950,"type":"edge","label":"textDocument/definition","inV":3948,"outV":1247}
{"id":3951,"type":"vertex","label":"referenceResult"}
{"id":3952,"type":"edge","label":"textDocument/references","inV":3951,"outV":1247}
{"id":3953,"type":"edge","label":"item","document":1153,"property":"definitions","inVs":[1246],"outV":3951}
{"id":3954,"type":"edge","label":"item","document":1153,"property":"references","inVs":[1260],"outV":3951}
{"id":3955,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nlet last_step: &Step\n```"}}}
{"id":3956,"type":"edge","label":"textDocument/hover","inV":3955,"outV":1258}
{"id":3957,"type":"vertex","label":"definitionResult"}
{"id":3958,"type":"edge","label":"item","document":1153,"inVs":[1257],"outV":3957}
{"id":3959,"type":"edge","label":"textDocument/definition","inV":3957,"outV":1258}
{"id":3960,"type":"vertex","label":"referenceResult"}
{"id":3961,"type":"edge","label":"textDocument/references","inV":3960,"outV":1258}
{"id":3962,"type":"edge","label":"item","document":1153,"property":"definitions","inVs":[1257],"outV":3960}
{"id":3963,"type":"edge","label":"item","document":1153,"property":"references","inVs":[1266],"outV":3960}
{"id":3964,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nlet random_number: i32\n```"}}}
{"id":3965,"type":"edge","label":"textDocument/hover","inV":3964,"outV":1299}
{"id":3966,"type":"vertex","label":"definitionResult"}
{"id":3967,"type":"edge","label":"item","document":1153,"inVs":[1298],"outV":3966}
{"id":3968,"type":"edge","label":"textDocument/definition","inV":3966,"outV":1299}
{"id":3969,"type":"vertex","label":"referenceResult"}
{"id":3970,"type":"edge","label":"textDocument/references","inV":3969,"outV":1299}
{"id":3971,"type":"edge","label":"item","document":1153,"property":"definitions","inVs":[1298],"outV":3969}
{"id":3972,"type":"edge","label":"item","document":1153,"property":"references","inVs":[1309,1311],"outV":3969}
{"id":3973,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrand\n```\n\n```rust\npub fn thread_rng() -> ThreadRng\n```\n\n---\n\nRetrieve the lazily-initialized thread-local random number\ngenerator, seeded by the system. Intended to be used in method\nchaining style, e.g. `thread_rng().gen::<i32>()`.\n\nAfter generating a certain amount of randomness, the RNG will reseed itself\nfrom the operating system or, if the operating system RNG returns an error,\na seed based on the current system time.\n\nThe internal RNG used is platform and architecture dependent, even\nif the operating system random number generator is rigged to give\nthe same sequence always. If absolute consistency is required,\nexplicitly select an RNG, e.g. `IsaacRng` or `Isaac64Rng`."}}}
{"id":3974,"type":"edge","label":"textDocument/hover","inV":3973,"outV":1304}
{"id":3975,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rand::thread_rng","unique":"scheme","kind":"import"}
{"id":3976,"type":"edge","label":"packageInformation","inV":3814,"outV":3975}
{"id":3977,"type":"edge","label":"moniker","inV":3975,"outV":1304}
{"id":3978,"type":"vertex","label":"definitionResult"}
{"id":3979,"type":"vertex","label":"range","start":{"line":884,"character":7},"end":{"line":884,"character":17}}
{"id":3980,"type":"edge","label":"contains","inVs":[3979],"outV":3819}
{"id":3981,"type":"edge","label":"item","document":3819,"inVs":[3979],"outV":3978}
{"id":3982,"type":"edge","label":"textDocument/definition","inV":3978,"outV":1304}
{"id":3983,"type":"vertex","label":"referenceResult"}
{"id":3984,"type":"edge","label":"textDocument/references","inV":3983,"outV":1304}
{"id":3985,"type":"edge","label":"item","document":1153,"property":"references","inVs":[1303],"outV":3983}
{"id":3986,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrand::Rng\n```\n\n```rust\npub trait Rng\npub fn gen_range<T>(&mut self, low: T, high: T) -> T\nwhere\n    T: PartialOrd + SampleRange,\n    Self: Sized,\n```\n\n---\n\nGenerate a random value in the range \\[`low`, `high`).\n\nThis is a convenience wrapper around\n`distributions::Range`. If this function will be called\nrepeatedly with the same arguments, one should use `Range`, as\nthat will amortize the computations that allow for perfect\nuniformity, as they only happen on initialization.\n\n# Panics\n\nPanics if `low >= high`.\n\n# Example\n\n```rust\nuse rand::{thread_rng, Rng};\n\nlet mut rng = thread_rng();\nlet n: u32 = rng.gen_range(0, 10);\nprintln!(\"{}\", n);\nlet m: f64 = rng.gen_range(-40.0f64, 1.3e5f64);\nprintln!(\"{}\", m);\n```"}}}
{"id":3987,"type":"edge","label":"textDocument/hover","inV":3986,"outV":1307}
{"id":3988,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rand::Rng::gen_range","unique":"scheme","kind":"import"}
{"id":3989,"type":"edge","label":"packageInformation","inV":3814,"outV":3988}
{"id":3990,"type":"edge","label":"moniker","inV":3988,"outV":1307}
{"id":3991,"type":"vertex","label":"definitionResult"}
{"id":3992,"type":"vertex","label":"range","start":{"line":523,"character":7},"end":{"line":523,"character":16}}
{"id":3993,"type":"edge","label":"contains","inVs":[3992],"outV":3819}
{"id":3994,"type":"edge","label":"item","document":3819,"inVs":[3992],"outV":3991}
{"id":3995,"type":"edge","label":"textDocument/definition","inV":3991,"outV":1307}
{"id":3996,"type":"vertex","label":"referenceResult"}
{"id":3997,"type":"edge","label":"textDocument/references","inV":3996,"outV":1307}
{"id":3998,"type":"edge","label":"item","document":1153,"property":"references","inVs":[1306],"outV":3996}
{"id":3999,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nself: &Step\n```"}}}
{"id":4000,"type":"edge","label":"textDocument/hover","inV":3999,"outV":1316}
{"id":4001,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::step::player::game::get_step_number::self","unique":"scheme","kind":"export"}
{"id":4002,"type":"edge","label":"packageInformation","inV":1709,"outV":4001}
{"id":4003,"type":"edge","label":"moniker","inV":4001,"outV":1316}
{"id":4004,"type":"vertex","label":"definitionResult"}
{"id":4005,"type":"edge","label":"item","document":1153,"inVs":[1315],"outV":4004}
{"id":4006,"type":"edge","label":"textDocument/definition","inV":4004,"outV":1316}
{"id":4007,"type":"vertex","label":"referenceResult"}
{"id":4008,"type":"edge","label":"textDocument/references","inV":4007,"outV":1316}
{"id":4009,"type":"edge","label":"item","document":1153,"property":"definitions","inVs":[1315],"outV":4007}
{"id":4010,"type":"edge","label":"item","document":1153,"property":"references","inVs":[1320],"outV":4007}
{"id":4011,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::game::player::step::Step\n```\n\n```rust\npub fn get_is_moved(&self) -> i32\n```"}}}
{"id":4012,"type":"edge","label":"textDocument/hover","inV":4011,"outV":1325}
{"id":4013,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::step::player::game::Step::get_is_moved","unique":"scheme","kind":"export"}
{"id":4014,"type":"edge","label":"packageInformation","inV":1709,"outV":4013}
{"id":4015,"type":"edge","label":"moniker","inV":4013,"outV":1325}
{"id":4016,"type":"vertex","label":"definitionResult"}
{"id":4017,"type":"edge","label":"item","document":1153,"inVs":[1324],"outV":4016}
{"id":4018,"type":"edge","label":"textDocument/definition","inV":4016,"outV":1325}
{"id":4019,"type":"vertex","label":"referenceResult"}
{"id":4020,"type":"edge","label":"textDocument/references","inV":4019,"outV":1325}
{"id":4021,"type":"edge","label":"item","document":1153,"property":"definitions","inVs":[1324],"outV":4019}
{"id":4022,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nself: &Step\n```"}}}
{"id":4023,"type":"edge","label":"textDocument/hover","inV":4022,"outV":1328}
{"id":4024,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::step::player::game::get_is_moved::self","unique":"scheme","kind":"export"}
{"id":4025,"type":"edge","label":"packageInformation","inV":1709,"outV":4024}
{"id":4026,"type":"edge","label":"moniker","inV":4024,"outV":1328}
{"id":4027,"type":"vertex","label":"definitionResult"}
{"id":4028,"type":"edge","label":"item","document":1153,"inVs":[1327],"outV":4027}
{"id":4029,"type":"edge","label":"textDocument/definition","inV":4027,"outV":1328}
{"id":4030,"type":"vertex","label":"referenceResult"}
{"id":4031,"type":"edge","label":"textDocument/references","inV":4030,"outV":1328}
{"id":4032,"type":"edge","label":"item","document":1153,"property":"definitions","inVs":[1327],"outV":4030}
{"id":4033,"type":"edge","label":"item","document":1153,"property":"references","inVs":[1332],"outV":4030}
{"id":4034,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\ncore::fmt\n```\n\n```rust\npub trait Display\n```\n\n---\n\nFormat trait for an empty format, `{}`.\n\nImplementing this trait for a type will automatically implement the\n[`ToString`](https://doc.rust-lang.org/stable/std/string/trait.ToString.html) trait for the type, allowing the usage\nof the [`.to_string()`](https://doc.rust-lang.org/stable/std/string/trait.ToString.html#tymethod.to_string) method. Prefer implementing\nthe `Display` trait for a type, rather than [`ToString`](https://doc.rust-lang.org/stable/std/string/trait.ToString.html).\n\n`Display` is similar to [`Debug`](https://doc.rust-lang.org/stable/core/fmt/trait.Debug.html), but `Display` is for user-facing\noutput, and so cannot be derived.\n\nFor more information on formatters, see [the module-level documentation](https://doc.rust-lang.org/stable/std/fmt/index.html).\n\n# Internationalization\n\nBecause a type can only have one `Display` implementation, it is often preferable\nto only implement `Display` when there is a single most \"obvious\" way that\nvalues can be formatted as text. This could mean formatting according to the\n\"invariant\" culture and \"undefined\" locale, or it could mean that the type\ndisplay is designed for a specific culture/locale, such as developer logs.\n\nIf not all values have a justifiably canonical textual format or if you want\nto support alternative formats not covered by the standard set of possible\n[formatting traits](https://doc.rust-lang.org/stable/std/fmt/index.html#formatting-traits), the most flexible approach is display adapters: methods\nlike [`str::escape_default`](`str::escape_default`) or [`Path::display`](https://doc.rust-lang.org/stable/std/path/struct.Path.html#method.display) which create a wrapper\nimplementing `Display` to output the specific display format.\n\n# Examples\n\nImplementing `Display` on a type:\n\n```rust\nuse std::fmt;\n\nstruct Point {\n    x: i32,\n    y: i32,\n}\n\nimpl fmt::Display for Point {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        write!(f, \"({}, {})\", self.x, self.y)\n    }\n}\n\nlet origin = Point { x: 0, y: 0 };\n\nassert_eq!(format!(\"The origin is: {origin}\"), \"The origin is: (0, 0)\");\n```"}}}
{"id":4035,"type":"edge","label":"textDocument/hover","inV":4034,"outV":1339}
{"id":4036,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"core::fmt::Display","unique":"scheme","kind":"import"}
{"id":4037,"type":"edge","label":"packageInformation","inV":2072,"outV":4036}
{"id":4038,"type":"edge","label":"moniker","inV":4036,"outV":1339}
{"id":4039,"type":"vertex","label":"definitionResult"}
{"id":4040,"type":"vertex","label":"range","start":{"line":727,"character":10},"end":{"line":727,"character":17}}
{"id":4041,"type":"edge","label":"contains","inVs":[4040],"outV":2883}
{"id":4042,"type":"edge","label":"item","document":2883,"inVs":[4040],"outV":4039}
{"id":4043,"type":"edge","label":"textDocument/definition","inV":4039,"outV":1339}
{"id":4044,"type":"vertex","label":"referenceResult"}
{"id":4045,"type":"edge","label":"textDocument/references","inV":4044,"outV":1339}
{"id":4046,"type":"edge","label":"item","document":1153,"property":"references","inVs":[1338],"outV":4044}
{"id":4047,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::game::player::step::Step\n```\n\n```rust\nfn fmt(&self, _: &mut fmt::Formatter) -> fmt::Result\n```\n\n---\n\n# Examples\n\n```rust\nuse std::fmt;\n\nstruct Position {\n    longitude: f32,\n    latitude: f32,\n}\n\nimpl fmt::Display for Position {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        write!(f, \"({}, {})\", self.longitude, self.latitude)\n    }\n}\n\nassert_eq!(\n    \"(1.987, 2.983)\",\n    format!(\"{}\", Position { longitude: 1.987, latitude: 2.983, }),\n);\n```"}}}
{"id":4048,"type":"edge","label":"textDocument/hover","inV":4047,"outV":1344}
{"id":4049,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::step::player::game::Step::Display::fmt","unique":"scheme","kind":"export"}
{"id":4050,"type":"edge","label":"packageInformation","inV":1709,"outV":4049}
{"id":4051,"type":"edge","label":"moniker","inV":4049,"outV":1344}
{"id":4052,"type":"vertex","label":"definitionResult"}
{"id":4053,"type":"edge","label":"item","document":1153,"inVs":[1343],"outV":4052}
{"id":4054,"type":"edge","label":"textDocument/definition","inV":4052,"outV":1344}
{"id":4055,"type":"vertex","label":"referenceResult"}
{"id":4056,"type":"edge","label":"textDocument/references","inV":4055,"outV":1344}
{"id":4057,"type":"edge","label":"item","document":1153,"property":"definitions","inVs":[1343],"outV":4055}
{"id":4058,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nself: &Step\n```"}}}
{"id":4059,"type":"edge","label":"textDocument/hover","inV":4058,"outV":1347}
{"id":4060,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::step::player::game::fmt::self","unique":"scheme","kind":"export"}
{"id":4061,"type":"edge","label":"packageInformation","inV":1709,"outV":4060}
{"id":4062,"type":"edge","label":"moniker","inV":4060,"outV":1347}
{"id":4063,"type":"vertex","label":"definitionResult"}
{"id":4064,"type":"edge","label":"item","document":1153,"inVs":[1346],"outV":4063}
{"id":4065,"type":"edge","label":"textDocument/definition","inV":4063,"outV":1347}
{"id":4066,"type":"vertex","label":"referenceResult"}
{"id":4067,"type":"edge","label":"textDocument/references","inV":4066,"outV":1347}
{"id":4068,"type":"edge","label":"item","document":1153,"property":"definitions","inVs":[1346],"outV":4066}
{"id":4069,"type":"edge","label":"item","document":1153,"property":"references","inVs":[1359],"outV":4066}
{"id":4070,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\ncore::fmt\n```\n\n```rust\npub struct Formatter<'a> {\n    flags: u32,\n    fill: char,\n    align: Alignment,\n    width: Option<usize>,\n    precision: Option<usize>,\n    /* … */\n}\n```\n\n---\n\nConfiguration for formatting.\n\nA `Formatter` represents various options related to formatting. Users do not\nconstruct `Formatter`s directly; a mutable reference to one is passed to\nthe `fmt` method of all formatting traits, like [`Debug`](https://doc.rust-lang.org/stable/core/fmt/trait.Debug.html) and [`Display`](https://doc.rust-lang.org/stable/core/fmt/trait.Display.html).\n\nTo interact with a `Formatter`, you'll call various methods to change the\nvarious options related to formatting. For examples, please see the\ndocumentation of the methods defined on `Formatter` below."}}}
{"id":4071,"type":"edge","label":"textDocument/hover","inV":4070,"outV":1352}
{"id":4072,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"core::fmt::Formatter","unique":"scheme","kind":"import"}
{"id":4073,"type":"edge","label":"packageInformation","inV":2072,"outV":4072}
{"id":4074,"type":"edge","label":"moniker","inV":4072,"outV":1352}
{"id":4075,"type":"vertex","label":"definitionResult"}
{"id":4076,"type":"vertex","label":"range","start":{"line":265,"character":11},"end":{"line":265,"character":20}}
{"id":4077,"type":"edge","label":"contains","inVs":[4076],"outV":2883}
{"id":4078,"type":"edge","label":"item","document":2883,"inVs":[4076],"outV":4075}
{"id":4079,"type":"edge","label":"textDocument/definition","inV":4075,"outV":1352}
{"id":4080,"type":"vertex","label":"referenceResult"}
{"id":4081,"type":"edge","label":"textDocument/references","inV":4080,"outV":1352}
{"id":4082,"type":"edge","label":"item","document":1153,"property":"references","inVs":[1351],"outV":4080}
{"id":4083,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\ncore::fmt\n```\n\n```rust\npub type Result = result::Result<(), Error>\n```\n\n---\n\nThe type returned by formatter methods.\n\n# Examples\n\n```rust\nuse std::fmt;\n\n#[derive(Debug)]\nstruct Triangle {\n    a: f32,\n    b: f32,\n    c: f32\n}\n\nimpl fmt::Display for Triangle {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        write!(f, \"({}, {}, {})\", self.a, self.b, self.c)\n    }\n}\n\nlet pythagorean_triple = Triangle { a: 3.0, b: 4.0, c: 5.0 };\n\nassert_eq!(format!(\"{pythagorean_triple}\"), \"(3, 4, 5)\");\n```"}}}
{"id":4084,"type":"edge","label":"textDocument/hover","inV":4083,"outV":1357}
{"id":4085,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"core::fmt::Result","unique":"scheme","kind":"import"}
{"id":4086,"type":"edge","label":"packageInformation","inV":2072,"outV":4085}
{"id":4087,"type":"edge","label":"moniker","inV":4085,"outV":1357}
{"id":4088,"type":"vertex","label":"definitionResult"}
{"id":4089,"type":"vertex","label":"range","start":{"line":69,"character":9},"end":{"line":69,"character":15}}
{"id":4090,"type":"edge","label":"contains","inVs":[4089],"outV":2883}
{"id":4091,"type":"edge","label":"item","document":2883,"inVs":[4089],"outV":4088}
{"id":4092,"type":"edge","label":"textDocument/definition","inV":4088,"outV":1357}
{"id":4093,"type":"vertex","label":"referenceResult"}
{"id":4094,"type":"edge","label":"textDocument/references","inV":4093,"outV":1357}
{"id":4095,"type":"edge","label":"item","document":1153,"property":"references","inVs":[1356],"outV":4093}
{"id":4096,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nstd::macros\n```\n\n```rust\nmacro_rules! print\n```\n\n---\n\nPrints to the standard output.\n\nEquivalent to the [`println`] macro except that a newline is not printed at\nthe end of the message.\n\nNote that stdout is frequently line-buffered by default so it may be\nnecessary to use [`io::stdout().flush`](https://doc.rust-lang.org/stable/std/io/trait.Write.html) to ensure the output is emitted\nimmediately.\n\nThe `print!` macro will lock the standard output on each call. If you call\n`print!` within a hot loop, this behavior may be the bottleneck of the loop.\nTo avoid this, lock stdout with [`io::stdout().lock`](https://doc.rust-lang.org/stable/std/io/stdio/struct.Stdout.html):\n\n```rust\nuse std::io::{stdout, Write};\n\nlet mut lock = stdout().lock();\nwrite!(lock, \"hello world\").unwrap();\n```\n\nUse `print!` only for the primary output of your program. Use\n[`eprint`] instead to print error and progress messages.\n\nSee [the formatting documentation in `std::fmt`](https://doc.rust-lang.org/stable/std/std/fmt/index.html)\nfor details of the macro argument syntax.\n\n# Panics\n\nPanics if writing to `io::stdout()` fails.\n\nWriting to non-blocking stdout can cause an error, which will lead\nthis macro to panic.\n\n# Examples\n\n```rust\nuse std::io::{self, Write};\n\nprint!(\"this \");\nprint!(\"will \");\nprint!(\"be \");\nprint!(\"on \");\nprint!(\"the \");\nprint!(\"same \");\nprint!(\"line \");\n\nio::stdout().flush().unwrap();\n\nprint!(\"this string has a newline, why not choose println! instead?\\n\");\n\nio::stdout().flush().unwrap();\n```"}}}
{"id":4097,"type":"edge","label":"textDocument/hover","inV":4096,"outV":1364}
{"id":4098,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"std::macros::print","unique":"scheme","kind":"import"}
{"id":4099,"type":"edge","label":"packageInformation","inV":1804,"outV":4098}
{"id":4100,"type":"edge","label":"moniker","inV":4098,"outV":1364}
{"id":4101,"type":"vertex","label":"definitionResult"}
{"id":4102,"type":"vertex","label":"range","start":{"line":81,"character":13},"end":{"line":81,"character":18}}
{"id":4103,"type":"edge","label":"contains","inVs":[4102],"outV":1809}
{"id":4104,"type":"edge","label":"item","document":1809,"inVs":[4102],"outV":4101}
{"id":4105,"type":"edge","label":"textDocument/definition","inV":4101,"outV":1364}
{"id":4106,"type":"vertex","label":"referenceResult"}
{"id":4107,"type":"edge","label":"textDocument/references","inV":4106,"outV":1364}
{"id":4108,"type":"edge","label":"item","document":1153,"property":"references","inVs":[1363],"outV":4106}
{"id":4109,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::test\n```\n\n```rust\nmod step\n```"}}}
{"id":4110,"type":"edge","label":"textDocument/hover","inV":4109,"outV":1375}
{"id":4111,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::test::step","unique":"scheme","kind":"export"}
{"id":4112,"type":"edge","label":"packageInformation","inV":1709,"outV":4111}
{"id":4113,"type":"edge","label":"moniker","inV":4111,"outV":1375}
{"id":4114,"type":"vertex","label":"definitionResult"}
{"id":4115,"type":"edge","label":"item","document":1369,"inVs":[1374],"outV":4114}
{"id":4116,"type":"edge","label":"textDocument/definition","inV":4114,"outV":1375}
{"id":4117,"type":"vertex","label":"referenceResult"}
{"id":4118,"type":"edge","label":"textDocument/references","inV":4117,"outV":1375}
{"id":4119,"type":"edge","label":"item","document":1369,"property":"definitions","inVs":[1374],"outV":4117}
{"id":4120,"type":"edge","label":"item","document":1369,"property":"references","inVs":[1390],"outV":4117}
{"id":4121,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nstd\n```\n\n```rust\nmod io\n```\n\n---\n\nTraits, helpers, and type definitions for core I/O functionality.\n\nThe `std::io` module contains a number of common things you'll need\nwhen doing input and output. The most core part of this module is\nthe [`Read`](https://doc.rust-lang.org/stable/std/io/trait.Read.html) and [`Write`](https://doc.rust-lang.org/stable/std/io/trait.Write.html) traits, which provide the\nmost general interface for reading and writing input and output.\n\n## Read and Write\n\nBecause they are traits, [`Read`](https://doc.rust-lang.org/stable/std/io/trait.Read.html) and [`Write`](https://doc.rust-lang.org/stable/std/io/trait.Write.html) are implemented by a number\nof other types, and you can implement them for your types too. As such,\nyou'll see a few different types of I/O throughout the documentation in\nthis module: [`File`]s, [`TcpStream`]s, and sometimes even [`Vec<T>`](https://doc.rust-lang.org/stable/alloc/vec/struct.Vec.html)s. For\nexample, [`Read`](https://doc.rust-lang.org/stable/std/io/trait.Read.html) adds a [`read`](https://doc.rust-lang.org/stable/std/io/trait.Read.html) method, which we can use on\n[`File`]s:\n\n```rust\nuse std::io;\nuse std::io::prelude::*;\nuse std::fs::File;\n\nfn main() -> io::Result<()> {\n    let mut f = File::open(\"foo.txt\")?;\n    let mut buffer = [0; 10];\n\n    // read up to 10 bytes\n    let n = f.read(&mut buffer)?;\n\n    println!(\"The bytes: {:?}\", &buffer[..n]);\n    Ok(())\n}\n```\n\n[`Read`](https://doc.rust-lang.org/stable/std/io/trait.Read.html) and [`Write`](https://doc.rust-lang.org/stable/std/io/trait.Write.html) are so important, implementors of the two traits have a\nnickname: readers and writers. So you'll sometimes see 'a reader' instead\nof 'a type that implements the [`Read`](https://doc.rust-lang.org/stable/std/io/trait.Read.html) trait'. Much easier!\n\n## Seek and BufRead\n\nBeyond that, there are two important traits that are provided: [`Seek`](https://doc.rust-lang.org/stable/std/io/trait.Seek.html)\nand [`BufRead`](https://doc.rust-lang.org/stable/std/io/trait.BufRead.html). Both of these build on top of a reader to control\nhow the reading happens. [`Seek`](https://doc.rust-lang.org/stable/std/io/trait.Seek.html) lets you control where the next byte is\ncoming from:\n\n```rust\nuse std::io;\nuse std::io::prelude::*;\nuse std::io::SeekFrom;\nuse std::fs::File;\n\nfn main() -> io::Result<()> {\n    let mut f = File::open(\"foo.txt\")?;\n    let mut buffer = [0; 10];\n\n    // skip to the last 10 bytes of the file\n    f.seek(SeekFrom::End(-10))?;\n\n    // read up to 10 bytes\n    let n = f.read(&mut buffer)?;\n\n    println!(\"The bytes: {:?}\", &buffer[..n]);\n    Ok(())\n}\n```\n\n[`BufRead`](https://doc.rust-lang.org/stable/std/io/trait.BufRead.html) uses an internal buffer to provide a number of other ways to read, but\nto show it off, we'll need to talk about buffers in general. Keep reading!\n\n## BufReader and BufWriter\n\nByte-based interfaces are unwieldy and can be inefficient, as we'd need to be\nmaking near-constant calls to the operating system. To help with this,\n`std::io` comes with two structs, [`BufReader`](https://doc.rust-lang.org/stable/std/io/buffered/bufreader/struct.BufReader.html) and [`BufWriter`](https://doc.rust-lang.org/stable/std/io/buffered/bufwriter/struct.BufWriter.html), which wrap\nreaders and writers. The wrapper uses a buffer, reducing the number of\ncalls and providing nicer methods for accessing exactly what you want.\n\nFor example, [`BufReader`](https://doc.rust-lang.org/stable/std/io/buffered/bufreader/struct.BufReader.html) works with the [`BufRead`](https://doc.rust-lang.org/stable/std/io/trait.BufRead.html) trait to add extra\nmethods to any reader:\n\n```rust\nuse std::io;\nuse std::io::prelude::*;\nuse std::io::BufReader;\nuse std::fs::File;\n\nfn main() -> io::Result<()> {\n    let f = File::open(\"foo.txt\")?;\n    let mut reader = BufReader::new(f);\n    let mut buffer = String::new();\n\n    // read a line into buffer\n    reader.read_line(&mut buffer)?;\n\n    println!(\"{buffer}\");\n    Ok(())\n}\n```\n\n[`BufWriter`](https://doc.rust-lang.org/stable/std/io/buffered/bufwriter/struct.BufWriter.html) doesn't add any new ways of writing; it just buffers every call\nto [`write`](https://doc.rust-lang.org/stable/std/io/trait.Write.html):\n\n```rust\nuse std::io;\nuse std::io::prelude::*;\nuse std::io::BufWriter;\nuse std::fs::File;\n\nfn main() -> io::Result<()> {\n    let f = File::create(\"foo.txt\")?;\n    {\n        let mut writer = BufWriter::new(f);\n\n        // write a byte to the buffer\n        writer.write(&[42])?;\n\n    } // the buffer is flushed once writer goes out of scope\n\n    Ok(())\n}\n```\n\n## Standard input and output\n\nA very common source of input is standard input:\n\n```rust\nuse std::io;\n\nfn main() -> io::Result<()> {\n    let mut input = String::new();\n\n    io::stdin().read_line(&mut input)?;\n\n    println!(\"You typed: {}\", input.trim());\n    Ok(())\n}\n```\n\nNote that you cannot use the [`?` operator](https://doc.rust-lang.org/stable/book/appendix-02-operators.html) in functions that do not return\na [`Result<T, E>`](https://doc.rust-lang.org/stable/core/result/enum.Result.html). Instead, you can call [`.unwrap`]\nor `match` on the return value to catch any possible errors:\n\n```rust\nuse std::io;\n\nlet mut input = String::new();\n\nio::stdin().read_line(&mut input).unwrap();\n```\n\nAnd a very common source of output is standard output:\n\n```rust\nuse std::io;\nuse std::io::prelude::*;\n\nfn main() -> io::Result<()> {\n    io::stdout().write(&[42])?;\n    Ok(())\n}\n```\n\nOf course, using [`io::stdout`] directly is less common than something like\n[`println`](https://doc.rust-lang.org/stable/std/macros/macro.println.html).\n\n## Iterator types\n\nA large number of the structures provided by `std::io` are for various\nways of iterating over I/O. For example, [`Lines`](https://doc.rust-lang.org/stable/std/io/struct.Lines.html) is used to split over\nlines:\n\n```rust\nuse std::io;\nuse std::io::prelude::*;\nuse std::io::BufReader;\nuse std::fs::File;\n\nfn main() -> io::Result<()> {\n    let f = File::open(\"foo.txt\")?;\n    let reader = BufReader::new(f);\n\n    for line in reader.lines() {\n        println!(\"{}\", line?);\n    }\n    Ok(())\n}\n```\n\n## Functions\n\nThere are a number of [functions](https://doc.rust-lang.org/stable/std/io/index.html#functions-1) that offer access to various\nfeatures. For example, we can use three of these functions to copy everything\nfrom standard input to standard output:\n\n```rust\nuse std::io;\n\nfn main() -> io::Result<()> {\n    io::copy(&mut io::stdin(), &mut io::stdout())?;\n    Ok(())\n}\n```\n\n## io::Result\n\nLast, but certainly not least, is [`io::Result`]. This type is used\nas the return type of many `std::io` functions that can cause an error, and\ncan be returned from your own functions as well. Many of the examples in this\nmodule use the [`?` operator](https://doc.rust-lang.org/stable/book/appendix-02-operators.html):\n\n```rust\nuse std::io;\n\nfn read_input() -> io::Result<()> {\n    let mut input = String::new();\n\n    io::stdin().read_line(&mut input)?;\n\n    println!(\"You typed: {}\", input.trim());\n\n    Ok(())\n}\n```\n\nThe return type of `read_input()`, [`io::Result<()>`](https://doc.rust-lang.org/stable/std/io/error/type.Result.html), is a very\ncommon type for functions which don't have a 'real' return value, but do want to\nreturn errors if they happen. In this case, the only purpose of this function is\nto read the line and print it, so we use `()`.\n\n## Platform-specific behavior\n\nMany I/O functions throughout the standard library are documented to indicate\nwhat various library or syscalls they are delegated to. This is done to help\napplications both understand what's happening under the hood as well as investigate\nany possibly unclear semantics. Note, however, that this is informative, not a binding\ncontract. The implementation of many of these functions are subject to change over\ntime and may call fewer or more syscalls/library functions.\n\n## I/O Safety\n\nRust follows an I/O safety discipline that is comparable to its memory safety discipline. This\nmeans that file descriptors can be *exclusively owned*. (Here, \"file descriptor\" is meant to\nsubsume similar concepts that exist across a wide range of operating systems even if they might\nuse a different name, such as \"handle\".) An exclusively owned file descriptor is one that no\nother code is allowed to access in any way, but the owner is allowed to access and even close\nit any time. A type that owns its file descriptor should usually close it in its `drop`\nfunction. Types like [`File`] own their file descriptor. Similarly, file descriptors\ncan be *borrowed*, granting the temporary right to perform operations on this file descriptor.\nThis indicates that the file descriptor will not be closed for the lifetime of the borrow, but\nit does *not* imply any right to close this file descriptor, since it will likely be owned by\nsomeone else.\n\nThe platform-specific parts of the Rust standard library expose types that reflect these\nconcepts, see [`os::unix`](https://doc.rust-lang.org/stable/std/os/unix/io/index.html) and [`os::windows`](https://doc.rust-lang.org/stable/std/os/windows/io/index.html).\n\nTo uphold I/O safety, it is crucial that no code acts on file descriptors it does not own or\nborrow, and no code closes file descriptors it does not own. In other words, a safe function\nthat takes a regular integer, treats it as a file descriptor, and acts on it, is *unsound*.\n\nNot upholding I/O safety and acting on a file descriptor without proof of ownership can lead to\nmisbehavior and even Undefined Behavior in code that relies on ownership of its file\ndescriptors: a closed file descriptor could be re-allocated, so the original owner of that file\ndescriptor is now working on the wrong file. Some code might even rely on fully encapsulating\nits file descriptors with no operations being performed by any other part of the program.\n\nNote that exclusive ownership of a file descriptor does *not* imply exclusive ownership of the\nunderlying kernel object that the file descriptor references (also called \"open file description\" on\nsome operating systems). File descriptors basically work like [`Arc`]: when you receive an owned\nfile descriptor, you cannot know whether there are any other file descriptors that reference the\nsame kernel object. However, when you create a new kernel object, you know that you are holding\nthe only reference to it. Just be careful not to lend it to anyone, since they can obtain a\nclone and then you can no longer know what the reference count is! In that sense, [`OwnedFd`](https://doc.rust-lang.org/stable/std/os/fd/struct.OwnedFd.html) is\nlike `Arc` and [`BorrowedFd<'a>`](https://doc.rust-lang.org/stable/std/os/fd/struct.BorrowedFd.html) is like `&'a Arc` (and similar for the Windows types). In\nparticular, given a `BorrowedFd<'a>`, you are not allowed to close the file descriptor -- just\nlike how, given a `&'a Arc`, you are not allowed to decrement the reference count and\npotentially free the underlying object. There is no equivalent to `Box` for file descriptors in\nthe standard library (that would be a type that guarantees that the reference count is `1`),\nhowever, it would be possible for a crate to define a type with those semantics."}}}
{"id":4122,"type":"edge","label":"textDocument/hover","inV":4121,"outV":1380}
{"id":4123,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"std::io","unique":"scheme","kind":"import"}
{"id":4124,"type":"edge","label":"packageInformation","inV":1804,"outV":4123}
{"id":4125,"type":"edge","label":"moniker","inV":4123,"outV":1380}
{"id":4126,"type":"vertex","label":"definitionResult"}
{"id":4127,"type":"vertex","label":"document","uri":"file:///opt/homebrew/Cellar/rust/1.81.0/lib/rustlib/src/rust/library/std/src/io/mod.rs","languageId":"rust"}
{"id":4128,"type":"vertex","label":"range","start":{"line":0,"character":0},"end":{"line":3187,"character":0}}
{"id":4129,"type":"edge","label":"contains","inVs":[4128],"outV":4127}
{"id":4130,"type":"edge","label":"item","document":4127,"inVs":[4128],"outV":4126}
{"id":4131,"type":"edge","label":"textDocument/definition","inV":4126,"outV":1380}
{"id":4132,"type":"vertex","label":"referenceResult"}
{"id":4133,"type":"edge","label":"textDocument/references","inV":4132,"outV":1380}
{"id":4134,"type":"edge","label":"item","document":1369,"property":"references","inVs":[1379,1408,1426,1440,1461],"outV":4132}
{"id":4135,"type":"edge","label":"item","document":1590,"property":"references","inVs":[1595,1608,1651],"outV":4132}
{"id":4136,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::test\n```\n\n```rust\ntrait Stdin\n```"}}}
{"id":4137,"type":"edge","label":"textDocument/hover","inV":4136,"outV":1395}
{"id":4138,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::test::Stdin","unique":"scheme","kind":"export"}
{"id":4139,"type":"edge","label":"packageInformation","inV":1709,"outV":4138}
{"id":4140,"type":"edge","label":"moniker","inV":4138,"outV":1395}
{"id":4141,"type":"vertex","label":"definitionResult"}
{"id":4142,"type":"edge","label":"item","document":1369,"inVs":[1394],"outV":4141}
{"id":4143,"type":"edge","label":"textDocument/definition","inV":4141,"outV":1395}
{"id":4144,"type":"vertex","label":"referenceResult"}
{"id":4145,"type":"edge","label":"textDocument/references","inV":4144,"outV":1395}
{"id":4146,"type":"edge","label":"item","document":1369,"property":"definitions","inVs":[1394],"outV":4144}
{"id":4147,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::test::MockStdin_Stdin\n```\n\n```rust\nmock_input_integer: Expectations\n```"}}}
{"id":4148,"type":"edge","label":"textDocument/hover","inV":4147,"outV":1398}
{"id":4149,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::test::MockStdin_Stdin::mock_input_integer","unique":"scheme","kind":"export"}
{"id":4150,"type":"edge","label":"packageInformation","inV":1709,"outV":4149}
{"id":4151,"type":"edge","label":"moniker","inV":4149,"outV":1398}
{"id":4152,"type":"vertex","label":"definitionResult"}
{"id":4153,"type":"edge","label":"item","document":1369,"inVs":[1397],"outV":4152}
{"id":4154,"type":"edge","label":"textDocument/definition","inV":4152,"outV":1398}
{"id":4155,"type":"vertex","label":"referenceResult"}
{"id":4156,"type":"edge","label":"textDocument/references","inV":4155,"outV":1398}
{"id":4157,"type":"edge","label":"item","document":1369,"property":"definitions","inVs":[1397],"outV":4155}
{"id":4158,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nself: &mut MockStdin\n```"}}}
{"id":4159,"type":"edge","label":"textDocument/hover","inV":4158,"outV":1401}
{"id":4160,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::test::mock_input_integer::self","unique":"scheme","kind":"export"}
{"id":4161,"type":"edge","label":"packageInformation","inV":1709,"outV":4160}
{"id":4162,"type":"edge","label":"moniker","inV":4160,"outV":1401}
{"id":4163,"type":"vertex","label":"definitionResult"}
{"id":4164,"type":"edge","label":"item","document":1369,"inVs":[1400],"outV":4163}
{"id":4165,"type":"edge","label":"textDocument/definition","inV":4163,"outV":1401}
{"id":4166,"type":"vertex","label":"referenceResult"}
{"id":4167,"type":"edge","label":"textDocument/references","inV":4166,"outV":1401}
{"id":4168,"type":"edge","label":"item","document":1369,"property":"definitions","inVs":[1400],"outV":4166}
{"id":4169,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nbuf: &mut String\n```"}}}
{"id":4170,"type":"edge","label":"textDocument/hover","inV":4169,"outV":1404}
{"id":4171,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::test::mock_input_integer::buf","unique":"scheme","kind":"export"}
{"id":4172,"type":"edge","label":"packageInformation","inV":1709,"outV":4171}
{"id":4173,"type":"edge","label":"moniker","inV":4171,"outV":1404}
{"id":4174,"type":"vertex","label":"definitionResult"}
{"id":4175,"type":"edge","label":"item","document":1369,"inVs":[1403],"outV":4174}
{"id":4176,"type":"edge","label":"textDocument/definition","inV":4174,"outV":1404}
{"id":4177,"type":"vertex","label":"referenceResult"}
{"id":4178,"type":"edge","label":"textDocument/references","inV":4177,"outV":1404}
{"id":4179,"type":"edge","label":"item","document":1369,"property":"definitions","inVs":[1403],"outV":4177}
{"id":4180,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nstd::io::error\n```\n\n```rust\npub type Result<T> = result::Result<T, Error>\n```\n\n---\n\nA specialized [`Result`] type for I/O operations.\n\nThis type is broadly used across [`std::io`] for any operation which may\nproduce an error.\n\nThis typedef is generally used to avoid writing out [`io::Error`] directly and\nis otherwise a direct mapping to [`Result`].\n\nWhile usual Rust style is to import types directly, aliases of [`Result`]\noften are not, to make it easier to distinguish between them. [`Result`] is\ngenerally assumed to be [`std::result::Result`](https://doc.rust-lang.org/stable/core/result/enum.Result.html), and so users of this alias\nwill generally use `io::Result` instead of shadowing the [prelude]'s import\nof [`std::result::Result`](https://doc.rust-lang.org/stable/core/result/enum.Result.html).\n\n# Examples\n\nA convenience function that bubbles an `io::Result` to its caller:\n\n```rust\nuse std::io;\n\nfn get_string() -> io::Result<String> {\n    let mut buffer = String::new();\n\n    io::stdin().read_line(&mut buffer)?;\n\n    Ok(buffer)\n}\n```"}}}
{"id":4181,"type":"edge","label":"textDocument/hover","inV":4180,"outV":1411}
{"id":4182,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"std::error::io::Result","unique":"scheme","kind":"import"}
{"id":4183,"type":"edge","label":"packageInformation","inV":1804,"outV":4182}
{"id":4184,"type":"edge","label":"moniker","inV":4182,"outV":1411}
{"id":4185,"type":"vertex","label":"definitionResult"}
{"id":4186,"type":"vertex","label":"document","uri":"file:///opt/homebrew/Cellar/rust/1.81.0/lib/rustlib/src/rust/library/std/src/io/error.rs","languageId":"rust"}
{"id":4187,"type":"vertex","label":"range","start":{"line":53,"character":9},"end":{"line":53,"character":15}}
{"id":4188,"type":"edge","label":"contains","inVs":[4187],"outV":4186}
{"id":4189,"type":"edge","label":"item","document":4186,"inVs":[4187],"outV":4185}
{"id":4190,"type":"edge","label":"textDocument/definition","inV":4185,"outV":1411}
{"id":4191,"type":"vertex","label":"referenceResult"}
{"id":4192,"type":"edge","label":"textDocument/references","inV":4191,"outV":1411}
{"id":4193,"type":"edge","label":"item","document":1369,"property":"references","inVs":[1410,1428,1442,1463],"outV":4191}
{"id":4194,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::test::MockStdin_Stdin\n```\n\n```rust\nmock_input_names: Expectations\n```"}}}
{"id":4195,"type":"edge","label":"textDocument/hover","inV":4194,"outV":1416}
{"id":4196,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::test::MockStdin_Stdin::mock_input_names","unique":"scheme","kind":"export"}
{"id":4197,"type":"edge","label":"packageInformation","inV":1709,"outV":4196}
{"id":4198,"type":"edge","label":"moniker","inV":4196,"outV":1416}
{"id":4199,"type":"vertex","label":"definitionResult"}
{"id":4200,"type":"edge","label":"item","document":1369,"inVs":[1415],"outV":4199}
{"id":4201,"type":"edge","label":"textDocument/definition","inV":4199,"outV":1416}
{"id":4202,"type":"vertex","label":"referenceResult"}
{"id":4203,"type":"edge","label":"textDocument/references","inV":4202,"outV":1416}
{"id":4204,"type":"edge","label":"item","document":1369,"property":"definitions","inVs":[1415],"outV":4202}
{"id":4205,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nself: &mut MockStdin\n```"}}}
{"id":4206,"type":"edge","label":"textDocument/hover","inV":4205,"outV":1419}
{"id":4207,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::test::mock_input_names::self","unique":"scheme","kind":"export"}
{"id":4208,"type":"edge","label":"packageInformation","inV":1709,"outV":4207}
{"id":4209,"type":"edge","label":"moniker","inV":4207,"outV":1419}
{"id":4210,"type":"vertex","label":"definitionResult"}
{"id":4211,"type":"edge","label":"item","document":1369,"inVs":[1418],"outV":4210}
{"id":4212,"type":"edge","label":"textDocument/definition","inV":4210,"outV":1419}
{"id":4213,"type":"vertex","label":"referenceResult"}
{"id":4214,"type":"edge","label":"textDocument/references","inV":4213,"outV":1419}
{"id":4215,"type":"edge","label":"item","document":1369,"property":"definitions","inVs":[1418],"outV":4213}
{"id":4216,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nbuf: &mut String\n```"}}}
{"id":4217,"type":"edge","label":"textDocument/hover","inV":4216,"outV":1422}
{"id":4218,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::test::mock_input_names::buf","unique":"scheme","kind":"export"}
{"id":4219,"type":"edge","label":"packageInformation","inV":1709,"outV":4218}
{"id":4220,"type":"edge","label":"moniker","inV":4218,"outV":1422}
{"id":4221,"type":"vertex","label":"definitionResult"}
{"id":4222,"type":"edge","label":"item","document":1369,"inVs":[1421],"outV":4221}
{"id":4223,"type":"edge","label":"textDocument/definition","inV":4221,"outV":1422}
{"id":4224,"type":"vertex","label":"referenceResult"}
{"id":4225,"type":"edge","label":"textDocument/references","inV":4224,"outV":1422}
{"id":4226,"type":"edge","label":"item","document":1369,"property":"definitions","inVs":[1421],"outV":4224}
{"id":4227,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::test\n```\n\n```rust\nfn mock_input_integer(buf: &mut String) -> io::Result<usize>\n```"}}}
{"id":4228,"type":"edge","label":"textDocument/hover","inV":4227,"outV":1433}
{"id":4229,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::test::mock_input_integer","unique":"scheme","kind":"export"}
{"id":4230,"type":"edge","label":"packageInformation","inV":1709,"outV":4229}
{"id":4231,"type":"edge","label":"moniker","inV":4229,"outV":1433}
{"id":4232,"type":"vertex","label":"definitionResult"}
{"id":4233,"type":"edge","label":"item","document":1369,"inVs":[1432],"outV":4232}
{"id":4234,"type":"edge","label":"textDocument/definition","inV":4232,"outV":1433}
{"id":4235,"type":"vertex","label":"referenceResult"}
{"id":4236,"type":"edge","label":"textDocument/references","inV":4235,"outV":1433}
{"id":4237,"type":"edge","label":"item","document":1369,"property":"definitions","inVs":[1432],"outV":4235}
{"id":4238,"type":"edge","label":"item","document":1369,"property":"references","inVs":[1498],"outV":4235}
{"id":4239,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nbuf: &mut String\n```"}}}
{"id":4240,"type":"edge","label":"textDocument/hover","inV":4239,"outV":1436}
{"id":4241,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::test::mock_input_integer::buf","unique":"scheme","kind":"export"}
{"id":4242,"type":"edge","label":"packageInformation","inV":1709,"outV":4241}
{"id":4243,"type":"edge","label":"moniker","inV":4241,"outV":1436}
{"id":4244,"type":"vertex","label":"definitionResult"}
{"id":4245,"type":"edge","label":"item","document":1369,"inVs":[1435],"outV":4244}
{"id":4246,"type":"edge","label":"textDocument/definition","inV":4244,"outV":1436}
{"id":4247,"type":"vertex","label":"referenceResult"}
{"id":4248,"type":"edge","label":"textDocument/references","inV":4247,"outV":1436}
{"id":4249,"type":"edge","label":"item","document":1369,"property":"definitions","inVs":[1435],"outV":4247}
{"id":4250,"type":"edge","label":"item","document":1369,"property":"references","inVs":[1446],"outV":4247}
{"id":4251,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nalloc::string::String\n```\n\n```rust\npub fn push_str(&mut self, string: &str)\n```\n\n---\n\nAppends a given string slice onto the end of this `String`.\n\n# Examples\n\n```rust\nlet mut s = String::from(\"foo\");\n\ns.push_str(\"bar\");\n\nassert_eq!(\"foobar\", s);\n```"}}}
{"id":4252,"type":"edge","label":"textDocument/hover","inV":4251,"outV":1449}
{"id":4253,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"alloc::string::String::push_str","unique":"scheme","kind":"import"}
{"id":4254,"type":"edge","label":"packageInformation","inV":1870,"outV":4253}
{"id":4255,"type":"edge","label":"moniker","inV":4253,"outV":1449}
{"id":4256,"type":"vertex","label":"definitionResult"}
{"id":4257,"type":"vertex","label":"range","start":{"line":1065,"character":11},"end":{"line":1065,"character":19}}
{"id":4258,"type":"edge","label":"contains","inVs":[4257],"outV":1893}
{"id":4259,"type":"edge","label":"item","document":1893,"inVs":[4257],"outV":4256}
{"id":4260,"type":"edge","label":"textDocument/definition","inV":4256,"outV":1449}
{"id":4261,"type":"vertex","label":"referenceResult"}
{"id":4262,"type":"edge","label":"textDocument/references","inV":4261,"outV":1449}
{"id":4263,"type":"edge","label":"item","document":1369,"property":"references","inVs":[1448,1469],"outV":4261}
{"id":4264,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::test\n```\n\n```rust\nfn mock_input_names(buf: &mut String) -> io::Result<usize>\n```"}}}
{"id":4265,"type":"edge","label":"textDocument/hover","inV":4264,"outV":1454}
{"id":4266,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::test::mock_input_names","unique":"scheme","kind":"export"}
{"id":4267,"type":"edge","label":"packageInformation","inV":1709,"outV":4266}
{"id":4268,"type":"edge","label":"moniker","inV":4266,"outV":1454}
{"id":4269,"type":"vertex","label":"definitionResult"}
{"id":4270,"type":"edge","label":"item","document":1369,"inVs":[1453],"outV":4269}
{"id":4271,"type":"edge","label":"textDocument/definition","inV":4269,"outV":1454}
{"id":4272,"type":"vertex","label":"referenceResult"}
{"id":4273,"type":"edge","label":"textDocument/references","inV":4272,"outV":1454}
{"id":4274,"type":"edge","label":"item","document":1369,"property":"definitions","inVs":[1453],"outV":4272}
{"id":4275,"type":"edge","label":"item","document":1369,"property":"references","inVs":[1545],"outV":4272}
{"id":4276,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nbuf: &mut String\n```"}}}
{"id":4277,"type":"edge","label":"textDocument/hover","inV":4276,"outV":1457}
{"id":4278,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::test::mock_input_names::buf","unique":"scheme","kind":"export"}
{"id":4279,"type":"edge","label":"packageInformation","inV":1709,"outV":4278}
{"id":4280,"type":"edge","label":"moniker","inV":4278,"outV":1457}
{"id":4281,"type":"vertex","label":"definitionResult"}
{"id":4282,"type":"edge","label":"item","document":1369,"inVs":[1456],"outV":4281}
{"id":4283,"type":"edge","label":"textDocument/definition","inV":4281,"outV":1457}
{"id":4284,"type":"vertex","label":"referenceResult"}
{"id":4285,"type":"edge","label":"textDocument/references","inV":4284,"outV":1457}
{"id":4286,"type":"edge","label":"item","document":1369,"property":"definitions","inVs":[1456],"outV":4284}
{"id":4287,"type":"edge","label":"item","document":1369,"property":"references","inVs":[1467],"outV":4284}
{"id":4288,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::test\n```\n\n```rust\nfn test_mock_input_integer()\n```"}}}
{"id":4289,"type":"edge","label":"textDocument/hover","inV":4288,"outV":1476}
{"id":4290,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::test::test_mock_input_integer","unique":"scheme","kind":"export"}
{"id":4291,"type":"edge","label":"packageInformation","inV":1709,"outV":4290}
{"id":4292,"type":"edge","label":"moniker","inV":4290,"outV":1476}
{"id":4293,"type":"vertex","label":"definitionResult"}
{"id":4294,"type":"edge","label":"item","document":1369,"inVs":[1475],"outV":4293}
{"id":4295,"type":"edge","label":"textDocument/definition","inV":4293,"outV":1476}
{"id":4296,"type":"vertex","label":"referenceResult"}
{"id":4297,"type":"edge","label":"textDocument/references","inV":4296,"outV":1476}
{"id":4298,"type":"edge","label":"item","document":1369,"property":"definitions","inVs":[1475],"outV":4296}
{"id":4299,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nlet mut mock: MockStdin\n```"}}}
{"id":4300,"type":"edge","label":"textDocument/hover","inV":4299,"outV":1479}
{"id":4301,"type":"vertex","label":"definitionResult"}
{"id":4302,"type":"edge","label":"item","document":1369,"inVs":[1478],"outV":4301}
{"id":4303,"type":"edge","label":"textDocument/definition","inV":4301,"outV":1479}
{"id":4304,"type":"vertex","label":"referenceResult"}
{"id":4305,"type":"edge","label":"textDocument/references","inV":4304,"outV":1479}
{"id":4306,"type":"edge","label":"item","document":1369,"property":"definitions","inVs":[1478],"outV":4304}
{"id":4307,"type":"edge","label":"item","document":1369,"property":"references","inVs":[1487,1508],"outV":4304}
{"id":4308,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::test\n```\n\n```rust\nstruct MockStdin {\n    Stdin_expectations: MockStdin_Stdin,\n}\n```"}}}
{"id":4309,"type":"edge","label":"textDocument/hover","inV":4308,"outV":1482}
{"id":4310,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::test::MockStdin","unique":"scheme","kind":"export"}
{"id":4311,"type":"edge","label":"packageInformation","inV":1709,"outV":4310}
{"id":4312,"type":"edge","label":"moniker","inV":4310,"outV":1482}
{"id":4313,"type":"vertex","label":"definitionResult"}
{"id":4314,"type":"edge","label":"item","document":1369,"inVs":[1394],"outV":4313}
{"id":4315,"type":"edge","label":"textDocument/definition","inV":4313,"outV":1482}
{"id":4316,"type":"vertex","label":"referenceResult"}
{"id":4317,"type":"edge","label":"textDocument/references","inV":4316,"outV":1482}
{"id":4318,"type":"edge","label":"item","document":1369,"property":"references","inVs":[1481,1530],"outV":4316}
{"id":4319,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::test::MockStdin\n```\n\n```rust\npub fn new() -> Self\n```\n\n---\n\nCreate a new mock object with no expectations.\n\nThis method will not be generated if the real struct\nalready has a `new` method.  However, it *will* be\ngenerated if the struct implements a trait with a `new`\nmethod.  The trait's `new` method can still be called\nlike `<MockX as TraitY>::new`"}}}
{"id":4320,"type":"edge","label":"textDocument/hover","inV":4319,"outV":1485}
{"id":4321,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::test::MockStdin::new","unique":"scheme","kind":"export"}
{"id":4322,"type":"edge","label":"packageInformation","inV":1709,"outV":4321}
{"id":4323,"type":"edge","label":"moniker","inV":4321,"outV":1485}
{"id":4324,"type":"vertex","label":"definitionResult"}
{"id":4325,"type":"vertex","label":"range","start":{"line":5,"character":0},"end":{"line":5,"character":11}}
{"id":4326,"type":"edge","label":"contains","inVs":[4325],"outV":1369}
{"id":4327,"type":"edge","label":"item","document":1369,"inVs":[4325],"outV":4324}
{"id":4328,"type":"edge","label":"textDocument/definition","inV":4324,"outV":1485}
{"id":4329,"type":"vertex","label":"referenceResult"}
{"id":4330,"type":"edge","label":"textDocument/references","inV":4329,"outV":1485}
{"id":4331,"type":"edge","label":"item","document":1369,"property":"references","inVs":[1484,1532],"outV":4329}
{"id":4332,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::test::MockStdin\n```\n\n```rust\nfn expect_mock_input_integer(&mut self) -> &mut __mock_MockStdin_Stdin::__mock_input_integer::Expectation\n```\n\n---\n\nCreate an [`Expectation`](https://docs.rs/rust_racingcar/0.1.0/rust_racingcar/test/__mock_MockStdin_Stdin/__mock_input_integer/struct.Expectation.html) for mocking the `mock_input_integer` method"}}}
{"id":4333,"type":"edge","label":"textDocument/hover","inV":4332,"outV":1490}
{"id":4334,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::test::MockStdin::expect_mock_input_integer","unique":"scheme","kind":"export"}
{"id":4335,"type":"edge","label":"packageInformation","inV":1709,"outV":4334}
{"id":4336,"type":"edge","label":"moniker","inV":4334,"outV":1490}
{"id":4337,"type":"vertex","label":"definitionResult"}
{"id":4338,"type":"edge","label":"item","document":1369,"inVs":[1397],"outV":4337}
{"id":4339,"type":"edge","label":"textDocument/definition","inV":4337,"outV":1490}
{"id":4340,"type":"vertex","label":"referenceResult"}
{"id":4341,"type":"edge","label":"textDocument/references","inV":4340,"outV":1490}
{"id":4342,"type":"edge","label":"item","document":1369,"property":"references","inVs":[1489],"outV":4340}
{"id":4343,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::test::__mock_MockStdin_Stdin::__mock_input_integer::Expectation\n```\n\n```rust\npub(in ...) fn times<MockallR>(&mut self, __mockall_r: MockallR) -> &mut Self\nwhere\n    MockallR: Into<::mockall::TimesRange>,\n```\n\n---\n\nRestrict the number of times that that this method may be called.\n\nThe argument may be:\n\n* A fixed number: `.times(4)`\n* Various types of range:\n  * `.times(5..10)`\n  * `.times(..10)`\n  * `.times(5..)`\n  * `.times(5..=10)`\n  * `.times(..=10)`\n* The wildcard: `.times(..)`"}}}
{"id":4344,"type":"edge","label":"textDocument/hover","inV":4343,"outV":1493}
{"id":4345,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::__mock_input_integer::__mock_MockStdin_Stdin::test::Expectation::times","unique":"scheme","kind":"export"}
{"id":4346,"type":"edge","label":"packageInformation","inV":1709,"outV":4345}
{"id":4347,"type":"edge","label":"moniker","inV":4345,"outV":1493}
{"id":4348,"type":"vertex","label":"definitionResult"}
{"id":4349,"type":"vertex","label":"range","start":{"line":5,"character":0},"end":{"line":5,"character":11}}
{"id":4350,"type":"edge","label":"contains","inVs":[4349],"outV":1369}
{"id":4351,"type":"edge","label":"item","document":1369,"inVs":[4349],"outV":4348}
{"id":4352,"type":"edge","label":"textDocument/definition","inV":4348,"outV":1493}
{"id":4353,"type":"vertex","label":"referenceResult"}
{"id":4354,"type":"edge","label":"textDocument/references","inV":4353,"outV":1493}
{"id":4355,"type":"edge","label":"item","document":1369,"property":"references","inVs":[1492],"outV":4353}
{"id":4356,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::test::__mock_MockStdin_Stdin::__mock_input_integer::Expectation\n```\n\n```rust\npub(in ...) fn returning<MockallF>(&mut self, __mockall_f: MockallF) -> &mut Self\nwhere\n    MockallF: FnMut(&mut String) -> io::Result<usize> + Send + 'static,\n```\n\n---\n\nSupply a closure that will provide the return value for this\n`Expectation`.  The method's arguments are passed to the\nclosure by value."}}}
{"id":4357,"type":"edge","label":"textDocument/hover","inV":4356,"outV":1496}
{"id":4358,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::__mock_input_integer::__mock_MockStdin_Stdin::test::Expectation::returning","unique":"scheme","kind":"export"}
{"id":4359,"type":"edge","label":"packageInformation","inV":1709,"outV":4358}
{"id":4360,"type":"edge","label":"moniker","inV":4358,"outV":1496}
{"id":4361,"type":"vertex","label":"definitionResult"}
{"id":4362,"type":"vertex","label":"range","start":{"line":5,"character":0},"end":{"line":5,"character":11}}
{"id":4363,"type":"edge","label":"contains","inVs":[4362],"outV":1369}
{"id":4364,"type":"edge","label":"item","document":1369,"inVs":[4362],"outV":4361}
{"id":4365,"type":"edge","label":"textDocument/definition","inV":4361,"outV":1496}
{"id":4366,"type":"vertex","label":"referenceResult"}
{"id":4367,"type":"edge","label":"textDocument/references","inV":4366,"outV":1496}
{"id":4368,"type":"edge","label":"item","document":1369,"property":"references","inVs":[1495],"outV":4366}
{"id":4369,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nlet mut buf: String\n```"}}}
{"id":4370,"type":"edge","label":"textDocument/hover","inV":4369,"outV":1501}
{"id":4371,"type":"vertex","label":"definitionResult"}
{"id":4372,"type":"edge","label":"item","document":1369,"inVs":[1500],"outV":4371}
{"id":4373,"type":"edge","label":"textDocument/definition","inV":4371,"outV":1501}
{"id":4374,"type":"vertex","label":"referenceResult"}
{"id":4375,"type":"edge","label":"textDocument/references","inV":4374,"outV":1501}
{"id":4376,"type":"edge","label":"item","document":1369,"property":"definitions","inVs":[1500],"outV":4374}
{"id":4377,"type":"edge","label":"item","document":1369,"property":"references","inVs":[1513,1520],"outV":4374}
{"id":4378,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nalloc::string::String\n```\n\n```rust\npub const fn new() -> String\n```\n\n---\n\nCreates a new empty `String`.\n\nGiven that the `String` is empty, this will not allocate any initial\nbuffer. While that means that this initial operation is very\ninexpensive, it may cause excessive allocation later when you add\ndata. If you have an idea of how much data the `String` will hold,\nconsider the [`with_capacity`] method to prevent excessive\nre-allocation.\n\n# Examples\n\n```rust\nlet s = String::new();\n```"}}}
{"id":4379,"type":"edge","label":"textDocument/hover","inV":4378,"outV":1506}
{"id":4380,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"alloc::string::String::new","unique":"scheme","kind":"import"}
{"id":4381,"type":"edge","label":"packageInformation","inV":1870,"outV":4380}
{"id":4382,"type":"edge","label":"moniker","inV":4380,"outV":1506}
{"id":4383,"type":"vertex","label":"definitionResult"}
{"id":4384,"type":"vertex","label":"range","start":{"line":447,"character":17},"end":{"line":447,"character":20}}
{"id":4385,"type":"edge","label":"contains","inVs":[4384],"outV":1893}
{"id":4386,"type":"edge","label":"item","document":1893,"inVs":[4384],"outV":4383}
{"id":4387,"type":"edge","label":"textDocument/definition","inV":4383,"outV":1506}
{"id":4388,"type":"vertex","label":"referenceResult"}
{"id":4389,"type":"edge","label":"textDocument/references","inV":4388,"outV":1506}
{"id":4390,"type":"edge","label":"item","document":1369,"property":"references","inVs":[1505,1552],"outV":4388}
{"id":4391,"type":"edge","label":"item","document":1590,"property":"references","inVs":[1606,1649],"outV":4388}
{"id":4392,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::test::MockStdin\n```\n\n```rust\nfn mock_input_integer(&mut self, buf: &mut String) -> io::Result<usize>\n```"}}}
{"id":4393,"type":"edge","label":"textDocument/hover","inV":4392,"outV":1511}
{"id":4394,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::test::MockStdin::Stdin::mock_input_integer","unique":"scheme","kind":"export"}
{"id":4395,"type":"edge","label":"packageInformation","inV":1709,"outV":4394}
{"id":4396,"type":"edge","label":"moniker","inV":4394,"outV":1511}
{"id":4397,"type":"vertex","label":"definitionResult"}
{"id":4398,"type":"edge","label":"item","document":1369,"inVs":[1397],"outV":4397}
{"id":4399,"type":"edge","label":"textDocument/definition","inV":4397,"outV":1511}
{"id":4400,"type":"vertex","label":"referenceResult"}
{"id":4401,"type":"edge","label":"textDocument/references","inV":4400,"outV":1511}
{"id":4402,"type":"edge","label":"item","document":1369,"property":"references","inVs":[1510],"outV":4400}
{"id":4403,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\ncore::result::Result\n```\n\n```rust\nimpl<T, E> Result<T, E>\npub fn unwrap(self) -> T\nwhere\n    E: fmt::Debug,\n```\n\n---\n\nReturns the contained [`Ok`](https://doc.rust-lang.org/stable/core/result/enum.Result.html) value, consuming the `self` value.\n\nBecause this function may panic, its use is generally discouraged.\nInstead, prefer to use pattern matching and handle the [`Err`](https://doc.rust-lang.org/stable/core/result/enum.Result.html)\ncase explicitly, or call [`unwrap_or`], [`unwrap_or_else`], or\n[`unwrap_or_default`].\n\n# Panics\n\nPanics if the value is an [`Err`](https://doc.rust-lang.org/stable/core/result/enum.Result.html), with a panic message provided by the\n[`Err`](https://doc.rust-lang.org/stable/core/result/enum.Result.html)'s value.\n\n# Examples\n\nBasic usage:\n\n```rust\nlet x: Result<u32, &str> = Ok(2);\nassert_eq!(x.unwrap(), 2);\n```\n\n```rust\nlet x: Result<u32, &str> = Err(\"emergency failure\");\nx.unwrap(); // panics with `emergency failure`\n```"}}}
{"id":4404,"type":"edge","label":"textDocument/hover","inV":4403,"outV":1516}
{"id":4405,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"core::result::Result::unwrap","unique":"scheme","kind":"import"}
{"id":4406,"type":"edge","label":"packageInformation","inV":2072,"outV":4405}
{"id":4407,"type":"edge","label":"moniker","inV":4405,"outV":1516}
{"id":4408,"type":"vertex","label":"definitionResult"}
{"id":4409,"type":"vertex","label":"range","start":{"line":1095,"character":11},"end":{"line":1095,"character":17}}
{"id":4410,"type":"edge","label":"contains","inVs":[4409],"outV":2182}
{"id":4411,"type":"edge","label":"item","document":2182,"inVs":[4409],"outV":4408}
{"id":4412,"type":"edge","label":"textDocument/definition","inV":4408,"outV":1516}
{"id":4413,"type":"vertex","label":"referenceResult"}
{"id":4414,"type":"edge","label":"textDocument/references","inV":4413,"outV":1516}
{"id":4415,"type":"edge","label":"item","document":1369,"property":"references","inVs":[1515,1561],"outV":4413}
{"id":4416,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::test\n```\n\n```rust\nfn test_mock_input_names()\n```"}}}
{"id":4417,"type":"edge","label":"textDocument/hover","inV":4416,"outV":1525}
{"id":4418,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::test::test_mock_input_names","unique":"scheme","kind":"export"}
{"id":4419,"type":"edge","label":"packageInformation","inV":1709,"outV":4418}
{"id":4420,"type":"edge","label":"moniker","inV":4418,"outV":1525}
{"id":4421,"type":"vertex","label":"definitionResult"}
{"id":4422,"type":"edge","label":"item","document":1369,"inVs":[1524],"outV":4421}
{"id":4423,"type":"edge","label":"textDocument/definition","inV":4421,"outV":1525}
{"id":4424,"type":"vertex","label":"referenceResult"}
{"id":4425,"type":"edge","label":"textDocument/references","inV":4424,"outV":1525}
{"id":4426,"type":"edge","label":"item","document":1369,"property":"definitions","inVs":[1524],"outV":4424}
{"id":4427,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nlet mut mock: MockStdin\n```"}}}
{"id":4428,"type":"edge","label":"textDocument/hover","inV":4427,"outV":1528}
{"id":4429,"type":"vertex","label":"definitionResult"}
{"id":4430,"type":"edge","label":"item","document":1369,"inVs":[1527],"outV":4429}
{"id":4431,"type":"edge","label":"textDocument/definition","inV":4429,"outV":1528}
{"id":4432,"type":"vertex","label":"referenceResult"}
{"id":4433,"type":"edge","label":"textDocument/references","inV":4432,"outV":1528}
{"id":4434,"type":"edge","label":"item","document":1369,"property":"definitions","inVs":[1527],"outV":4432}
{"id":4435,"type":"edge","label":"item","document":1369,"property":"references","inVs":[1534,1554],"outV":4432}
{"id":4436,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::test::MockStdin\n```\n\n```rust\nfn expect_mock_input_names(&mut self) -> &mut __mock_MockStdin_Stdin::__mock_input_names::Expectation\n```\n\n---\n\nCreate an [`Expectation`](https://docs.rs/rust_racingcar/0.1.0/rust_racingcar/test/__mock_MockStdin_Stdin/__mock_input_names/struct.Expectation.html) for mocking the `mock_input_names` method"}}}
{"id":4437,"type":"edge","label":"textDocument/hover","inV":4436,"outV":1537}
{"id":4438,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::test::MockStdin::expect_mock_input_names","unique":"scheme","kind":"export"}
{"id":4439,"type":"edge","label":"packageInformation","inV":1709,"outV":4438}
{"id":4440,"type":"edge","label":"moniker","inV":4438,"outV":1537}
{"id":4441,"type":"vertex","label":"definitionResult"}
{"id":4442,"type":"edge","label":"item","document":1369,"inVs":[1415],"outV":4441}
{"id":4443,"type":"edge","label":"textDocument/definition","inV":4441,"outV":1537}
{"id":4444,"type":"vertex","label":"referenceResult"}
{"id":4445,"type":"edge","label":"textDocument/references","inV":4444,"outV":1537}
{"id":4446,"type":"edge","label":"item","document":1369,"property":"references","inVs":[1536],"outV":4444}
{"id":4447,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::test::__mock_MockStdin_Stdin::__mock_input_names::Expectation\n```\n\n```rust\npub(in ...) fn times<MockallR>(&mut self, __mockall_r: MockallR) -> &mut Self\nwhere\n    MockallR: Into<::mockall::TimesRange>,\n```\n\n---\n\nRestrict the number of times that that this method may be called.\n\nThe argument may be:\n\n* A fixed number: `.times(4)`\n* Various types of range:\n  * `.times(5..10)`\n  * `.times(..10)`\n  * `.times(5..)`\n  * `.times(5..=10)`\n  * `.times(..=10)`\n* The wildcard: `.times(..)`"}}}
{"id":4448,"type":"edge","label":"textDocument/hover","inV":4447,"outV":1540}
{"id":4449,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::__mock_input_names::__mock_MockStdin_Stdin::test::Expectation::times","unique":"scheme","kind":"export"}
{"id":4450,"type":"edge","label":"packageInformation","inV":1709,"outV":4449}
{"id":4451,"type":"edge","label":"moniker","inV":4449,"outV":1540}
{"id":4452,"type":"vertex","label":"definitionResult"}
{"id":4453,"type":"vertex","label":"range","start":{"line":5,"character":0},"end":{"line":5,"character":11}}
{"id":4454,"type":"edge","label":"contains","inVs":[4453],"outV":1369}
{"id":4455,"type":"edge","label":"item","document":1369,"inVs":[4453],"outV":4452}
{"id":4456,"type":"edge","label":"textDocument/definition","inV":4452,"outV":1540}
{"id":4457,"type":"vertex","label":"referenceResult"}
{"id":4458,"type":"edge","label":"textDocument/references","inV":4457,"outV":1540}
{"id":4459,"type":"edge","label":"item","document":1369,"property":"references","inVs":[1539],"outV":4457}
{"id":4460,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::test::__mock_MockStdin_Stdin::__mock_input_names::Expectation\n```\n\n```rust\npub(in ...) fn returning<MockallF>(&mut self, __mockall_f: MockallF) -> &mut Self\nwhere\n    MockallF: FnMut(&mut String) -> io::Result<usize> + Send + 'static,\n```\n\n---\n\nSupply a closure that will provide the return value for this\n`Expectation`.  The method's arguments are passed to the\nclosure by value."}}}
{"id":4461,"type":"edge","label":"textDocument/hover","inV":4460,"outV":1543}
{"id":4462,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::__mock_input_names::__mock_MockStdin_Stdin::test::Expectation::returning","unique":"scheme","kind":"export"}
{"id":4463,"type":"edge","label":"packageInformation","inV":1709,"outV":4462}
{"id":4464,"type":"edge","label":"moniker","inV":4462,"outV":1543}
{"id":4465,"type":"vertex","label":"definitionResult"}
{"id":4466,"type":"vertex","label":"range","start":{"line":5,"character":0},"end":{"line":5,"character":11}}
{"id":4467,"type":"edge","label":"contains","inVs":[4466],"outV":1369}
{"id":4468,"type":"edge","label":"item","document":1369,"inVs":[4466],"outV":4465}
{"id":4469,"type":"edge","label":"textDocument/definition","inV":4465,"outV":1543}
{"id":4470,"type":"vertex","label":"referenceResult"}
{"id":4471,"type":"edge","label":"textDocument/references","inV":4470,"outV":1543}
{"id":4472,"type":"edge","label":"item","document":1369,"property":"references","inVs":[1542],"outV":4470}
{"id":4473,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nlet mut buf: String\n```"}}}
{"id":4474,"type":"edge","label":"textDocument/hover","inV":4473,"outV":1548}
{"id":4475,"type":"vertex","label":"definitionResult"}
{"id":4476,"type":"edge","label":"item","document":1369,"inVs":[1547],"outV":4475}
{"id":4477,"type":"edge","label":"textDocument/definition","inV":4475,"outV":1548}
{"id":4478,"type":"vertex","label":"referenceResult"}
{"id":4479,"type":"edge","label":"textDocument/references","inV":4478,"outV":1548}
{"id":4480,"type":"edge","label":"item","document":1369,"property":"definitions","inVs":[1547],"outV":4478}
{"id":4481,"type":"edge","label":"item","document":1369,"property":"references","inVs":[1559,1565],"outV":4478}
{"id":4482,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::test::MockStdin\n```\n\n```rust\nfn mock_input_names(&mut self, buf: &mut String) -> io::Result<usize>\n```"}}}
{"id":4483,"type":"edge","label":"textDocument/hover","inV":4482,"outV":1557}
{"id":4484,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::test::MockStdin::Stdin::mock_input_names","unique":"scheme","kind":"export"}
{"id":4485,"type":"edge","label":"packageInformation","inV":1709,"outV":4484}
{"id":4486,"type":"edge","label":"moniker","inV":4484,"outV":1557}
{"id":4487,"type":"vertex","label":"definitionResult"}
{"id":4488,"type":"edge","label":"item","document":1369,"inVs":[1415],"outV":4487}
{"id":4489,"type":"edge","label":"textDocument/definition","inV":4487,"outV":1557}
{"id":4490,"type":"vertex","label":"referenceResult"}
{"id":4491,"type":"edge","label":"textDocument/references","inV":4490,"outV":1557}
{"id":4492,"type":"edge","label":"item","document":1369,"property":"references","inVs":[1556],"outV":4490}
{"id":4493,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nrust_racingcar::test\n```\n\n```rust\nfn test_step_number()\n```"}}}
{"id":4494,"type":"edge","label":"textDocument/hover","inV":4493,"outV":1570}
{"id":4495,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::test::test_step_number","unique":"scheme","kind":"export"}
{"id":4496,"type":"edge","label":"packageInformation","inV":1709,"outV":4495}
{"id":4497,"type":"edge","label":"moniker","inV":4495,"outV":1570}
{"id":4498,"type":"vertex","label":"definitionResult"}
{"id":4499,"type":"edge","label":"item","document":1369,"inVs":[1569],"outV":4498}
{"id":4500,"type":"edge","label":"textDocument/definition","inV":4498,"outV":1570}
{"id":4501,"type":"vertex","label":"referenceResult"}
{"id":4502,"type":"edge","label":"textDocument/references","inV":4501,"outV":1570}
{"id":4503,"type":"edge","label":"item","document":1369,"property":"definitions","inVs":[1569],"outV":4501}
{"id":4504,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nlet last_step: Option<&{unknown}>\n```"}}}
{"id":4505,"type":"edge","label":"textDocument/hover","inV":4504,"outV":1573}
{"id":4506,"type":"vertex","label":"definitionResult"}
{"id":4507,"type":"edge","label":"item","document":1369,"inVs":[1572],"outV":4506}
{"id":4508,"type":"edge","label":"textDocument/definition","inV":4506,"outV":1573}
{"id":4509,"type":"vertex","label":"referenceResult"}
{"id":4510,"type":"edge","label":"textDocument/references","inV":4509,"outV":1573}
{"id":4511,"type":"edge","label":"item","document":1369,"property":"definitions","inVs":[1572],"outV":4509}
{"id":4512,"type":"edge","label":"item","document":1369,"property":"references","inVs":[1583],"outV":4509}
{"id":4513,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\ncore::option::Option\n```\n\n```rust\nNone\n```\n\n---\n\nNo value."}}}
{"id":4514,"type":"edge","label":"textDocument/hover","inV":4513,"outV":1578}
{"id":4515,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"core::option::None","unique":"scheme","kind":"import"}
{"id":4516,"type":"edge","label":"packageInformation","inV":2072,"outV":4515}
{"id":4517,"type":"edge","label":"moniker","inV":4515,"outV":1578}
{"id":4518,"type":"vertex","label":"definitionResult"}
{"id":4519,"type":"vertex","label":"range","start":{"line":577,"character":4},"end":{"line":577,"character":8}}
{"id":4520,"type":"edge","label":"contains","inVs":[4519],"outV":2442}
{"id":4521,"type":"edge","label":"item","document":2442,"inVs":[4519],"outV":4518}
{"id":4522,"type":"edge","label":"textDocument/definition","inV":4518,"outV":1578}
{"id":4523,"type":"vertex","label":"referenceResult"}
{"id":4524,"type":"edge","label":"textDocument/references","inV":4523,"outV":1578}
{"id":4525,"type":"edge","label":"item","document":1369,"property":"references","inVs":[1577],"outV":4523}
{"id":4526,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nlet step: {unknown}\n```"}}}
{"id":4527,"type":"edge","label":"textDocument/hover","inV":4526,"outV":1581}
{"id":4528,"type":"vertex","label":"definitionResult"}
{"id":4529,"type":"edge","label":"item","document":1369,"inVs":[1580],"outV":4528}
{"id":4530,"type":"edge","label":"textDocument/definition","inV":4528,"outV":1581}
{"id":4531,"type":"vertex","label":"referenceResult"}
{"id":4532,"type":"edge","label":"textDocument/references","inV":4531,"outV":1581}
{"id":4533,"type":"edge","label":"item","document":1369,"property":"definitions","inVs":[1580],"outV":4531}
{"id":4534,"type":"edge","label":"item","document":1369,"property":"references","inVs":[1587],"outV":4531}
{"id":4535,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nlet mut input_line: String\n```"}}}
{"id":4536,"type":"edge","label":"textDocument/hover","inV":4535,"outV":1602}
{"id":4537,"type":"vertex","label":"definitionResult"}
{"id":4538,"type":"edge","label":"item","document":1590,"inVs":[1601],"outV":4537}
{"id":4539,"type":"edge","label":"textDocument/definition","inV":4537,"outV":1602}
{"id":4540,"type":"vertex","label":"referenceResult"}
{"id":4541,"type":"edge","label":"textDocument/references","inV":4540,"outV":1602}
{"id":4542,"type":"edge","label":"item","document":1590,"property":"definitions","inVs":[1601],"outV":4540}
{"id":4543,"type":"edge","label":"item","document":1590,"property":"references","inVs":[1616,1626],"outV":4540}
{"id":4544,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nstd::io::stdio\n```\n\n```rust\npub fn stdin() -> Stdin\n```\n\n---\n\nConstructs a new handle to the standard input of the current process.\n\nEach handle returned is a reference to a shared global buffer whose access\nis synchronized via a mutex. If you need more explicit control over\nlocking, see the [`Stdin::lock`](https://doc.rust-lang.org/stable/std/io/stdio/struct.Stdin.html) method.\n\n### Note: Windows Portability Considerations\n\nWhen operating in a console, the Windows implementation of this stream does not support\nnon-UTF-8 byte sequences. Attempting to read bytes that are not valid UTF-8 will return\nan error.\n\nIn a process with a detached console, such as one using\n`#![windows_subsystem = \"windows\"]`, or in a child process spawned from such a process,\nthe contained handle will be null. In such cases, the standard library's `Read` and\n`Write` will do nothing and silently succeed. All other I/O operations, via the\nstandard library or via raw Windows API calls, will fail.\n\n# Examples\n\nUsing implicit synchronization:\n\n```rust\nuse std::io;\n\nfn main() -> io::Result<()> {\n    let mut buffer = String::new();\n    io::stdin().read_line(&mut buffer)?;\n    Ok(())\n}\n```\n\nUsing explicit synchronization:\n\n```rust\nuse std::io::{self, BufRead};\n\nfn main() -> io::Result<()> {\n    let mut buffer = String::new();\n    let stdin = io::stdin();\n    let mut handle = stdin.lock();\n\n    handle.read_line(&mut buffer)?;\n    Ok(())\n}\n```"}}}
{"id":4545,"type":"edge","label":"textDocument/hover","inV":4544,"outV":1611}
{"id":4546,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"std::stdio::io::stdin","unique":"scheme","kind":"import"}
{"id":4547,"type":"edge","label":"packageInformation","inV":1804,"outV":4546}
{"id":4548,"type":"edge","label":"moniker","inV":4546,"outV":1611}
{"id":4549,"type":"vertex","label":"definitionResult"}
{"id":4550,"type":"vertex","label":"document","uri":"file:///opt/homebrew/Cellar/rust/1.81.0/lib/rustlib/src/rust/library/std/src/io/stdio.rs","languageId":"rust"}
{"id":4551,"type":"vertex","label":"range","start":{"line":332,"character":7},"end":{"line":332,"character":12}}
{"id":4552,"type":"edge","label":"contains","inVs":[4551],"outV":4550}
{"id":4553,"type":"edge","label":"item","document":4550,"inVs":[4551],"outV":4549}
{"id":4554,"type":"edge","label":"textDocument/definition","inV":4549,"outV":1611}
{"id":4555,"type":"vertex","label":"referenceResult"}
{"id":4556,"type":"edge","label":"textDocument/references","inV":4555,"outV":1611}
{"id":4557,"type":"edge","label":"item","document":1590,"property":"references","inVs":[1610,1653],"outV":4555}
{"id":4558,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nstd::io::stdio::Stdin\n```\n\n```rust\npub fn read_line(&self, buf: &mut String) -> io::Result<usize>\n```\n\n---\n\nLocks this handle and reads a line of input, appending it to the specified buffer.\n\nFor detailed semantics of this method, see the documentation on\n[`BufRead::read_line`](https://doc.rust-lang.org/stable/std/io/trait.BufRead.html).\n\n# Examples\n\n```rust\nuse std::io;\n\nlet mut input = String::new();\nmatch io::stdin().read_line(&mut input) {\n    Ok(n) => {\n        println!(\"{n} bytes read\");\n        println!(\"{input}\");\n    }\n    Err(error) => println!(\"error: {error}\"),\n}\n```\n\nYou can run the example one of two ways:\n\n* Pipe some text to it, e.g., `printf foo | path/to/executable`\n* Give it text interactively by running the executable directly,\n  in which case it will wait for the Enter key to be pressed before\n  continuing"}}}
{"id":4559,"type":"edge","label":"textDocument/hover","inV":4558,"outV":1614}
{"id":4560,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"std::stdio::io::Stdin::read_line","unique":"scheme","kind":"import"}
{"id":4561,"type":"edge","label":"packageInformation","inV":1804,"outV":4560}
{"id":4562,"type":"edge","label":"moniker","inV":4560,"outV":1614}
{"id":4563,"type":"vertex","label":"definitionResult"}
{"id":4564,"type":"vertex","label":"range","start":{"line":397,"character":11},"end":{"line":397,"character":20}}
{"id":4565,"type":"edge","label":"contains","inVs":[4564],"outV":4550}
{"id":4566,"type":"edge","label":"item","document":4550,"inVs":[4564],"outV":4563}
{"id":4567,"type":"edge","label":"textDocument/definition","inV":4563,"outV":1614}
{"id":4568,"type":"vertex","label":"referenceResult"}
{"id":4569,"type":"edge","label":"textDocument/references","inV":4568,"outV":1614}
{"id":4570,"type":"edge","label":"item","document":1590,"property":"references","inVs":[1613,1655],"outV":4568}
{"id":4571,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\ncore::result::Result\n```\n\n```rust\nimpl<T, E> Result<T, E>\npub fn expect(self, msg: &str) -> T\nwhere\n    E: fmt::Debug,\n```\n\n---\n\nReturns the contained [`Ok`](https://doc.rust-lang.org/stable/core/result/enum.Result.html) value, consuming the `self` value.\n\nBecause this function may panic, its use is generally discouraged.\nInstead, prefer to use pattern matching and handle the [`Err`](https://doc.rust-lang.org/stable/core/result/enum.Result.html)\ncase explicitly, or call [`unwrap_or`], [`unwrap_or_else`], or\n[`unwrap_or_default`].\n\n# Panics\n\nPanics if the value is an [`Err`](https://doc.rust-lang.org/stable/core/result/enum.Result.html), with a panic message including the\npassed message, and the content of the [`Err`](https://doc.rust-lang.org/stable/core/result/enum.Result.html).\n\n# Examples\n\n```rust\nlet x: Result<u32, &str> = Err(\"emergency failure\");\nx.expect(\"Testing expect\"); // panics with `Testing expect: emergency failure`\n```\n\n# Recommended Message Style\n\nWe recommend that `expect` messages are used to describe the reason you\n*expect* the `Result` should be `Ok`.\n\n```rust\nlet path = std::env::var(\"IMPORTANT_PATH\")\n    .expect(\"env variable `IMPORTANT_PATH` should be set by `wrapper_script.sh`\");\n```\n\n**Hint**: If you're having trouble remembering how to phrase expect\nerror messages remember to focus on the word \"should\" as in \"env\nvariable should be set by blah\" or \"the given binary should be available\nand executable by the current user\".\n\nFor more detail on expect message styles and the reasoning behind our recommendation please\nrefer to the section on [\"Common Message\nStyles\"](https://doc.rust-lang.org/stable/std/error/index.html#common-message-styles) in the\n[`std::error`](https://doc.rust-lang.org/stable/std/error/index.html) module docs."}}}
{"id":4572,"type":"edge","label":"textDocument/hover","inV":4571,"outV":1619}
{"id":4573,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"core::result::Result::expect","unique":"scheme","kind":"import"}
{"id":4574,"type":"edge","label":"packageInformation","inV":2072,"outV":4573}
{"id":4575,"type":"edge","label":"moniker","inV":4573,"outV":1619}
{"id":4576,"type":"vertex","label":"definitionResult"}
{"id":4577,"type":"vertex","label":"range","start":{"line":1052,"character":11},"end":{"line":1052,"character":17}}
{"id":4578,"type":"edge","label":"contains","inVs":[4577],"outV":2182}
{"id":4579,"type":"edge","label":"item","document":2182,"inVs":[4577],"outV":4576}
{"id":4580,"type":"edge","label":"textDocument/definition","inV":4576,"outV":1619}
{"id":4581,"type":"vertex","label":"referenceResult"}
{"id":4582,"type":"edge","label":"textDocument/references","inV":4581,"outV":1619}
{"id":4583,"type":"edge","label":"item","document":1590,"property":"references","inVs":[1618,1634,1659,1672],"outV":4581}
{"id":4584,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nlet x: i32\n```"}}}
{"id":4585,"type":"edge","label":"textDocument/hover","inV":4584,"outV":1622}
{"id":4586,"type":"vertex","label":"definitionResult"}
{"id":4587,"type":"edge","label":"item","document":1590,"inVs":[1621],"outV":4586}
{"id":4588,"type":"edge","label":"textDocument/definition","inV":4586,"outV":1622}
{"id":4589,"type":"vertex","label":"referenceResult"}
{"id":4590,"type":"edge","label":"textDocument/references","inV":4589,"outV":1622}
{"id":4591,"type":"edge","label":"item","document":1590,"property":"definitions","inVs":[1621],"outV":4589}
{"id":4592,"type":"edge","label":"item","document":1590,"property":"references","inVs":[1636],"outV":4589}
{"id":4593,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\ncore::str\n```\n\n```rust\npub fn trim(&self) -> &str\n```\n\n---\n\nReturns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```rust\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```"}}}
{"id":4594,"type":"edge","label":"textDocument/hover","inV":4593,"outV":1629}
{"id":4595,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"core::str::trim","unique":"scheme","kind":"import"}
{"id":4596,"type":"edge","label":"packageInformation","inV":2072,"outV":4595}
{"id":4597,"type":"edge","label":"moniker","inV":4595,"outV":1629}
{"id":4598,"type":"vertex","label":"definitionResult"}
{"id":4599,"type":"vertex","label":"document","uri":"file:///opt/homebrew/Cellar/rust/1.81.0/lib/rustlib/src/rust/library/core/src/str/mod.rs","languageId":"rust"}
{"id":4600,"type":"vertex","label":"range","start":{"line":1933,"character":11},"end":{"line":1933,"character":15}}
{"id":4601,"type":"edge","label":"contains","inVs":[4600],"outV":4599}
{"id":4602,"type":"edge","label":"item","document":4599,"inVs":[4600],"outV":4598}
{"id":4603,"type":"edge","label":"textDocument/definition","inV":4598,"outV":1629}
{"id":4604,"type":"vertex","label":"referenceResult"}
{"id":4605,"type":"edge","label":"textDocument/references","inV":4604,"outV":1629}
{"id":4606,"type":"edge","label":"item","document":1590,"property":"references","inVs":[1628,1668],"outV":4604}
{"id":4607,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\ncore::str\n```\n\n```rust\npub fn parse<F>(&self) -> Result<F, F::Err>\nwhere\n    F: FromStr,\n```\n\n---\n\nParses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`](https://doc.rust-lang.org/stable/core/str/traits/trait.FromStr.html) trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n# Examples\n\nBasic usage\n\n```rust\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```rust\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```rust\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```"}}}
{"id":4608,"type":"edge","label":"textDocument/hover","inV":4607,"outV":1632}
{"id":4609,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"core::str::parse","unique":"scheme","kind":"import"}
{"id":4610,"type":"edge","label":"packageInformation","inV":2072,"outV":4609}
{"id":4611,"type":"edge","label":"moniker","inV":4609,"outV":1632}
{"id":4612,"type":"vertex","label":"definitionResult"}
{"id":4613,"type":"vertex","label":"range","start":{"line":2414,"character":11},"end":{"line":2414,"character":16}}
{"id":4614,"type":"edge","label":"contains","inVs":[4613],"outV":4599}
{"id":4615,"type":"edge","label":"item","document":4599,"inVs":[4613],"outV":4612}
{"id":4616,"type":"edge","label":"textDocument/definition","inV":4612,"outV":1632}
{"id":4617,"type":"vertex","label":"referenceResult"}
{"id":4618,"type":"edge","label":"textDocument/references","inV":4617,"outV":1632}
{"id":4619,"type":"edge","label":"item","document":1590,"property":"references","inVs":[1631,1670],"outV":4617}
{"id":4620,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nlet mut input_line: String\n```"}}}
{"id":4621,"type":"edge","label":"textDocument/hover","inV":4620,"outV":1645}
{"id":4622,"type":"vertex","label":"definitionResult"}
{"id":4623,"type":"edge","label":"item","document":1590,"inVs":[1644],"outV":4622}
{"id":4624,"type":"edge","label":"textDocument/definition","inV":4622,"outV":1645}
{"id":4625,"type":"vertex","label":"referenceResult"}
{"id":4626,"type":"edge","label":"textDocument/references","inV":4625,"outV":1645}
{"id":4627,"type":"edge","label":"item","document":1590,"property":"definitions","inVs":[1644],"outV":4625}
{"id":4628,"type":"edge","label":"item","document":1590,"property":"references","inVs":[1657,1666],"outV":4625}
{"id":4629,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nlet names: String\n```"}}}
{"id":4630,"type":"edge","label":"textDocument/hover","inV":4629,"outV":1662}
{"id":4631,"type":"vertex","label":"definitionResult"}
{"id":4632,"type":"edge","label":"item","document":1590,"inVs":[1661],"outV":4631}
{"id":4633,"type":"edge","label":"textDocument/definition","inV":4631,"outV":1662}
{"id":4634,"type":"vertex","label":"referenceResult"}
{"id":4635,"type":"edge","label":"textDocument/references","inV":4634,"outV":1662}
{"id":4636,"type":"edge","label":"item","document":1590,"property":"definitions","inVs":[1661],"outV":4634}
{"id":4637,"type":"edge","label":"item","document":1590,"property":"references","inVs":[1677],"outV":4634}
{"id":4638,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nlet names: Vec<String>\n```"}}}
{"id":4639,"type":"edge","label":"textDocument/hover","inV":4638,"outV":1675}
{"id":4640,"type":"vertex","label":"definitionResult"}
{"id":4641,"type":"edge","label":"item","document":1590,"inVs":[1674],"outV":4640}
{"id":4642,"type":"edge","label":"textDocument/definition","inV":4640,"outV":1675}
{"id":4643,"type":"vertex","label":"referenceResult"}
{"id":4644,"type":"edge","label":"textDocument/references","inV":4643,"outV":1675}
{"id":4645,"type":"edge","label":"item","document":1590,"property":"definitions","inVs":[1674],"outV":4643}
{"id":4646,"type":"edge","label":"item","document":1590,"property":"references","inVs":[1695],"outV":4643}
{"id":4647,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\ncore::str\n```\n\n```rust\npub fn split<'a, P>(&'a self, pat: P) -> Split<'a, P>\nwhere\n    P: Pattern<'a>,\n```\n\n---\n\nAn iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`](https://doc.rust-lang.org/stable/core/iter/traits/double_ended/trait.DoubleEndedIterator.html) if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n# Examples\n\nSimple patterns:\n\n```rust\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```rust\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```rust\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```rust\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```rust\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```rust\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```rust\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```rust\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does *not* give you:\n\n```rust\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior."}}}
{"id":4648,"type":"edge","label":"textDocument/hover","inV":4647,"outV":1680}
{"id":4649,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"core::str::split","unique":"scheme","kind":"import"}
{"id":4650,"type":"edge","label":"packageInformation","inV":2072,"outV":4649}
{"id":4651,"type":"edge","label":"moniker","inV":4649,"outV":1680}
{"id":4652,"type":"vertex","label":"definitionResult"}
{"id":4653,"type":"vertex","label":"range","start":{"line":1419,"character":11},"end":{"line":1419,"character":16}}
{"id":4654,"type":"edge","label":"contains","inVs":[4653],"outV":4599}
{"id":4655,"type":"edge","label":"item","document":4599,"inVs":[4653],"outV":4652}
{"id":4656,"type":"edge","label":"textDocument/definition","inV":4652,"outV":1680}
{"id":4657,"type":"vertex","label":"referenceResult"}
{"id":4658,"type":"edge","label":"textDocument/references","inV":4657,"outV":1680}
{"id":4659,"type":"edge","label":"item","document":1590,"property":"references","inVs":[1679],"outV":4657}
{"id":4660,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\ncore::iter::traits::iterator::Iterator\n```\n\n```rust\npub trait Iterator\npub fn map<B, F>(self, f: F) -> Map<Self, F>\nwhere\n    Self: Sized,\n    F: FnMut(Self::Item) -> B,\n```\n\n---\n\nTakes a closure and creates an iterator which calls that closure on each\nelement.\n\n`map()` transforms one iterator into another, by means of its argument:\nsomething that implements [`FnMut`](https://doc.rust-lang.org/stable/core/ops/function/trait.FnMut.html). It produces a new iterator which\ncalls this closure on each element of the original iterator.\n\nIf you are good at thinking in types, you can think of `map()` like this:\nIf you have an iterator that gives you elements of some type `A`, and\nyou want an iterator of some other type `B`, you can use `map()`,\npassing a closure that takes an `A` and returns a `B`.\n\n`map()` is conceptually similar to a [`for`](https://doc.rust-lang.org/stable/core/iter/book/ch03-05-control-flow.html#looping-through-a-collection-with-for) loop. However, as `map()` is\nlazy, it is best used when you're already working with other iterators.\nIf you're doing some sort of looping for a side effect, it's considered\nmore idiomatic to use [`for`](https://doc.rust-lang.org/stable/core/iter/book/ch03-05-control-flow.html#looping-through-a-collection-with-for) than `map()`.\n\n# Examples\n\nBasic usage:\n\n```rust\nlet a = [1, 2, 3];\n\nlet mut iter = a.iter().map(|x| 2 * x);\n\nassert_eq!(iter.next(), Some(2));\nassert_eq!(iter.next(), Some(4));\nassert_eq!(iter.next(), Some(6));\nassert_eq!(iter.next(), None);\n```\n\nIf you're doing some sort of side effect, prefer [`for`](https://doc.rust-lang.org/stable/core/iter/book/ch03-05-control-flow.html#looping-through-a-collection-with-for) to `map()`:\n\n```rust\n// don't do this:\n(0..5).map(|x| println!(\"{x}\"));\n\n// it won't even execute, as it is lazy. Rust will warn you about this.\n\n// Instead, use for:\nfor x in 0..5 {\n    println!(\"{x}\");\n}\n```"}}}
{"id":4661,"type":"edge","label":"textDocument/hover","inV":4660,"outV":1683}
{"id":4662,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"core::iterator::traits::iter::Iterator::map","unique":"scheme","kind":"import"}
{"id":4663,"type":"edge","label":"packageInformation","inV":2072,"outV":4662}
{"id":4664,"type":"edge","label":"moniker","inV":4662,"outV":1683}
{"id":4665,"type":"vertex","label":"definitionResult"}
{"id":4666,"type":"vertex","label":"document","uri":"file:///opt/homebrew/Cellar/rust/1.81.0/lib/rustlib/src/rust/library/core/src/iter/traits/iterator.rs","languageId":"rust"}
{"id":4667,"type":"vertex","label":"range","start":{"line":761,"character":7},"end":{"line":761,"character":10}}
{"id":4668,"type":"edge","label":"contains","inVs":[4667],"outV":4666}
{"id":4669,"type":"edge","label":"item","document":4666,"inVs":[4667],"outV":4665}
{"id":4670,"type":"edge","label":"textDocument/definition","inV":4665,"outV":1683}
{"id":4671,"type":"vertex","label":"referenceResult"}
{"id":4672,"type":"edge","label":"textDocument/references","inV":4671,"outV":1683}
{"id":4673,"type":"edge","label":"item","document":1590,"property":"references","inVs":[1682],"outV":4671}
{"id":4674,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\nx: &str\n```"}}}
{"id":4675,"type":"edge","label":"textDocument/hover","inV":4674,"outV":1686}
{"id":4676,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"rust_racingcar::input::input_names::x","unique":"scheme","kind":"export"}
{"id":4677,"type":"edge","label":"packageInformation","inV":1709,"outV":4676}
{"id":4678,"type":"edge","label":"moniker","inV":4676,"outV":1686}
{"id":4679,"type":"vertex","label":"definitionResult"}
{"id":4680,"type":"edge","label":"item","document":1590,"inVs":[1685],"outV":4679}
{"id":4681,"type":"edge","label":"textDocument/definition","inV":4679,"outV":1686}
{"id":4682,"type":"vertex","label":"referenceResult"}
{"id":4683,"type":"edge","label":"textDocument/references","inV":4682,"outV":1686}
{"id":4684,"type":"edge","label":"item","document":1590,"property":"definitions","inVs":[1685],"outV":4682}
{"id":4685,"type":"edge","label":"item","document":1590,"property":"references","inVs":[1688],"outV":4682}
{"id":4686,"type":"vertex","label":"hoverResult","result":{"contents":{"kind":"markdown","value":"\n```rust\ncore::iter::traits::iterator::Iterator\n```\n\n```rust\npub trait Iterator\npub fn collect<B>(self) -> B\nwhere\n    B: FromIterator<Self::Item>,\n    Self: Sized,\n```\n\n---\n\nTransforms an iterator into a collection.\n\n`collect()` can take anything iterable, and turn it into a relevant\ncollection. This is one of the more powerful methods in the standard\nlibrary, used in a variety of contexts.\n\nThe most basic pattern in which `collect()` is used is to turn one\ncollection into another. You take a collection, call [`iter`] on it,\ndo a bunch of transformations, and then `collect()` at the end.\n\n`collect()` can also create instances of types that are not typical\ncollections. For example, a [`String`](https://doc.rust-lang.org/stable/core/iter/std/string/struct.String.html) can be built from [`char`]s,\nand an iterator of [`Result<T, E>`](https://doc.rust-lang.org/stable/core/result/enum.Result.html) items can be collected\ninto `Result<Collection<T>, E>`. See the examples below for more.\n\nBecause `collect()` is so general, it can cause problems with type\ninference. As such, `collect()` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which collection\nyou're trying to collect into.\n\n# Examples\n\nBasic usage:\n\n```rust\nlet a = [1, 2, 3];\n\nlet doubled: Vec<i32> = a.iter()\n                         .map(|&x| x * 2)\n                         .collect();\n\nassert_eq!(vec![2, 4, 6], doubled);\n```\n\nNote that we needed the `: Vec<i32>` on the left-hand side. This is because\nwe could collect into, for example, a [`VecDeque<T>`](https://doc.rust-lang.org/stable/core/iter/std/collections/struct.VecDeque.html) instead:\n\n```rust\nuse std::collections::VecDeque;\n\nlet a = [1, 2, 3];\n\nlet doubled: VecDeque<i32> = a.iter().map(|&x| x * 2).collect();\n\nassert_eq!(2, doubled[0]);\nassert_eq!(4, doubled[1]);\nassert_eq!(6, doubled[2]);\n```\n\nUsing the 'turbofish' instead of annotating `doubled`:\n\n```rust\nlet a = [1, 2, 3];\n\nlet doubled = a.iter().map(|x| x * 2).collect::<Vec<i32>>();\n\nassert_eq!(vec![2, 4, 6], doubled);\n```\n\nBecause `collect()` only cares about what you're collecting into, you can\nstill use a partial type hint, `_`, with the turbofish:\n\n```rust\nlet a = [1, 2, 3];\n\nlet doubled = a.iter().map(|x| x * 2).collect::<Vec<_>>();\n\nassert_eq!(vec![2, 4, 6], doubled);\n```\n\nUsing `collect()` to make a [`String`](https://doc.rust-lang.org/stable/core/iter/std/string/struct.String.html):\n\n```rust\nlet chars = ['g', 'd', 'k', 'k', 'n'];\n\nlet hello: String = chars.iter()\n    .map(|&x| x as u8)\n    .map(|x| (x + 1) as char)\n    .collect();\n\nassert_eq!(\"hello\", hello);\n```\n\nIf you have a list of [`Result<T, E>`](https://doc.rust-lang.org/stable/core/result/enum.Result.html)s, you can use `collect()` to\nsee if any of them failed:\n\n```rust\nlet results = [Ok(1), Err(\"nope\"), Ok(3), Err(\"bad\")];\n\nlet result: Result<Vec<_>, &str> = results.iter().cloned().collect();\n\n// gives us the first error\nassert_eq!(Err(\"nope\"), result);\n\nlet results = [Ok(1), Ok(3)];\n\nlet result: Result<Vec<_>, &str> = results.iter().cloned().collect();\n\n// gives us the list of answers\nassert_eq!(Ok(vec![1, 3]), result);\n```"}}}
{"id":4687,"type":"edge","label":"textDocument/hover","inV":4686,"outV":1693}
{"id":4688,"type":"vertex","label":"moniker","scheme":"rust-analyzer","identifier":"core::iterator::traits::iter::Iterator::collect","unique":"scheme","kind":"import"}
{"id":4689,"type":"edge","label":"packageInformation","inV":2072,"outV":4688}
{"id":4690,"type":"edge","label":"moniker","inV":4688,"outV":1693}
{"id":4691,"type":"vertex","label":"definitionResult"}
{"id":4692,"type":"vertex","label":"range","start":{"line":2000,"character":7},"end":{"line":2000,"character":14}}
{"id":4693,"type":"edge","label":"contains","inVs":[4692],"outV":4666}
{"id":4694,"type":"edge","label":"item","document":4666,"inVs":[4692],"outV":4691}
{"id":4695,"type":"edge","label":"textDocument/definition","inV":4691,"outV":1693}
{"id":4696,"type":"vertex","label":"referenceResult"}
{"id":4697,"type":"edge","label":"textDocument/references","inV":4696,"outV":1693}
{"id":4698,"type":"edge","label":"item","document":1590,"property":"references","inVs":[1692],"outV":4696}
