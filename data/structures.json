{"name":"Game","signature":"# [derive (Debug)] pub struct Game { pub number_of_players : i32 , pub number_of_attempts : i32 , pub (crate) players : Vec < player :: Player > }","code_type":"Struct","docstring":null,"line":6,"line_from":5,"line_to":10,"context":{"module":"model","file_path":"rust-racingcar/src/model/game.rs","file_name":"game.rs","struct_name":null,"snippet":"#[derive(Debug)]\npub struct Game {\n    pub number_of_players: i32,\n    pub number_of_attempts: i32,\n    pub(crate) players: Vec<player::Player>\n}\n"}}
{"name":"Step","signature":"# [derive (Debug)] # [derive (Clone)] pub struct Step { pub is_moved : i32 , pub step_number : i32 }","code_type":"Struct","docstring":null,"line":6,"line_from":4,"line_to":9,"context":{"module":"model","file_path":"rust-racingcar/src/model/step.rs","file_name":"step.rs","struct_name":null,"snippet":"#[derive(Debug)]\n#[derive(Clone)]\npub struct Step {\n    pub is_moved: i32,\n    pub step_number: i32\n}\n"}}
{"name":"Player","signature":"# [derive (Debug)] # [derive (Clone)] pub struct Player { pub (crate) name : String , pub (crate) steps : Vec < step :: Step > }","code_type":"Struct","docstring":null,"line":6,"line_from":4,"line_to":9,"context":{"module":"model","file_path":"rust-racingcar/src/model/player.rs","file_name":"player.rs","struct_name":null,"snippet":"#[derive(Debug)]\n#[derive(Clone)]\npub struct Player {\n    pub(crate) name: String,\n    pub(crate) steps: Vec<step::Step>\n}\n"}}
{"name":"run_test","signature":"fn run_test < T > (test : T) where T : FnOnce (& TestGame) -> () + panic :: UnwindSafe","code_type":"Function","docstring":null,"line":10,"line_from":10,"line_to":32,"context":{"module":"test","file_path":"rust-racingcar/src/test/game-test.rs","file_name":"game-test.rs","struct_name":null,"snippet":"fn run_test<T>(test: T)\n    where T: FnOnce(&TestGame) -> () + panic::UnwindSafe\n{\n    let name_of_players = vec![\"pobi\".to_string(), \"crong\".to_string(), \"honux\".to_string()];\n    let number_of_players = 3;\n    let number_of_attempts = 5;\n\n    // https://medium.com/@ericdreichert/test-setup-and-teardown-in-rust-without-a-framework-ba32d97aa5ab\n    let test_game_create_result = panic::catch_unwind(|| {\n        TestGame::new(name_of_players, number_of_players, number_of_attempts)\n    }).map(|test_game| {\n        test(&test_game)\n    });\n\n    match test_game_create_result {\n        Ok(_) => {\n            println!(\"test_game_create_result passed\");\n        }\n        Err(_) => {\n            panic!(\"Test game creation failed\");\n        }\n    }\n}\n"}}
{"name":"is_able_to_create_new_game_struct","signature":"fn is_able_to_create_new_game_struct ()","code_type":"Function","docstring":null,"line":35,"line_from":35,"line_to":40,"context":{"module":"test","file_path":"rust-racingcar/src/test/game-test.rs","file_name":"game-test.rs","struct_name":null,"snippet":"#[test]\nfn is_able_to_create_new_game_struct() {\n    run_test(|new_game| {\n        assert_eq!(new_game.get_number_of_players(), 3);\n        assert_eq!(new_game.get_number_of_attempts(), 5);\n    });\n}\n"}}
{"name":"is_able_to_create_new_step_struct_in_player","signature":"fn is_able_to_create_new_step_struct_in_player ()","code_type":"Function","docstring":null,"line":43,"line_from":43,"line_to":61,"context":{"module":"test","file_path":"rust-racingcar/src/test/game-test.rs","file_name":"game-test.rs","struct_name":null,"snippet":"#[test]\nfn is_able_to_create_new_step_struct_in_player() {\n    run_test(|new_game| {\n        // given\n        let original_players = new_game.get_players();\n        // clone players\n        let mut players = Vec::with_capacity(original_players.len());\n        players.clone_from(original_players);\n        let player = players.get_mut(0).unwrap();\n\n        // when\n        let steps = player.get_steps();\n\n        // then\n        assert_eq!(steps.len(), new_game.get_number_of_attempts() as usize);\n\n        let step = steps.get(0).unwrap();\n        assert_eq!(step.get_step_number(), 1);\n    });\n}\n"}}
{"name":"test_mocked_game_new_function","signature":"fn test_mocked_game_new_function ()","code_type":"Function","docstring":null,"line":64,"line_from":64,"line_to":119,"context":{"module":"test","file_path":"rust-racingcar/src/test/game-test.rs","file_name":"game-test.rs","struct_name":null,"snippet":"#[test]\nfn test_mocked_game_new_function() {\n    let step_case_1 = step::Step {\n        step_number: 1,\n        is_moved: 3,\n    };\n    let step_case_1_optional = Some(&step_case_1);\n\n    let mut step_case_2 = step::Step {\n        step_number: 2,\n        is_moved: 4,\n    };\n    step_case_2.update_this_step_move_number(step_case_2.is_moved, step_case_1_optional);\n    let step_case_2_optional = Some(&step_case_2);\n\n    let mut step_case_3 = step::Step {\n        step_number: 3,\n        is_moved: 5,\n    };\n    step_case_3.update_this_step_move_number(step_case_3.is_moved, step_case_2_optional);\n    let step_case_3_optional = Some(&step_case_3);\n\n    let mut step_case_4 = step::Step {\n        step_number: 4,\n        is_moved: 2,\n    };\n    step_case_4.update_this_step_move_number(step_case_4.is_moved, step_case_3_optional);\n    let step_case_4_optional = Some(&step_case_4);\n\n    let mut step_case_5 = step::Step {\n        step_number: 5,\n        is_moved: 0,\n    };\n    step_case_5.update_this_step_move_number(step_case_5.is_moved, step_case_4_optional);\n\n    let players_name = vec![\"pobi\".to_string(), \"crong\".to_string(), \"honux\".to_string()];\n\n    // https://github.com/asomers/mockall/issues/44\n    let ctx = MockGameFn::new_context();\n    ctx.expect().returning(|_, _, _| MockGameFn::default());\n\n    let mut mock_foo = MockGameFn::new(players_name, 3, 5);\n    mock_foo.expect_initialize_players()\n        .returning(|_| MockGameFn::default());\n    mock_foo.expect_get_number_of_attempts()\n        .returning(|| 5);\n    mock_foo.expect_get_number_of_players()\n        .returning(|| 3);\n\n    // let player_names = vec![\"pobi\".to_string(), \"crong\".to_string()];\n    // let number_of_players = 2;\n    // let number_of_attempts = 5;\n    // let game = mock.new(player_names, number_of_players, number_of_attempts);\n    // assert_eq!(game.number_of_players, 2);\n    // assert_eq!(game.number_of_attempts, 5);\n    // assert_eq!(game.players.len(), 2);\n}\n"}}
{"name":"mock_input_integer","signature":"fn mock_input_integer (buf : & mut String) -> io :: Result < usize >","code_type":"Function","docstring":null,"line":12,"line_from":12,"line_to":15,"context":{"module":"test","file_path":"rust-racingcar/src/test/test.rs","file_name":"test.rs","struct_name":null,"snippet":"fn mock_input_integer(buf: &mut String) -> io::Result<usize> {\n    buf.push_str(\"3\");\n    Ok(1)\n}\n"}}
{"name":"mock_input_names","signature":"fn mock_input_names (buf : & mut String) -> io :: Result < usize >","code_type":"Function","docstring":null,"line":17,"line_from":17,"line_to":20,"context":{"module":"test","file_path":"rust-racingcar/src/test/test.rs","file_name":"test.rs","struct_name":null,"snippet":"fn mock_input_names(buf: &mut String) -> io::Result<usize> {\n    buf.push_str(\"pobi,crong,honux\");\n    Ok(1)\n}\n"}}
{"name":"test_mock_input_integer","signature":"fn test_mock_input_integer ()","code_type":"Function","docstring":null,"line":23,"line_from":23,"line_to":31,"context":{"module":"test","file_path":"rust-racingcar/src/test/test.rs","file_name":"test.rs","struct_name":null,"snippet":"#[test]\nfn test_mock_input_integer() {\n    let mut mock = MockStdin::new();\n    mock.expect_mock_input_integer()\n        .times(1)\n        .returning(mock_input_integer);\n    let mut buf = String::new();\n    mock.mock_input_integer(&mut buf).unwrap();\n    assert_eq!(buf, \"3\");\n}\n"}}
{"name":"test_mock_input_names","signature":"fn test_mock_input_names ()","code_type":"Function","docstring":null,"line":34,"line_from":34,"line_to":42,"context":{"module":"test","file_path":"rust-racingcar/src/test/test.rs","file_name":"test.rs","struct_name":null,"snippet":"#[test]\nfn test_mock_input_names() {\n    let mut mock = MockStdin::new();\n    mock.expect_mock_input_names()\n        .times(1)\n        .returning(mock_input_names);\n    let mut buf = String::new();\n    mock.mock_input_names(&mut buf).unwrap();\n    assert_eq!(buf, \"pobi,crong,honux\");\n}\n"}}
{"name":"test_step_number","signature":"fn test_step_number ()","code_type":"Function","docstring":null,"line":45,"line_from":45,"line_to":49,"context":{"module":"test","file_path":"rust-racingcar/src/test/test.rs","file_name":"test.rs","struct_name":null,"snippet":"#[test]\nfn test_step_number() {\n    let last_step: Option<&Step> = None;\n    let step = Step::new(1, last_step);\n    assert_eq!(step.get_step_number(), 1);\n}\n"}}
{"name":"new","signature":"fn new (name_of_players : Vec < String > , number_of_players : i32 , number_of_attempts : i32) -> Self","code_type":"Function","docstring":null,"line":25,"line_from":25,"line_to":37,"context":{"module":"model","file_path":"rust-racingcar/src/model/game.rs","file_name":"game.rs","struct_name":"Game","snippet":"    fn new(name_of_players: Vec<String>, number_of_players: i32, number_of_attempts: i32) -> Self {\n        let new_game = Self {\n            number_of_players,\n            number_of_attempts,\n            players: Vec::with_capacity(number_of_players as usize)\n        };\n        let new_game = Self::initialize_players(new_game, &name_of_players);\n        let new_game = Self::play_steps(new_game);\n        for step_number in 1..=new_game.number_of_attempts {\n            Self::print_the_dash_by_the_amount_of_steps_on_this_step(&new_game, step_number);\n        }\n        new_game\n    }\n"}}
{"name":"print_the_dash_by_the_amount_of_is_moved_on_steps","signature":"fn print_the_dash_by_the_amount_of_is_moved_on_steps (& self)","code_type":"Function","docstring":null,"line":40,"line_from":40,"line_to":44,"context":{"module":"model","file_path":"rust-racingcar/src/model/game.rs","file_name":"game.rs","struct_name":"Game","snippet":"    fn print_the_dash_by_the_amount_of_is_moved_on_steps(&self) {\n        for player in self.players.iter() {\n            player.print_the_dash_by_the_amount_of_is_moved_on_steps();\n        }\n    }\n"}}
{"name":"print_the_dash_by_the_amount_of_steps_on_this_step","signature":"fn print_the_dash_by_the_amount_of_steps_on_this_step (& self , step_number : i32)","code_type":"Function","docstring":null,"line":47,"line_from":47,"line_to":52,"context":{"module":"model","file_path":"rust-racingcar/src/model/game.rs","file_name":"game.rs","struct_name":"Game","snippet":"    fn print_the_dash_by_the_amount_of_steps_on_this_step(&self, step_number: i32) {\n        for player in self.players.iter() {\n            player.print_the_dash_by_the_amount_of_steps_on_this_step(step_number);\n        }\n        println!();\n    }\n"}}
{"name":"get_players","signature":"fn get_players (& self) -> & Vec < player :: Player >","code_type":"Function","docstring":null,"line":54,"line_from":54,"line_to":56,"context":{"module":"model","file_path":"rust-racingcar/src/model/game.rs","file_name":"game.rs","struct_name":"Game","snippet":"    fn get_players(&self) -> &Vec<player::Player> {\n        &self.players\n    }\n"}}
{"name":"get_number_of_players","signature":"fn get_number_of_players (& self) -> i32","code_type":"Function","docstring":null,"line":58,"line_from":58,"line_to":60,"context":{"module":"model","file_path":"rust-racingcar/src/model/game.rs","file_name":"game.rs","struct_name":"Game","snippet":"    fn get_number_of_players(&self) -> i32 {\n        self.number_of_players\n    }\n"}}
{"name":"get_number_of_attempts","signature":"fn get_number_of_attempts (& self) -> i32","code_type":"Function","docstring":null,"line":62,"line_from":62,"line_to":64,"context":{"module":"model","file_path":"rust-racingcar/src/model/game.rs","file_name":"game.rs","struct_name":"Game","snippet":"    fn get_number_of_attempts(&self) -> i32 {\n        self.number_of_attempts\n    }\n"}}
{"name":"initialize_players","signature":"fn initialize_players (mut self , name_of_players : & Vec < String >) -> Self","code_type":"Function","docstring":null,"line":66,"line_from":66,"line_to":72,"context":{"module":"model","file_path":"rust-racingcar/src/model/game.rs","file_name":"game.rs","struct_name":"Game","snippet":"    fn initialize_players(mut self, name_of_players: &Vec<String>) -> Self {\n        for name in name_of_players {\n            let new_player = player::Player::new(name.to_string(), self.number_of_attempts);\n            self.players.push(new_player);\n        }\n        self\n    }\n"}}
{"name":"play_steps","signature":"fn play_steps (self) -> Self","code_type":"Function","docstring":null,"line":74,"line_from":74,"line_to":80,"context":{"module":"model","file_path":"rust-racingcar/src/model/game.rs","file_name":"game.rs","struct_name":"Game","snippet":"    fn play_steps(self) -> Self {\n        let mut this = self;\n        for player in this.players.iter_mut() {\n            player.play_steps();\n        }\n        this\n    }\n"}}
{"name":"new","signature":"fn new (step_number : i32 , last_step : Option < & Step >) -> Self","code_type":"Function","docstring":null,"line":12,"line_from":12,"line_to":20,"context":{"module":"model","file_path":"rust-racingcar/src/model/step.rs","file_name":"step.rs","struct_name":"Step","snippet":"    pub fn new(step_number: i32, last_step: Option<&Step>) -> Self {\n        let mut this = Self {\n            is_moved: 0,\n            step_number\n        };\n        let this_step_move_number: i32 = Self::get_this_step_move_number_by_random();\n        this = Self::update_this_step_move_number(&mut this, this_step_move_number, last_step);\n        this\n    }\n"}}
{"name":"update_this_step_move_number","signature":"fn update_this_step_move_number (& mut self , this_step_move_number : i32 , last_step : Option < & Step >) -> Step","code_type":"Function","docstring":null,"line":22,"line_from":22,"line_to":33,"context":{"module":"model","file_path":"rust-racingcar/src/model/step.rs","file_name":"step.rs","struct_name":"Step","snippet":"    pub fn update_this_step_move_number(&mut self, this_step_move_number: i32, last_step: Option<&Step>) -> Step {\n        if let Some(last_step) = last_step {\n            return Self {\n                is_moved: last_step.is_moved + this_step_move_number as i32,\n                step_number: self.step_number\n            };\n        }\n        return Self {\n            is_moved: this_step_move_number as i32,\n            step_number: self.step_number\n        }\n    }\n"}}
{"name":"get_this_step_move_number_by_random","signature":"fn get_this_step_move_number_by_random () -> i32","code_type":"Function","docstring":null,"line":35,"line_from":35,"line_to":41,"context":{"module":"model","file_path":"rust-racingcar/src/model/step.rs","file_name":"step.rs","struct_name":"Step","snippet":"    pub fn get_this_step_move_number_by_random() -> i32 {\n        let random_number = rand::thread_rng().gen_range(0, 9);\n        if random_number > 4 {\n            return random_number\n        }\n        return 0\n    }\n"}}
{"name":"get_step_number","signature":"fn get_step_number (& self) -> i32","code_type":"Function","docstring":null,"line":43,"line_from":43,"line_to":45,"context":{"module":"model","file_path":"rust-racingcar/src/model/step.rs","file_name":"step.rs","struct_name":"Step","snippet":"    pub fn get_step_number(&self) -> i32 {\n        self.step_number\n    }\n"}}
{"name":"get_is_moved","signature":"fn get_is_moved (& self) -> i32","code_type":"Function","docstring":null,"line":47,"line_from":47,"line_to":49,"context":{"module":"model","file_path":"rust-racingcar/src/model/step.rs","file_name":"step.rs","struct_name":"Step","snippet":"    pub fn get_is_moved(&self) -> i32 {\n        self.is_moved\n    }\n"}}
{"name":"fmt","signature":"fn fmt (& self , _ : & mut fmt :: Formatter) -> fmt :: Result","code_type":"Function","docstring":null,"line":53,"line_from":53,"line_to":58,"context":{"module":"model","file_path":"rust-racingcar/src/model/step.rs","file_name":"step.rs","struct_name":"Step","snippet":"    fn fmt(&self, _: &mut fmt::Formatter) -> fmt::Result {\n        for _ in 0..self.is_moved {\n            print!(\"-\");\n        }\n        Ok(())\n    }\n"}}
{"name":"new","signature":"fn new (name : String , number_of_attempts : i32) -> Self","code_type":"Function","docstring":null,"line":12,"line_from":12,"line_to":17,"context":{"module":"model","file_path":"rust-racingcar/src/model/player.rs","file_name":"player.rs","struct_name":"Player","snippet":"    pub fn new(name: String, number_of_attempts: i32) -> Self {\n        Self {\n            name,\n            steps: Vec::with_capacity(number_of_attempts as usize)\n        }\n    }\n"}}
{"name":"play_steps","signature":"fn play_steps (& mut self)","code_type":"Function","docstring":null,"line":19,"line_from":19,"line_to":27,"context":{"module":"model","file_path":"rust-racingcar/src/model/player.rs","file_name":"player.rs","struct_name":"Player","snippet":"    pub fn play_steps(&mut self) {\n        for step_number in 0..self.steps.capacity() {\n            // get last step\n            let last_step = self.steps.last();\n            let now_step_number = step_number + 1;\n            let step = step::Step::new(now_step_number as i32, last_step);\n            self.steps.push(step);\n        }\n    }\n"}}
{"name":"get_steps","signature":"fn get_steps (& self) -> & Vec < step :: Step >","code_type":"Function","docstring":null,"line":29,"line_from":29,"line_to":31,"context":{"module":"model","file_path":"rust-racingcar/src/model/player.rs","file_name":"player.rs","struct_name":"Player","snippet":"    pub fn get_steps(&self) -> &Vec<step::Step> {\n        &self.steps\n    }\n"}}
{"name":"print_the_dash_by_the_amount_of_is_moved_on_steps","signature":"fn print_the_dash_by_the_amount_of_is_moved_on_steps (& self)","code_type":"Function","docstring":null,"line":33,"line_from":33,"line_to":38,"context":{"module":"model","file_path":"rust-racingcar/src/model/player.rs","file_name":"player.rs","struct_name":"Player","snippet":"    pub fn print_the_dash_by_the_amount_of_is_moved_on_steps(&self) {\n        println!(\"{}\", self.name);\n        for step in self.steps.iter() {\n            println!(\"{}\", step);\n        }\n    }\n"}}
{"name":"print_the_dash_by_the_amount_of_steps_on_this_step","signature":"fn print_the_dash_by_the_amount_of_steps_on_this_step (& self , step_number : i32)","code_type":"Function","docstring":null,"line":40,"line_from":40,"line_to":47,"context":{"module":"model","file_path":"rust-racingcar/src/model/player.rs","file_name":"player.rs","struct_name":"Player","snippet":"    pub fn print_the_dash_by_the_amount_of_steps_on_this_step(&self, step_number: i32) {\n        for step in self.steps.iter() {\n            if step.get_step_number() == step_number {\n                println!(\"{}: {}\", self.name, step);\n                break;\n            }\n        }\n    }\n"}}
{"name":"get_player_name","signature":"fn get_player_name (& self) -> String","code_type":"Function","docstring":null,"line":49,"line_from":49,"line_to":51,"context":{"module":"model","file_path":"rust-racingcar/src/model/player.rs","file_name":"player.rs","struct_name":"Player","snippet":"    pub fn get_player_name(&self) -> String {\n        self.name.to_string()\n    }\n"}}
{"name":"input_integer","signature":"fn input_integer () -> i32","code_type":"Function","docstring":null,"line":3,"line_from":3,"line_to":8,"context":{"module":"view","file_path":"rust-racingcar/src/view/input.rs","file_name":"input.rs","struct_name":null,"snippet":"pub fn input_integer() -> i32 {\n    let mut input_line = String::new();\n    io::stdin().read_line(&mut input_line).expect(\"문제가 발생했습니다.\");\n    let x: i32 = input_line.trim().parse().expect(\"숫자를 입력해주세요.\");\n    return x;\n}\n"}}
{"name":"input_names","signature":"fn input_names () -> Vec < String >","code_type":"Function","docstring":null,"line":10,"line_from":10,"line_to":16,"context":{"module":"view","file_path":"rust-racingcar/src/view/input.rs","file_name":"input.rs","struct_name":null,"snippet":"pub fn input_names() -> Vec<String> {\n    let mut input_line = String::new();\n    io::stdin().read_line(&mut input_line).expect(\"문제가 발생했습니다.\");\n    let names: String = input_line.trim().parse().expect(\"이름을 입력해주세요.\");\n    let names = names.split(\",\").map(|x| x.to_string()).collect();\n    names\n}\n"}}
{"name":"main","signature":"fn main ()","code_type":"Function","docstring":null,"line":7,"line_from":7,"line_to":25,"context":{"module":"src","file_path":"rust-racingcar/src/main.rs","file_name":"main.rs","struct_name":null,"snippet":"fn main() {\n    println!(\"Rust로 구현하는 자동차 경주 게임\");\n\n    // 자동차 대수를 입력받는다.\n    println!(\"자동차 대수는 몇 대인가요?\");\n    let the_number_of_cars: i32 = input::input_integer();\n    println!(\"입력받은 자동차 대수: {:?}\", the_number_of_cars);\n\n    // 시도할 횟수를 입력받는다.\n    println!(\"시도할 횟수는 몇 회인가요?\");\n    let the_number_of_attempts: i32 = input::input_integer();\n    println!(\"시도할 횟수: {:?}\", the_number_of_attempts);\n\n    println!(\"경주할 자동차 이름을 입력하세요(이름은 쉼표(,)를 기준으로 구분).\");\n    let player_names: Vec<String> = input::input_names();\n    println!(\"입력 받은 자동차 이름, {:?}\", player_names);\n\n    <game::Game as GameFn>::new(player_names, the_number_of_cars, the_number_of_attempts);\n}\n"}}
